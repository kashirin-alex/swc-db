/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.19.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


/// <summary>
/// The Scan Specifications, the Columns-Intervals(SpecColumn/s) with global-scope Flags
/// </summary>
public partial class SpecScan : TBase
{
  private List<SpecColumnPlain> _columns_plain;
  private List<SpecColumnCounter> _columns_counter;
  private List<SpecColumnSerial> _columns_serial;
  private SpecFlags _flags;

  /// <summary>
  /// The Plain Column Intervals(SpecColumnPlain) in a list-container
  /// </summary>
  public List<SpecColumnPlain> Columns_plain
  {
    get
    {
      return _columns_plain;
    }
    set
    {
      __isset.columns_plain = true;
      this._columns_plain = value;
    }
  }

  /// <summary>
  /// The Counter Column Intervals(SpecColumnCounter) in a list-container
  /// </summary>
  public List<SpecColumnCounter> Columns_counter
  {
    get
    {
      return _columns_counter;
    }
    set
    {
      __isset.columns_counter = true;
      this._columns_counter = value;
    }
  }

  /// <summary>
  /// The Serial Column Intervals(SpecColumnSerial) in a list-container
  /// </summary>
  public List<SpecColumnSerial> Columns_serial
  {
    get
    {
      return _columns_serial;
    }
    set
    {
      __isset.columns_serial = true;
      this._columns_serial = value;
    }
  }

  /// <summary>
  /// The Global Flags Specification
  /// </summary>
  public SpecFlags Flags
  {
    get
    {
      return _flags;
    }
    set
    {
      __isset.@flags = true;
      this._flags = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool columns_plain;
    public bool columns_counter;
    public bool columns_serial;
    public bool @flags;
  }

  public SpecScan()
  {
  }

  public SpecScan DeepCopy()
  {
    var tmp274 = new SpecScan();
    if((Columns_plain != null) && __isset.columns_plain)
    {
      tmp274.Columns_plain = this.Columns_plain.DeepCopy();
    }
    tmp274.__isset.columns_plain = this.__isset.columns_plain;
    if((Columns_counter != null) && __isset.columns_counter)
    {
      tmp274.Columns_counter = this.Columns_counter.DeepCopy();
    }
    tmp274.__isset.columns_counter = this.__isset.columns_counter;
    if((Columns_serial != null) && __isset.columns_serial)
    {
      tmp274.Columns_serial = this.Columns_serial.DeepCopy();
    }
    tmp274.__isset.columns_serial = this.__isset.columns_serial;
    if((Flags != null) && __isset.@flags)
    {
      tmp274.Flags = (SpecFlags)this.Flags.DeepCopy();
    }
    tmp274.__isset.@flags = this.__isset.@flags;
    return tmp274;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List)
            {
              {
                var _list275 = await iprot.ReadListBeginAsync(cancellationToken);
                Columns_plain = new List<SpecColumnPlain>(_list275.Count);
                for(int _i276 = 0; _i276 < _list275.Count; ++_i276)
                {
                  SpecColumnPlain _elem277;
                  _elem277 = new SpecColumnPlain();
                  await _elem277.ReadAsync(iprot, cancellationToken);
                  Columns_plain.Add(_elem277);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.List)
            {
              {
                var _list278 = await iprot.ReadListBeginAsync(cancellationToken);
                Columns_counter = new List<SpecColumnCounter>(_list278.Count);
                for(int _i279 = 0; _i279 < _list278.Count; ++_i279)
                {
                  SpecColumnCounter _elem280;
                  _elem280 = new SpecColumnCounter();
                  await _elem280.ReadAsync(iprot, cancellationToken);
                  Columns_counter.Add(_elem280);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.List)
            {
              {
                var _list281 = await iprot.ReadListBeginAsync(cancellationToken);
                Columns_serial = new List<SpecColumnSerial>(_list281.Count);
                for(int _i282 = 0; _i282 < _list281.Count; ++_i282)
                {
                  SpecColumnSerial _elem283;
                  _elem283 = new SpecColumnSerial();
                  await _elem283.ReadAsync(iprot, cancellationToken);
                  Columns_serial.Add(_elem283);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.Struct)
            {
              Flags = new SpecFlags();
              await Flags.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp284 = new TStruct("SpecScan");
      await oprot.WriteStructBeginAsync(tmp284, cancellationToken);
      var tmp285 = new TField();
      if((Columns_plain != null) && __isset.columns_plain)
      {
        tmp285.Name = "columns_plain";
        tmp285.Type = TType.List;
        tmp285.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp285, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.Struct, Columns_plain.Count), cancellationToken);
        foreach (SpecColumnPlain _iter286 in Columns_plain)
        {
          await _iter286.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Columns_counter != null) && __isset.columns_counter)
      {
        tmp285.Name = "columns_counter";
        tmp285.Type = TType.List;
        tmp285.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp285, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.Struct, Columns_counter.Count), cancellationToken);
        foreach (SpecColumnCounter _iter287 in Columns_counter)
        {
          await _iter287.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Columns_serial != null) && __isset.columns_serial)
      {
        tmp285.Name = "columns_serial";
        tmp285.Type = TType.List;
        tmp285.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp285, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.Struct, Columns_serial.Count), cancellationToken);
        foreach (SpecColumnSerial _iter288 in Columns_serial)
        {
          await _iter288.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Flags != null) && __isset.@flags)
      {
        tmp285.Name = "flags";
        tmp285.Type = TType.Struct;
        tmp285.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp285, cancellationToken);
        await Flags.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is SpecScan other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.columns_plain == other.__isset.columns_plain) && ((!__isset.columns_plain) || (TCollections.Equals(Columns_plain, other.Columns_plain))))
      && ((__isset.columns_counter == other.__isset.columns_counter) && ((!__isset.columns_counter) || (TCollections.Equals(Columns_counter, other.Columns_counter))))
      && ((__isset.columns_serial == other.__isset.columns_serial) && ((!__isset.columns_serial) || (TCollections.Equals(Columns_serial, other.Columns_serial))))
      && ((__isset.@flags == other.__isset.@flags) && ((!__isset.@flags) || (global::System.Object.Equals(Flags, other.Flags))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((Columns_plain != null) && __isset.columns_plain)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Columns_plain);
      }
      if((Columns_counter != null) && __isset.columns_counter)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Columns_counter);
      }
      if((Columns_serial != null) && __isset.columns_serial)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Columns_serial);
      }
      if((Flags != null) && __isset.@flags)
      {
        hashcode = (hashcode * 397) + Flags.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp289 = new StringBuilder("SpecScan(");
    int tmp290 = 0;
    if((Columns_plain != null) && __isset.columns_plain)
    {
      if(0 < tmp290++) { tmp289.Append(", "); }
      tmp289.Append("Columns_plain: ");
      Columns_plain.ToString(tmp289);
    }
    if((Columns_counter != null) && __isset.columns_counter)
    {
      if(0 < tmp290++) { tmp289.Append(", "); }
      tmp289.Append("Columns_counter: ");
      Columns_counter.ToString(tmp289);
    }
    if((Columns_serial != null) && __isset.columns_serial)
    {
      if(0 < tmp290++) { tmp289.Append(", "); }
      tmp289.Append("Columns_serial: ");
      Columns_serial.ToString(tmp289);
    }
    if((Flags != null) && __isset.@flags)
    {
      if(0 < tmp290++) { tmp289.Append(", "); }
      tmp289.Append("Flags: ");
      Flags.ToString(tmp289);
    }
    tmp289.Append(')');
    return tmp289.ToString();
  }
}

