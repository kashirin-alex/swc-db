/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.19.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


/// <summary>
/// The Column Specifications, the Cells-Intervals(SpecIntervalCounter/s) specification for a COUNTER Type column
/// </summary>
public partial class SpecColumnCounter : TBase
{
  private long _cid;
  private List<SpecIntervalCounter> _intervals;

  /// <summary>
  /// The Column ID
  /// </summary>
  public long Cid
  {
    get
    {
      return _cid;
    }
    set
    {
      __isset.@cid = true;
      this._cid = value;
    }
  }

  /// <summary>
  /// The Cells Interval in a list-container
  /// </summary>
  public List<SpecIntervalCounter> Intervals
  {
    get
    {
      return _intervals;
    }
    set
    {
      __isset.@intervals = true;
      this._intervals = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool @cid;
    public bool @intervals;
  }

  public SpecColumnCounter()
  {
  }

  public SpecColumnCounter DeepCopy()
  {
    var tmp256 = new SpecColumnCounter();
    if(__isset.@cid)
    {
      tmp256.Cid = this.Cid;
    }
    tmp256.__isset.@cid = this.__isset.@cid;
    if((Intervals != null) && __isset.@intervals)
    {
      tmp256.Intervals = this.Intervals.DeepCopy();
    }
    tmp256.__isset.@intervals = this.__isset.@intervals;
    return tmp256;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64)
            {
              Cid = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.List)
            {
              {
                var _list257 = await iprot.ReadListBeginAsync(cancellationToken);
                Intervals = new List<SpecIntervalCounter>(_list257.Count);
                for(int _i258 = 0; _i258 < _list257.Count; ++_i258)
                {
                  SpecIntervalCounter _elem259;
                  _elem259 = new SpecIntervalCounter();
                  await _elem259.ReadAsync(iprot, cancellationToken);
                  Intervals.Add(_elem259);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp260 = new TStruct("SpecColumnCounter");
      await oprot.WriteStructBeginAsync(tmp260, cancellationToken);
      var tmp261 = new TField();
      if(__isset.@cid)
      {
        tmp261.Name = "cid";
        tmp261.Type = TType.I64;
        tmp261.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp261, cancellationToken);
        await oprot.WriteI64Async(Cid, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Intervals != null) && __isset.@intervals)
      {
        tmp261.Name = "intervals";
        tmp261.Type = TType.List;
        tmp261.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp261, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.Struct, Intervals.Count), cancellationToken);
        foreach (SpecIntervalCounter _iter262 in Intervals)
        {
          await _iter262.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is SpecColumnCounter other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.@cid == other.__isset.@cid) && ((!__isset.@cid) || (global::System.Object.Equals(Cid, other.Cid))))
      && ((__isset.@intervals == other.__isset.@intervals) && ((!__isset.@intervals) || (TCollections.Equals(Intervals, other.Intervals))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.@cid)
      {
        hashcode = (hashcode * 397) + Cid.GetHashCode();
      }
      if((Intervals != null) && __isset.@intervals)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Intervals);
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp263 = new StringBuilder("SpecColumnCounter(");
    int tmp264 = 0;
    if(__isset.@cid)
    {
      if(0 < tmp264++) { tmp263.Append(", "); }
      tmp263.Append("Cid: ");
      Cid.ToString(tmp263);
    }
    if((Intervals != null) && __isset.@intervals)
    {
      if(0 < tmp264++) { tmp263.Append(", "); }
      tmp263.Append("Intervals: ");
      Intervals.ToString(tmp263);
    }
    tmp263.Append(')');
    return tmp263.ToString();
  }
}

