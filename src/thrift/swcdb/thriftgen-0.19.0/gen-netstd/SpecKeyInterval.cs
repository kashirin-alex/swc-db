/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.19.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


/// <summary>
/// The Key Interval Specifications
/// </summary>
public partial class SpecKeyInterval : TBase
{
  private List<SpecFraction> _start;
  private List<SpecFraction> _finish;

  /// <summary>
  /// The Key Start Spec, the start of cells-interval key match
  /// </summary>
  public List<SpecFraction> Start
  {
    get
    {
      return _start;
    }
    set
    {
      __isset.@start = true;
      this._start = value;
    }
  }

  /// <summary>
  /// The Key Finish Spec, the finish of cells-interval key match
  /// </summary>
  public List<SpecFraction> Finish
  {
    get
    {
      return _finish;
    }
    set
    {
      __isset.@finish = true;
      this._finish = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool @start;
    public bool @finish;
  }

  public SpecKeyInterval()
  {
  }

  public SpecKeyInterval DeepCopy()
  {
    var tmp159 = new SpecKeyInterval();
    if((Start != null) && __isset.@start)
    {
      tmp159.Start = this.Start.DeepCopy();
    }
    tmp159.__isset.@start = this.__isset.@start;
    if((Finish != null) && __isset.@finish)
    {
      tmp159.Finish = this.Finish.DeepCopy();
    }
    tmp159.__isset.@finish = this.__isset.@finish;
    return tmp159;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List)
            {
              {
                var _list160 = await iprot.ReadListBeginAsync(cancellationToken);
                Start = new List<SpecFraction>(_list160.Count);
                for(int _i161 = 0; _i161 < _list160.Count; ++_i161)
                {
                  SpecFraction _elem162;
                  _elem162 = new SpecFraction();
                  await _elem162.ReadAsync(iprot, cancellationToken);
                  Start.Add(_elem162);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.List)
            {
              {
                var _list163 = await iprot.ReadListBeginAsync(cancellationToken);
                Finish = new List<SpecFraction>(_list163.Count);
                for(int _i164 = 0; _i164 < _list163.Count; ++_i164)
                {
                  SpecFraction _elem165;
                  _elem165 = new SpecFraction();
                  await _elem165.ReadAsync(iprot, cancellationToken);
                  Finish.Add(_elem165);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp166 = new TStruct("SpecKeyInterval");
      await oprot.WriteStructBeginAsync(tmp166, cancellationToken);
      var tmp167 = new TField();
      if((Start != null) && __isset.@start)
      {
        tmp167.Name = "start";
        tmp167.Type = TType.List;
        tmp167.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp167, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.Struct, Start.Count), cancellationToken);
        foreach (SpecFraction _iter168 in Start)
        {
          await _iter168.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Finish != null) && __isset.@finish)
      {
        tmp167.Name = "finish";
        tmp167.Type = TType.List;
        tmp167.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp167, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.Struct, Finish.Count), cancellationToken);
        foreach (SpecFraction _iter169 in Finish)
        {
          await _iter169.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is SpecKeyInterval other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.@start == other.__isset.@start) && ((!__isset.@start) || (global::System.Object.Equals(Start, other.Start))))
      && ((__isset.@finish == other.__isset.@finish) && ((!__isset.@finish) || (global::System.Object.Equals(Finish, other.Finish))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((Start != null) && __isset.@start)
      {
        hashcode = (hashcode * 397) + Start.GetHashCode();
      }
      if((Finish != null) && __isset.@finish)
      {
        hashcode = (hashcode * 397) + Finish.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp170 = new StringBuilder("SpecKeyInterval(");
    int tmp171 = 0;
    if((Start != null) && __isset.@start)
    {
      if(0 < tmp171++) { tmp170.Append(", "); }
      tmp170.Append("Start: ");
      Start.ToString(tmp170);
    }
    if((Finish != null) && __isset.@finish)
    {
      if(0 < tmp171++) { tmp170.Append(", "); }
      tmp170.Append("Finish: ");
      Finish.ToString(tmp170);
    }
    tmp170.Append(')');
    return tmp170.ToString();
  }
}

