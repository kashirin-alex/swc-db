/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.19.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


/// <summary>
/// The Schema Tags patterns for the SchemaPatterns
/// </summary>
public partial class SchemaTagsPatterns : TBase
{
  private Comp _comp;
  private List<SchemaPattern> _values;

  /// <summary>
  /// Logical comparator to Apply, unsupported PF, RE and Vol. kind
  /// 
  /// <seealso cref="global::.Comp"/>
  /// </summary>
  public Comp Comp
  {
    get
    {
      return _comp;
    }
    set
    {
      __isset.@comp = true;
      this._comp = value;
    }
  }

  /// <summary>
  /// The tags patterns to match against schema's column tags
  /// </summary>
  public List<SchemaPattern> Values
  {
    get
    {
      return _values;
    }
    set
    {
      __isset.@values = true;
      this._values = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool @comp;
    public bool @values;
  }

  public SchemaTagsPatterns()
  {
  }

  public SchemaTagsPatterns DeepCopy()
  {
    var tmp19 = new SchemaTagsPatterns();
    if(__isset.@comp)
    {
      tmp19.Comp = this.Comp;
    }
    tmp19.__isset.@comp = this.__isset.@comp;
    if((Values != null) && __isset.@values)
    {
      tmp19.Values = this.Values.DeepCopy();
    }
    tmp19.__isset.@values = this.__isset.@values;
    return tmp19;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32)
            {
              Comp = (Comp)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.List)
            {
              {
                var _list20 = await iprot.ReadListBeginAsync(cancellationToken);
                Values = new List<SchemaPattern>(_list20.Count);
                for(int _i21 = 0; _i21 < _list20.Count; ++_i21)
                {
                  SchemaPattern _elem22;
                  _elem22 = new SchemaPattern();
                  await _elem22.ReadAsync(iprot, cancellationToken);
                  Values.Add(_elem22);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp23 = new TStruct("SchemaTagsPatterns");
      await oprot.WriteStructBeginAsync(tmp23, cancellationToken);
      var tmp24 = new TField();
      if(__isset.@comp)
      {
        tmp24.Name = "comp";
        tmp24.Type = TType.I32;
        tmp24.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp24, cancellationToken);
        await oprot.WriteI32Async((int)Comp, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Values != null) && __isset.@values)
      {
        tmp24.Name = "values";
        tmp24.Type = TType.List;
        tmp24.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp24, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.Struct, Values.Count), cancellationToken);
        foreach (SchemaPattern _iter25 in Values)
        {
          await _iter25.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is SchemaTagsPatterns other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.@comp == other.__isset.@comp) && ((!__isset.@comp) || (global::System.Object.Equals(Comp, other.Comp))))
      && ((__isset.@values == other.__isset.@values) && ((!__isset.@values) || (TCollections.Equals(Values, other.Values))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.@comp)
      {
        hashcode = (hashcode * 397) + Comp.GetHashCode();
      }
      if((Values != null) && __isset.@values)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Values);
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp26 = new StringBuilder("SchemaTagsPatterns(");
    int tmp27 = 0;
    if(__isset.@comp)
    {
      if(0 < tmp27++) { tmp26.Append(", "); }
      tmp26.Append("Comp: ");
      Comp.ToString(tmp26);
    }
    if((Values != null) && __isset.@values)
    {
      if(0 < tmp27++) { tmp26.Append(", "); }
      tmp26.Append("Values: ");
      Values.ToString(tmp26);
    }
    tmp26.Append(')');
    return tmp26.ToString();
  }
}

