/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.19.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


/// <summary>
/// The Value specs for an Updating Interval of 'updating' in SpecIntervalPlain
/// </summary>
public partial class SpecIntervalUpdatePlain : TBase
{
  private byte[] _v;
  private long _ts;
  private EncodingType _encoder;
  private SpecUpdateOP _update_op;

  /// <summary>
  /// The bytes value for the updated cell
  /// </summary>
  public byte[] V
  {
    get
    {
      return _v;
    }
    set
    {
      __isset.@v = true;
      this._v = value;
    }
  }

  /// <summary>
  /// The timestamp for the updated cell NULL: MIN_INT64+1, AUTO:MIN_INT64+2 (or not-set)
  /// </summary>
  public long Ts
  {
    get
    {
      return _ts;
    }
    set
    {
      __isset.@ts = true;
      this._ts = value;
    }
  }

  /// <summary>
  /// Optionally the Cell Value Encoding Type: ZLIB/SNAPPY/ZSTD
  /// 
  /// <seealso cref="global::.EncodingType"/>
  /// </summary>
  public EncodingType Encoder
  {
    get
    {
      return _encoder;
    }
    set
    {
      __isset.@encoder = true;
      this._encoder = value;
    }
  }

  /// <summary>
  /// Optionally the operaton of value update
  /// </summary>
  public SpecUpdateOP Update_op
  {
    get
    {
      return _update_op;
    }
    set
    {
      __isset.update_op = true;
      this._update_op = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool @v;
    public bool @ts;
    public bool @encoder;
    public bool update_op;
  }

  public SpecIntervalUpdatePlain()
  {
  }

  public SpecIntervalUpdatePlain DeepCopy()
  {
    var tmp60 = new SpecIntervalUpdatePlain();
    if((V != null) && __isset.@v)
    {
      tmp60.V = this.V.ToArray();
    }
    tmp60.__isset.@v = this.__isset.@v;
    if(__isset.@ts)
    {
      tmp60.Ts = this.Ts;
    }
    tmp60.__isset.@ts = this.__isset.@ts;
    if(__isset.@encoder)
    {
      tmp60.Encoder = this.Encoder;
    }
    tmp60.__isset.@encoder = this.__isset.@encoder;
    if((Update_op != null) && __isset.update_op)
    {
      tmp60.Update_op = (SpecUpdateOP)this.Update_op.DeepCopy();
    }
    tmp60.__isset.update_op = this.__isset.update_op;
    return tmp60;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              V = await iprot.ReadBinaryAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I64)
            {
              Ts = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.I32)
            {
              Encoder = (EncodingType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.Struct)
            {
              Update_op = new SpecUpdateOP();
              await Update_op.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp61 = new TStruct("SpecIntervalUpdatePlain");
      await oprot.WriteStructBeginAsync(tmp61, cancellationToken);
      var tmp62 = new TField();
      if((V != null) && __isset.@v)
      {
        tmp62.Name = "v";
        tmp62.Type = TType.String;
        tmp62.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp62, cancellationToken);
        await oprot.WriteBinaryAsync(V, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.@ts)
      {
        tmp62.Name = "ts";
        tmp62.Type = TType.I64;
        tmp62.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp62, cancellationToken);
        await oprot.WriteI64Async(Ts, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.@encoder)
      {
        tmp62.Name = "encoder";
        tmp62.Type = TType.I32;
        tmp62.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp62, cancellationToken);
        await oprot.WriteI32Async((int)Encoder, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Update_op != null) && __isset.update_op)
      {
        tmp62.Name = "update_op";
        tmp62.Type = TType.Struct;
        tmp62.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp62, cancellationToken);
        await Update_op.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is SpecIntervalUpdatePlain other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.@v == other.__isset.@v) && ((!__isset.@v) || (TCollections.Equals(V, other.V))))
      && ((__isset.@ts == other.__isset.@ts) && ((!__isset.@ts) || (global::System.Object.Equals(Ts, other.Ts))))
      && ((__isset.@encoder == other.__isset.@encoder) && ((!__isset.@encoder) || (global::System.Object.Equals(Encoder, other.Encoder))))
      && ((__isset.update_op == other.__isset.update_op) && ((!__isset.update_op) || (global::System.Object.Equals(Update_op, other.Update_op))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((V != null) && __isset.@v)
      {
        hashcode = (hashcode * 397) + V.GetHashCode();
      }
      if(__isset.@ts)
      {
        hashcode = (hashcode * 397) + Ts.GetHashCode();
      }
      if(__isset.@encoder)
      {
        hashcode = (hashcode * 397) + Encoder.GetHashCode();
      }
      if((Update_op != null) && __isset.update_op)
      {
        hashcode = (hashcode * 397) + Update_op.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp63 = new StringBuilder("SpecIntervalUpdatePlain(");
    int tmp64 = 0;
    if((V != null) && __isset.@v)
    {
      if(0 < tmp64++) { tmp63.Append(", "); }
      tmp63.Append("V: ");
      V.ToString(tmp63);
    }
    if(__isset.@ts)
    {
      if(0 < tmp64++) { tmp63.Append(", "); }
      tmp63.Append("Ts: ");
      Ts.ToString(tmp63);
    }
    if(__isset.@encoder)
    {
      if(0 < tmp64++) { tmp63.Append(", "); }
      tmp63.Append("Encoder: ");
      Encoder.ToString(tmp63);
    }
    if((Update_op != null) && __isset.update_op)
    {
      if(0 < tmp64++) { tmp63.Append(", "); }
      tmp63.Append("Update_op: ");
      Update_op.ToString(tmp63);
    }
    tmp63.Append(')');
    return tmp63.ToString();
  }
}

