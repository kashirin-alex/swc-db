/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.swcdb.thrift.gen;

/**
 * The Schema Definition
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class Schema implements org.apache.thrift.TBase<Schema, Schema._Fields>, java.io.Serializable, Cloneable, Comparable<Schema> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Schema");

  private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField COL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("col_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COL_TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("col_tags", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField COL_SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("col_seq", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField COL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("col_type", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CELL_VERSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("cell_versions", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CELL_TTL_FIELD_DESC = new org.apache.thrift.protocol.TField("cell_ttl", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField BLK_ENCODING_FIELD_DESC = new org.apache.thrift.protocol.TField("blk_encoding", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField BLK_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("blk_size", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField BLK_CELLS_FIELD_DESC = new org.apache.thrift.protocol.TField("blk_cells", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField CS_REPLICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("cs_replication", org.apache.thrift.protocol.TType.BYTE, (short)11);
  private static final org.apache.thrift.protocol.TField CS_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("cs_size", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField CS_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("cs_max", org.apache.thrift.protocol.TType.BYTE, (short)13);
  private static final org.apache.thrift.protocol.TField LOG_ROLLOUT_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("log_rollout_ratio", org.apache.thrift.protocol.TType.BYTE, (short)14);
  private static final org.apache.thrift.protocol.TField LOG_COMPACT_COINTERVALING_FIELD_DESC = new org.apache.thrift.protocol.TField("log_compact_cointervaling", org.apache.thrift.protocol.TType.BYTE, (short)15);
  private static final org.apache.thrift.protocol.TField LOG_FRAGMENT_PRELOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("log_fragment_preload", org.apache.thrift.protocol.TType.BYTE, (short)16);
  private static final org.apache.thrift.protocol.TField COMPACT_PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("compact_percent", org.apache.thrift.protocol.TType.BYTE, (short)17);
  private static final org.apache.thrift.protocol.TField REVISION_FIELD_DESC = new org.apache.thrift.protocol.TField("revision", org.apache.thrift.protocol.TType.I64, (short)18);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SchemaStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SchemaTupleSchemeFactory();

  /**
   * Column ID
   */
  public long cid; // optional
  /**
   * Column Name
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String col_name; // optional
  /**
   * Column Tags
   */
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> col_tags; // required
  /**
   * Column Key Sequence
   * 
   * @see KeySeq
   */
  public @org.apache.thrift.annotation.Nullable KeySeq col_seq; // optional
  /**
   * Column Type
   * 
   * @see ColumnType
   */
  public @org.apache.thrift.annotation.Nullable ColumnType col_type; // optional
  /**
   * Cell Versions
   */
  public int cell_versions; // optional
  /**
   * Cell Time to Live
   */
  public int cell_ttl; // optional
  /**
   * Block Encoding
   * 
   * @see EncodingType
   */
  public @org.apache.thrift.annotation.Nullable EncodingType blk_encoding; // optional
  /**
   * Block Size in Bytes
   */
  public int blk_size; // optional
  /**
   * Number of Cells in Block
   */
  public int blk_cells; // optional
  /**
   * CellStore file Replication
   */
  public byte cs_replication; // optional
  /**
   * CellStore Size in Bytes
   */
  public int cs_size; // optional
  /**
   * Max CellStores in a Range
   */
  public byte cs_max; // optional
  /**
   * Write Fragment File on ratio reached
   */
  public byte log_rollout_ratio; // optional
  /**
   * Min. Cointervaling Fragments for Compaction
   */
  public byte log_compact_cointervaling; // optional
  /**
   * Number of Fragment to Preload
   */
  public byte log_fragment_preload; // optional
  /**
   * Compact at percent reach
   */
  public byte compact_percent; // optional
  /**
   * Schema's revision/id
   */
  public long revision; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Column ID
     */
    CID((short)1, "cid"),
    /**
     * Column Name
     */
    COL_NAME((short)2, "col_name"),
    /**
     * Column Tags
     */
    COL_TAGS((short)3, "col_tags"),
    /**
     * Column Key Sequence
     * 
     * @see KeySeq
     */
    COL_SEQ((short)4, "col_seq"),
    /**
     * Column Type
     * 
     * @see ColumnType
     */
    COL_TYPE((short)5, "col_type"),
    /**
     * Cell Versions
     */
    CELL_VERSIONS((short)6, "cell_versions"),
    /**
     * Cell Time to Live
     */
    CELL_TTL((short)7, "cell_ttl"),
    /**
     * Block Encoding
     * 
     * @see EncodingType
     */
    BLK_ENCODING((short)8, "blk_encoding"),
    /**
     * Block Size in Bytes
     */
    BLK_SIZE((short)9, "blk_size"),
    /**
     * Number of Cells in Block
     */
    BLK_CELLS((short)10, "blk_cells"),
    /**
     * CellStore file Replication
     */
    CS_REPLICATION((short)11, "cs_replication"),
    /**
     * CellStore Size in Bytes
     */
    CS_SIZE((short)12, "cs_size"),
    /**
     * Max CellStores in a Range
     */
    CS_MAX((short)13, "cs_max"),
    /**
     * Write Fragment File on ratio reached
     */
    LOG_ROLLOUT_RATIO((short)14, "log_rollout_ratio"),
    /**
     * Min. Cointervaling Fragments for Compaction
     */
    LOG_COMPACT_COINTERVALING((short)15, "log_compact_cointervaling"),
    /**
     * Number of Fragment to Preload
     */
    LOG_FRAGMENT_PRELOAD((short)16, "log_fragment_preload"),
    /**
     * Compact at percent reach
     */
    COMPACT_PERCENT((short)17, "compact_percent"),
    /**
     * Schema's revision/id
     */
    REVISION((short)18, "revision");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CID
          return CID;
        case 2: // COL_NAME
          return COL_NAME;
        case 3: // COL_TAGS
          return COL_TAGS;
        case 4: // COL_SEQ
          return COL_SEQ;
        case 5: // COL_TYPE
          return COL_TYPE;
        case 6: // CELL_VERSIONS
          return CELL_VERSIONS;
        case 7: // CELL_TTL
          return CELL_TTL;
        case 8: // BLK_ENCODING
          return BLK_ENCODING;
        case 9: // BLK_SIZE
          return BLK_SIZE;
        case 10: // BLK_CELLS
          return BLK_CELLS;
        case 11: // CS_REPLICATION
          return CS_REPLICATION;
        case 12: // CS_SIZE
          return CS_SIZE;
        case 13: // CS_MAX
          return CS_MAX;
        case 14: // LOG_ROLLOUT_RATIO
          return LOG_ROLLOUT_RATIO;
        case 15: // LOG_COMPACT_COINTERVALING
          return LOG_COMPACT_COINTERVALING;
        case 16: // LOG_FRAGMENT_PRELOAD
          return LOG_FRAGMENT_PRELOAD;
        case 17: // COMPACT_PERCENT
          return COMPACT_PERCENT;
        case 18: // REVISION
          return REVISION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CID_ISSET_ID = 0;
  private static final int __CELL_VERSIONS_ISSET_ID = 1;
  private static final int __CELL_TTL_ISSET_ID = 2;
  private static final int __BLK_SIZE_ISSET_ID = 3;
  private static final int __BLK_CELLS_ISSET_ID = 4;
  private static final int __CS_REPLICATION_ISSET_ID = 5;
  private static final int __CS_SIZE_ISSET_ID = 6;
  private static final int __CS_MAX_ISSET_ID = 7;
  private static final int __LOG_ROLLOUT_RATIO_ISSET_ID = 8;
  private static final int __LOG_COMPACT_COINTERVALING_ISSET_ID = 9;
  private static final int __LOG_FRAGMENT_PRELOAD_ISSET_ID = 10;
  private static final int __COMPACT_PERCENT_ISSET_ID = 11;
  private static final int __REVISION_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CID,_Fields.COL_NAME,_Fields.COL_SEQ,_Fields.COL_TYPE,_Fields.CELL_VERSIONS,_Fields.CELL_TTL,_Fields.BLK_ENCODING,_Fields.BLK_SIZE,_Fields.BLK_CELLS,_Fields.CS_REPLICATION,_Fields.CS_SIZE,_Fields.CS_MAX,_Fields.LOG_ROLLOUT_RATIO,_Fields.LOG_COMPACT_COINTERVALING,_Fields.LOG_FRAGMENT_PRELOAD,_Fields.COMPACT_PERCENT,_Fields.REVISION};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COL_NAME, new org.apache.thrift.meta_data.FieldMetaData("col_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COL_TAGS, new org.apache.thrift.meta_data.FieldMetaData("col_tags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COL_SEQ, new org.apache.thrift.meta_data.FieldMetaData("col_seq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, KeySeq.class)));
    tmpMap.put(_Fields.COL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("col_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ColumnType.class)));
    tmpMap.put(_Fields.CELL_VERSIONS, new org.apache.thrift.meta_data.FieldMetaData("cell_versions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CELL_TTL, new org.apache.thrift.meta_data.FieldMetaData("cell_ttl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BLK_ENCODING, new org.apache.thrift.meta_data.FieldMetaData("blk_encoding", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EncodingType.class)));
    tmpMap.put(_Fields.BLK_SIZE, new org.apache.thrift.meta_data.FieldMetaData("blk_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BLK_CELLS, new org.apache.thrift.meta_data.FieldMetaData("blk_cells", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CS_REPLICATION, new org.apache.thrift.meta_data.FieldMetaData("cs_replication", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CS_SIZE, new org.apache.thrift.meta_data.FieldMetaData("cs_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CS_MAX, new org.apache.thrift.meta_data.FieldMetaData("cs_max", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.LOG_ROLLOUT_RATIO, new org.apache.thrift.meta_data.FieldMetaData("log_rollout_ratio", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.LOG_COMPACT_COINTERVALING, new org.apache.thrift.meta_data.FieldMetaData("log_compact_cointervaling", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.LOG_FRAGMENT_PRELOAD, new org.apache.thrift.meta_data.FieldMetaData("log_fragment_preload", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.COMPACT_PERCENT, new org.apache.thrift.meta_data.FieldMetaData("compact_percent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.REVISION, new org.apache.thrift.meta_data.FieldMetaData("revision", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Schema.class, metaDataMap);
  }

  public Schema() {
  }

  public Schema(
    java.util.List<java.lang.String> col_tags)
  {
    this();
    this.col_tags = col_tags;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Schema(Schema other) {
    __isset_bitfield = other.__isset_bitfield;
    this.cid = other.cid;
    if (other.isSetCol_name()) {
      this.col_name = other.col_name;
    }
    if (other.isSetCol_tags()) {
      java.util.List<java.lang.String> __this__col_tags = new java.util.ArrayList<java.lang.String>(other.col_tags);
      this.col_tags = __this__col_tags;
    }
    if (other.isSetCol_seq()) {
      this.col_seq = other.col_seq;
    }
    if (other.isSetCol_type()) {
      this.col_type = other.col_type;
    }
    this.cell_versions = other.cell_versions;
    this.cell_ttl = other.cell_ttl;
    if (other.isSetBlk_encoding()) {
      this.blk_encoding = other.blk_encoding;
    }
    this.blk_size = other.blk_size;
    this.blk_cells = other.blk_cells;
    this.cs_replication = other.cs_replication;
    this.cs_size = other.cs_size;
    this.cs_max = other.cs_max;
    this.log_rollout_ratio = other.log_rollout_ratio;
    this.log_compact_cointervaling = other.log_compact_cointervaling;
    this.log_fragment_preload = other.log_fragment_preload;
    this.compact_percent = other.compact_percent;
    this.revision = other.revision;
  }

  @Override
  public Schema deepCopy() {
    return new Schema(this);
  }

  @Override
  public void clear() {
    setCidIsSet(false);
    this.cid = 0;
    this.col_name = null;
    this.col_tags = null;
    this.col_seq = null;
    this.col_type = null;
    setCell_versionsIsSet(false);
    this.cell_versions = 0;
    setCell_ttlIsSet(false);
    this.cell_ttl = 0;
    this.blk_encoding = null;
    setBlk_sizeIsSet(false);
    this.blk_size = 0;
    setBlk_cellsIsSet(false);
    this.blk_cells = 0;
    setCs_replicationIsSet(false);
    this.cs_replication = 0;
    setCs_sizeIsSet(false);
    this.cs_size = 0;
    setCs_maxIsSet(false);
    this.cs_max = 0;
    setLog_rollout_ratioIsSet(false);
    this.log_rollout_ratio = 0;
    setLog_compact_cointervalingIsSet(false);
    this.log_compact_cointervaling = 0;
    setLog_fragment_preloadIsSet(false);
    this.log_fragment_preload = 0;
    setCompact_percentIsSet(false);
    this.compact_percent = 0;
    setRevisionIsSet(false);
    this.revision = 0;
  }

  /**
   * Column ID
   */
  public long getCid() {
    return this.cid;
  }

  /**
   * Column ID
   */
  public Schema setCid(long cid) {
    this.cid = cid;
    setCidIsSet(true);
    return this;
  }

  public void unsetCid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
  }

  /** Returns true if field cid is set (has been assigned a value) and false otherwise */
  public boolean isSetCid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
  }

  public void setCidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
  }

  /**
   * Column Name
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCol_name() {
    return this.col_name;
  }

  /**
   * Column Name
   */
  public Schema setCol_name(@org.apache.thrift.annotation.Nullable java.lang.String col_name) {
    this.col_name = col_name;
    return this;
  }

  public void unsetCol_name() {
    this.col_name = null;
  }

  /** Returns true if field col_name is set (has been assigned a value) and false otherwise */
  public boolean isSetCol_name() {
    return this.col_name != null;
  }

  public void setCol_nameIsSet(boolean value) {
    if (!value) {
      this.col_name = null;
    }
  }

  public int getCol_tagsSize() {
    return (this.col_tags == null) ? 0 : this.col_tags.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getCol_tagsIterator() {
    return (this.col_tags == null) ? null : this.col_tags.iterator();
  }

  public void addToCol_tags(java.lang.String elem) {
    if (this.col_tags == null) {
      this.col_tags = new java.util.ArrayList<java.lang.String>();
    }
    this.col_tags.add(elem);
  }

  /**
   * Column Tags
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getCol_tags() {
    return this.col_tags;
  }

  /**
   * Column Tags
   */
  public Schema setCol_tags(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> col_tags) {
    this.col_tags = col_tags;
    return this;
  }

  public void unsetCol_tags() {
    this.col_tags = null;
  }

  /** Returns true if field col_tags is set (has been assigned a value) and false otherwise */
  public boolean isSetCol_tags() {
    return this.col_tags != null;
  }

  public void setCol_tagsIsSet(boolean value) {
    if (!value) {
      this.col_tags = null;
    }
  }

  /**
   * Column Key Sequence
   * 
   * @see KeySeq
   */
  @org.apache.thrift.annotation.Nullable
  public KeySeq getCol_seq() {
    return this.col_seq;
  }

  /**
   * Column Key Sequence
   * 
   * @see KeySeq
   */
  public Schema setCol_seq(@org.apache.thrift.annotation.Nullable KeySeq col_seq) {
    this.col_seq = col_seq;
    return this;
  }

  public void unsetCol_seq() {
    this.col_seq = null;
  }

  /** Returns true if field col_seq is set (has been assigned a value) and false otherwise */
  public boolean isSetCol_seq() {
    return this.col_seq != null;
  }

  public void setCol_seqIsSet(boolean value) {
    if (!value) {
      this.col_seq = null;
    }
  }

  /**
   * Column Type
   * 
   * @see ColumnType
   */
  @org.apache.thrift.annotation.Nullable
  public ColumnType getCol_type() {
    return this.col_type;
  }

  /**
   * Column Type
   * 
   * @see ColumnType
   */
  public Schema setCol_type(@org.apache.thrift.annotation.Nullable ColumnType col_type) {
    this.col_type = col_type;
    return this;
  }

  public void unsetCol_type() {
    this.col_type = null;
  }

  /** Returns true if field col_type is set (has been assigned a value) and false otherwise */
  public boolean isSetCol_type() {
    return this.col_type != null;
  }

  public void setCol_typeIsSet(boolean value) {
    if (!value) {
      this.col_type = null;
    }
  }

  /**
   * Cell Versions
   */
  public int getCell_versions() {
    return this.cell_versions;
  }

  /**
   * Cell Versions
   */
  public Schema setCell_versions(int cell_versions) {
    this.cell_versions = cell_versions;
    setCell_versionsIsSet(true);
    return this;
  }

  public void unsetCell_versions() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CELL_VERSIONS_ISSET_ID);
  }

  /** Returns true if field cell_versions is set (has been assigned a value) and false otherwise */
  public boolean isSetCell_versions() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CELL_VERSIONS_ISSET_ID);
  }

  public void setCell_versionsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CELL_VERSIONS_ISSET_ID, value);
  }

  /**
   * Cell Time to Live
   */
  public int getCell_ttl() {
    return this.cell_ttl;
  }

  /**
   * Cell Time to Live
   */
  public Schema setCell_ttl(int cell_ttl) {
    this.cell_ttl = cell_ttl;
    setCell_ttlIsSet(true);
    return this;
  }

  public void unsetCell_ttl() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CELL_TTL_ISSET_ID);
  }

  /** Returns true if field cell_ttl is set (has been assigned a value) and false otherwise */
  public boolean isSetCell_ttl() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CELL_TTL_ISSET_ID);
  }

  public void setCell_ttlIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CELL_TTL_ISSET_ID, value);
  }

  /**
   * Block Encoding
   * 
   * @see EncodingType
   */
  @org.apache.thrift.annotation.Nullable
  public EncodingType getBlk_encoding() {
    return this.blk_encoding;
  }

  /**
   * Block Encoding
   * 
   * @see EncodingType
   */
  public Schema setBlk_encoding(@org.apache.thrift.annotation.Nullable EncodingType blk_encoding) {
    this.blk_encoding = blk_encoding;
    return this;
  }

  public void unsetBlk_encoding() {
    this.blk_encoding = null;
  }

  /** Returns true if field blk_encoding is set (has been assigned a value) and false otherwise */
  public boolean isSetBlk_encoding() {
    return this.blk_encoding != null;
  }

  public void setBlk_encodingIsSet(boolean value) {
    if (!value) {
      this.blk_encoding = null;
    }
  }

  /**
   * Block Size in Bytes
   */
  public int getBlk_size() {
    return this.blk_size;
  }

  /**
   * Block Size in Bytes
   */
  public Schema setBlk_size(int blk_size) {
    this.blk_size = blk_size;
    setBlk_sizeIsSet(true);
    return this;
  }

  public void unsetBlk_size() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BLK_SIZE_ISSET_ID);
  }

  /** Returns true if field blk_size is set (has been assigned a value) and false otherwise */
  public boolean isSetBlk_size() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BLK_SIZE_ISSET_ID);
  }

  public void setBlk_sizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BLK_SIZE_ISSET_ID, value);
  }

  /**
   * Number of Cells in Block
   */
  public int getBlk_cells() {
    return this.blk_cells;
  }

  /**
   * Number of Cells in Block
   */
  public Schema setBlk_cells(int blk_cells) {
    this.blk_cells = blk_cells;
    setBlk_cellsIsSet(true);
    return this;
  }

  public void unsetBlk_cells() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BLK_CELLS_ISSET_ID);
  }

  /** Returns true if field blk_cells is set (has been assigned a value) and false otherwise */
  public boolean isSetBlk_cells() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BLK_CELLS_ISSET_ID);
  }

  public void setBlk_cellsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BLK_CELLS_ISSET_ID, value);
  }

  /**
   * CellStore file Replication
   */
  public byte getCs_replication() {
    return this.cs_replication;
  }

  /**
   * CellStore file Replication
   */
  public Schema setCs_replication(byte cs_replication) {
    this.cs_replication = cs_replication;
    setCs_replicationIsSet(true);
    return this;
  }

  public void unsetCs_replication() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CS_REPLICATION_ISSET_ID);
  }

  /** Returns true if field cs_replication is set (has been assigned a value) and false otherwise */
  public boolean isSetCs_replication() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CS_REPLICATION_ISSET_ID);
  }

  public void setCs_replicationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CS_REPLICATION_ISSET_ID, value);
  }

  /**
   * CellStore Size in Bytes
   */
  public int getCs_size() {
    return this.cs_size;
  }

  /**
   * CellStore Size in Bytes
   */
  public Schema setCs_size(int cs_size) {
    this.cs_size = cs_size;
    setCs_sizeIsSet(true);
    return this;
  }

  public void unsetCs_size() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CS_SIZE_ISSET_ID);
  }

  /** Returns true if field cs_size is set (has been assigned a value) and false otherwise */
  public boolean isSetCs_size() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CS_SIZE_ISSET_ID);
  }

  public void setCs_sizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CS_SIZE_ISSET_ID, value);
  }

  /**
   * Max CellStores in a Range
   */
  public byte getCs_max() {
    return this.cs_max;
  }

  /**
   * Max CellStores in a Range
   */
  public Schema setCs_max(byte cs_max) {
    this.cs_max = cs_max;
    setCs_maxIsSet(true);
    return this;
  }

  public void unsetCs_max() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CS_MAX_ISSET_ID);
  }

  /** Returns true if field cs_max is set (has been assigned a value) and false otherwise */
  public boolean isSetCs_max() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CS_MAX_ISSET_ID);
  }

  public void setCs_maxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CS_MAX_ISSET_ID, value);
  }

  /**
   * Write Fragment File on ratio reached
   */
  public byte getLog_rollout_ratio() {
    return this.log_rollout_ratio;
  }

  /**
   * Write Fragment File on ratio reached
   */
  public Schema setLog_rollout_ratio(byte log_rollout_ratio) {
    this.log_rollout_ratio = log_rollout_ratio;
    setLog_rollout_ratioIsSet(true);
    return this;
  }

  public void unsetLog_rollout_ratio() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOG_ROLLOUT_RATIO_ISSET_ID);
  }

  /** Returns true if field log_rollout_ratio is set (has been assigned a value) and false otherwise */
  public boolean isSetLog_rollout_ratio() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOG_ROLLOUT_RATIO_ISSET_ID);
  }

  public void setLog_rollout_ratioIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOG_ROLLOUT_RATIO_ISSET_ID, value);
  }

  /**
   * Min. Cointervaling Fragments for Compaction
   */
  public byte getLog_compact_cointervaling() {
    return this.log_compact_cointervaling;
  }

  /**
   * Min. Cointervaling Fragments for Compaction
   */
  public Schema setLog_compact_cointervaling(byte log_compact_cointervaling) {
    this.log_compact_cointervaling = log_compact_cointervaling;
    setLog_compact_cointervalingIsSet(true);
    return this;
  }

  public void unsetLog_compact_cointervaling() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOG_COMPACT_COINTERVALING_ISSET_ID);
  }

  /** Returns true if field log_compact_cointervaling is set (has been assigned a value) and false otherwise */
  public boolean isSetLog_compact_cointervaling() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOG_COMPACT_COINTERVALING_ISSET_ID);
  }

  public void setLog_compact_cointervalingIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOG_COMPACT_COINTERVALING_ISSET_ID, value);
  }

  /**
   * Number of Fragment to Preload
   */
  public byte getLog_fragment_preload() {
    return this.log_fragment_preload;
  }

  /**
   * Number of Fragment to Preload
   */
  public Schema setLog_fragment_preload(byte log_fragment_preload) {
    this.log_fragment_preload = log_fragment_preload;
    setLog_fragment_preloadIsSet(true);
    return this;
  }

  public void unsetLog_fragment_preload() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOG_FRAGMENT_PRELOAD_ISSET_ID);
  }

  /** Returns true if field log_fragment_preload is set (has been assigned a value) and false otherwise */
  public boolean isSetLog_fragment_preload() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOG_FRAGMENT_PRELOAD_ISSET_ID);
  }

  public void setLog_fragment_preloadIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOG_FRAGMENT_PRELOAD_ISSET_ID, value);
  }

  /**
   * Compact at percent reach
   */
  public byte getCompact_percent() {
    return this.compact_percent;
  }

  /**
   * Compact at percent reach
   */
  public Schema setCompact_percent(byte compact_percent) {
    this.compact_percent = compact_percent;
    setCompact_percentIsSet(true);
    return this;
  }

  public void unsetCompact_percent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPACT_PERCENT_ISSET_ID);
  }

  /** Returns true if field compact_percent is set (has been assigned a value) and false otherwise */
  public boolean isSetCompact_percent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPACT_PERCENT_ISSET_ID);
  }

  public void setCompact_percentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPACT_PERCENT_ISSET_ID, value);
  }

  /**
   * Schema's revision/id
   */
  public long getRevision() {
    return this.revision;
  }

  /**
   * Schema's revision/id
   */
  public Schema setRevision(long revision) {
    this.revision = revision;
    setRevisionIsSet(true);
    return this;
  }

  public void unsetRevision() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REVISION_ISSET_ID);
  }

  /** Returns true if field revision is set (has been assigned a value) and false otherwise */
  public boolean isSetRevision() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REVISION_ISSET_ID);
  }

  public void setRevisionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REVISION_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CID:
      if (value == null) {
        unsetCid();
      } else {
        setCid((java.lang.Long)value);
      }
      break;

    case COL_NAME:
      if (value == null) {
        unsetCol_name();
      } else {
        setCol_name((java.lang.String)value);
      }
      break;

    case COL_TAGS:
      if (value == null) {
        unsetCol_tags();
      } else {
        setCol_tags((java.util.List<java.lang.String>)value);
      }
      break;

    case COL_SEQ:
      if (value == null) {
        unsetCol_seq();
      } else {
        setCol_seq((KeySeq)value);
      }
      break;

    case COL_TYPE:
      if (value == null) {
        unsetCol_type();
      } else {
        setCol_type((ColumnType)value);
      }
      break;

    case CELL_VERSIONS:
      if (value == null) {
        unsetCell_versions();
      } else {
        setCell_versions((java.lang.Integer)value);
      }
      break;

    case CELL_TTL:
      if (value == null) {
        unsetCell_ttl();
      } else {
        setCell_ttl((java.lang.Integer)value);
      }
      break;

    case BLK_ENCODING:
      if (value == null) {
        unsetBlk_encoding();
      } else {
        setBlk_encoding((EncodingType)value);
      }
      break;

    case BLK_SIZE:
      if (value == null) {
        unsetBlk_size();
      } else {
        setBlk_size((java.lang.Integer)value);
      }
      break;

    case BLK_CELLS:
      if (value == null) {
        unsetBlk_cells();
      } else {
        setBlk_cells((java.lang.Integer)value);
      }
      break;

    case CS_REPLICATION:
      if (value == null) {
        unsetCs_replication();
      } else {
        setCs_replication((java.lang.Byte)value);
      }
      break;

    case CS_SIZE:
      if (value == null) {
        unsetCs_size();
      } else {
        setCs_size((java.lang.Integer)value);
      }
      break;

    case CS_MAX:
      if (value == null) {
        unsetCs_max();
      } else {
        setCs_max((java.lang.Byte)value);
      }
      break;

    case LOG_ROLLOUT_RATIO:
      if (value == null) {
        unsetLog_rollout_ratio();
      } else {
        setLog_rollout_ratio((java.lang.Byte)value);
      }
      break;

    case LOG_COMPACT_COINTERVALING:
      if (value == null) {
        unsetLog_compact_cointervaling();
      } else {
        setLog_compact_cointervaling((java.lang.Byte)value);
      }
      break;

    case LOG_FRAGMENT_PRELOAD:
      if (value == null) {
        unsetLog_fragment_preload();
      } else {
        setLog_fragment_preload((java.lang.Byte)value);
      }
      break;

    case COMPACT_PERCENT:
      if (value == null) {
        unsetCompact_percent();
      } else {
        setCompact_percent((java.lang.Byte)value);
      }
      break;

    case REVISION:
      if (value == null) {
        unsetRevision();
      } else {
        setRevision((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CID:
      return getCid();

    case COL_NAME:
      return getCol_name();

    case COL_TAGS:
      return getCol_tags();

    case COL_SEQ:
      return getCol_seq();

    case COL_TYPE:
      return getCol_type();

    case CELL_VERSIONS:
      return getCell_versions();

    case CELL_TTL:
      return getCell_ttl();

    case BLK_ENCODING:
      return getBlk_encoding();

    case BLK_SIZE:
      return getBlk_size();

    case BLK_CELLS:
      return getBlk_cells();

    case CS_REPLICATION:
      return getCs_replication();

    case CS_SIZE:
      return getCs_size();

    case CS_MAX:
      return getCs_max();

    case LOG_ROLLOUT_RATIO:
      return getLog_rollout_ratio();

    case LOG_COMPACT_COINTERVALING:
      return getLog_compact_cointervaling();

    case LOG_FRAGMENT_PRELOAD:
      return getLog_fragment_preload();

    case COMPACT_PERCENT:
      return getCompact_percent();

    case REVISION:
      return getRevision();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CID:
      return isSetCid();
    case COL_NAME:
      return isSetCol_name();
    case COL_TAGS:
      return isSetCol_tags();
    case COL_SEQ:
      return isSetCol_seq();
    case COL_TYPE:
      return isSetCol_type();
    case CELL_VERSIONS:
      return isSetCell_versions();
    case CELL_TTL:
      return isSetCell_ttl();
    case BLK_ENCODING:
      return isSetBlk_encoding();
    case BLK_SIZE:
      return isSetBlk_size();
    case BLK_CELLS:
      return isSetBlk_cells();
    case CS_REPLICATION:
      return isSetCs_replication();
    case CS_SIZE:
      return isSetCs_size();
    case CS_MAX:
      return isSetCs_max();
    case LOG_ROLLOUT_RATIO:
      return isSetLog_rollout_ratio();
    case LOG_COMPACT_COINTERVALING:
      return isSetLog_compact_cointervaling();
    case LOG_FRAGMENT_PRELOAD:
      return isSetLog_fragment_preload();
    case COMPACT_PERCENT:
      return isSetCompact_percent();
    case REVISION:
      return isSetRevision();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Schema)
      return this.equals((Schema)that);
    return false;
  }

  public boolean equals(Schema that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_cid = true && this.isSetCid();
    boolean that_present_cid = true && that.isSetCid();
    if (this_present_cid || that_present_cid) {
      if (!(this_present_cid && that_present_cid))
        return false;
      if (this.cid != that.cid)
        return false;
    }

    boolean this_present_col_name = true && this.isSetCol_name();
    boolean that_present_col_name = true && that.isSetCol_name();
    if (this_present_col_name || that_present_col_name) {
      if (!(this_present_col_name && that_present_col_name))
        return false;
      if (!this.col_name.equals(that.col_name))
        return false;
    }

    boolean this_present_col_tags = true && this.isSetCol_tags();
    boolean that_present_col_tags = true && that.isSetCol_tags();
    if (this_present_col_tags || that_present_col_tags) {
      if (!(this_present_col_tags && that_present_col_tags))
        return false;
      if (!this.col_tags.equals(that.col_tags))
        return false;
    }

    boolean this_present_col_seq = true && this.isSetCol_seq();
    boolean that_present_col_seq = true && that.isSetCol_seq();
    if (this_present_col_seq || that_present_col_seq) {
      if (!(this_present_col_seq && that_present_col_seq))
        return false;
      if (!this.col_seq.equals(that.col_seq))
        return false;
    }

    boolean this_present_col_type = true && this.isSetCol_type();
    boolean that_present_col_type = true && that.isSetCol_type();
    if (this_present_col_type || that_present_col_type) {
      if (!(this_present_col_type && that_present_col_type))
        return false;
      if (!this.col_type.equals(that.col_type))
        return false;
    }

    boolean this_present_cell_versions = true && this.isSetCell_versions();
    boolean that_present_cell_versions = true && that.isSetCell_versions();
    if (this_present_cell_versions || that_present_cell_versions) {
      if (!(this_present_cell_versions && that_present_cell_versions))
        return false;
      if (this.cell_versions != that.cell_versions)
        return false;
    }

    boolean this_present_cell_ttl = true && this.isSetCell_ttl();
    boolean that_present_cell_ttl = true && that.isSetCell_ttl();
    if (this_present_cell_ttl || that_present_cell_ttl) {
      if (!(this_present_cell_ttl && that_present_cell_ttl))
        return false;
      if (this.cell_ttl != that.cell_ttl)
        return false;
    }

    boolean this_present_blk_encoding = true && this.isSetBlk_encoding();
    boolean that_present_blk_encoding = true && that.isSetBlk_encoding();
    if (this_present_blk_encoding || that_present_blk_encoding) {
      if (!(this_present_blk_encoding && that_present_blk_encoding))
        return false;
      if (!this.blk_encoding.equals(that.blk_encoding))
        return false;
    }

    boolean this_present_blk_size = true && this.isSetBlk_size();
    boolean that_present_blk_size = true && that.isSetBlk_size();
    if (this_present_blk_size || that_present_blk_size) {
      if (!(this_present_blk_size && that_present_blk_size))
        return false;
      if (this.blk_size != that.blk_size)
        return false;
    }

    boolean this_present_blk_cells = true && this.isSetBlk_cells();
    boolean that_present_blk_cells = true && that.isSetBlk_cells();
    if (this_present_blk_cells || that_present_blk_cells) {
      if (!(this_present_blk_cells && that_present_blk_cells))
        return false;
      if (this.blk_cells != that.blk_cells)
        return false;
    }

    boolean this_present_cs_replication = true && this.isSetCs_replication();
    boolean that_present_cs_replication = true && that.isSetCs_replication();
    if (this_present_cs_replication || that_present_cs_replication) {
      if (!(this_present_cs_replication && that_present_cs_replication))
        return false;
      if (this.cs_replication != that.cs_replication)
        return false;
    }

    boolean this_present_cs_size = true && this.isSetCs_size();
    boolean that_present_cs_size = true && that.isSetCs_size();
    if (this_present_cs_size || that_present_cs_size) {
      if (!(this_present_cs_size && that_present_cs_size))
        return false;
      if (this.cs_size != that.cs_size)
        return false;
    }

    boolean this_present_cs_max = true && this.isSetCs_max();
    boolean that_present_cs_max = true && that.isSetCs_max();
    if (this_present_cs_max || that_present_cs_max) {
      if (!(this_present_cs_max && that_present_cs_max))
        return false;
      if (this.cs_max != that.cs_max)
        return false;
    }

    boolean this_present_log_rollout_ratio = true && this.isSetLog_rollout_ratio();
    boolean that_present_log_rollout_ratio = true && that.isSetLog_rollout_ratio();
    if (this_present_log_rollout_ratio || that_present_log_rollout_ratio) {
      if (!(this_present_log_rollout_ratio && that_present_log_rollout_ratio))
        return false;
      if (this.log_rollout_ratio != that.log_rollout_ratio)
        return false;
    }

    boolean this_present_log_compact_cointervaling = true && this.isSetLog_compact_cointervaling();
    boolean that_present_log_compact_cointervaling = true && that.isSetLog_compact_cointervaling();
    if (this_present_log_compact_cointervaling || that_present_log_compact_cointervaling) {
      if (!(this_present_log_compact_cointervaling && that_present_log_compact_cointervaling))
        return false;
      if (this.log_compact_cointervaling != that.log_compact_cointervaling)
        return false;
    }

    boolean this_present_log_fragment_preload = true && this.isSetLog_fragment_preload();
    boolean that_present_log_fragment_preload = true && that.isSetLog_fragment_preload();
    if (this_present_log_fragment_preload || that_present_log_fragment_preload) {
      if (!(this_present_log_fragment_preload && that_present_log_fragment_preload))
        return false;
      if (this.log_fragment_preload != that.log_fragment_preload)
        return false;
    }

    boolean this_present_compact_percent = true && this.isSetCompact_percent();
    boolean that_present_compact_percent = true && that.isSetCompact_percent();
    if (this_present_compact_percent || that_present_compact_percent) {
      if (!(this_present_compact_percent && that_present_compact_percent))
        return false;
      if (this.compact_percent != that.compact_percent)
        return false;
    }

    boolean this_present_revision = true && this.isSetRevision();
    boolean that_present_revision = true && that.isSetRevision();
    if (this_present_revision || that_present_revision) {
      if (!(this_present_revision && that_present_revision))
        return false;
      if (this.revision != that.revision)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCid()) ? 131071 : 524287);
    if (isSetCid())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cid);

    hashCode = hashCode * 8191 + ((isSetCol_name()) ? 131071 : 524287);
    if (isSetCol_name())
      hashCode = hashCode * 8191 + col_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetCol_tags()) ? 131071 : 524287);
    if (isSetCol_tags())
      hashCode = hashCode * 8191 + col_tags.hashCode();

    hashCode = hashCode * 8191 + ((isSetCol_seq()) ? 131071 : 524287);
    if (isSetCol_seq())
      hashCode = hashCode * 8191 + col_seq.getValue();

    hashCode = hashCode * 8191 + ((isSetCol_type()) ? 131071 : 524287);
    if (isSetCol_type())
      hashCode = hashCode * 8191 + col_type.getValue();

    hashCode = hashCode * 8191 + ((isSetCell_versions()) ? 131071 : 524287);
    if (isSetCell_versions())
      hashCode = hashCode * 8191 + cell_versions;

    hashCode = hashCode * 8191 + ((isSetCell_ttl()) ? 131071 : 524287);
    if (isSetCell_ttl())
      hashCode = hashCode * 8191 + cell_ttl;

    hashCode = hashCode * 8191 + ((isSetBlk_encoding()) ? 131071 : 524287);
    if (isSetBlk_encoding())
      hashCode = hashCode * 8191 + blk_encoding.getValue();

    hashCode = hashCode * 8191 + ((isSetBlk_size()) ? 131071 : 524287);
    if (isSetBlk_size())
      hashCode = hashCode * 8191 + blk_size;

    hashCode = hashCode * 8191 + ((isSetBlk_cells()) ? 131071 : 524287);
    if (isSetBlk_cells())
      hashCode = hashCode * 8191 + blk_cells;

    hashCode = hashCode * 8191 + ((isSetCs_replication()) ? 131071 : 524287);
    if (isSetCs_replication())
      hashCode = hashCode * 8191 + (int) (cs_replication);

    hashCode = hashCode * 8191 + ((isSetCs_size()) ? 131071 : 524287);
    if (isSetCs_size())
      hashCode = hashCode * 8191 + cs_size;

    hashCode = hashCode * 8191 + ((isSetCs_max()) ? 131071 : 524287);
    if (isSetCs_max())
      hashCode = hashCode * 8191 + (int) (cs_max);

    hashCode = hashCode * 8191 + ((isSetLog_rollout_ratio()) ? 131071 : 524287);
    if (isSetLog_rollout_ratio())
      hashCode = hashCode * 8191 + (int) (log_rollout_ratio);

    hashCode = hashCode * 8191 + ((isSetLog_compact_cointervaling()) ? 131071 : 524287);
    if (isSetLog_compact_cointervaling())
      hashCode = hashCode * 8191 + (int) (log_compact_cointervaling);

    hashCode = hashCode * 8191 + ((isSetLog_fragment_preload()) ? 131071 : 524287);
    if (isSetLog_fragment_preload())
      hashCode = hashCode * 8191 + (int) (log_fragment_preload);

    hashCode = hashCode * 8191 + ((isSetCompact_percent()) ? 131071 : 524287);
    if (isSetCompact_percent())
      hashCode = hashCode * 8191 + (int) (compact_percent);

    hashCode = hashCode * 8191 + ((isSetRevision()) ? 131071 : 524287);
    if (isSetRevision())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(revision);

    return hashCode;
  }

  @Override
  public int compareTo(Schema other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetCid(), other.isSetCid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCol_name(), other.isSetCol_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCol_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.col_name, other.col_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCol_tags(), other.isSetCol_tags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCol_tags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.col_tags, other.col_tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCol_seq(), other.isSetCol_seq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCol_seq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.col_seq, other.col_seq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCol_type(), other.isSetCol_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCol_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.col_type, other.col_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCell_versions(), other.isSetCell_versions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCell_versions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cell_versions, other.cell_versions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCell_ttl(), other.isSetCell_ttl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCell_ttl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cell_ttl, other.cell_ttl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBlk_encoding(), other.isSetBlk_encoding());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlk_encoding()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blk_encoding, other.blk_encoding);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBlk_size(), other.isSetBlk_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlk_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blk_size, other.blk_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBlk_cells(), other.isSetBlk_cells());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlk_cells()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blk_cells, other.blk_cells);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCs_replication(), other.isSetCs_replication());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCs_replication()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cs_replication, other.cs_replication);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCs_size(), other.isSetCs_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCs_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cs_size, other.cs_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCs_max(), other.isSetCs_max());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCs_max()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cs_max, other.cs_max);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLog_rollout_ratio(), other.isSetLog_rollout_ratio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLog_rollout_ratio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log_rollout_ratio, other.log_rollout_ratio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLog_compact_cointervaling(), other.isSetLog_compact_cointervaling());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLog_compact_cointervaling()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log_compact_cointervaling, other.log_compact_cointervaling);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLog_fragment_preload(), other.isSetLog_fragment_preload());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLog_fragment_preload()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log_fragment_preload, other.log_fragment_preload);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCompact_percent(), other.isSetCompact_percent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompact_percent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compact_percent, other.compact_percent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRevision(), other.isSetRevision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRevision()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.revision, other.revision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Schema(");
    boolean first = true;

    if (isSetCid()) {
      sb.append("cid:");
      sb.append(this.cid);
      first = false;
    }
    if (isSetCol_name()) {
      if (!first) sb.append(", ");
      sb.append("col_name:");
      if (this.col_name == null) {
        sb.append("null");
      } else {
        sb.append(this.col_name);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("col_tags:");
    if (this.col_tags == null) {
      sb.append("null");
    } else {
      sb.append(this.col_tags);
    }
    first = false;
    if (isSetCol_seq()) {
      if (!first) sb.append(", ");
      sb.append("col_seq:");
      if (this.col_seq == null) {
        sb.append("null");
      } else {
        sb.append(this.col_seq);
      }
      first = false;
    }
    if (isSetCol_type()) {
      if (!first) sb.append(", ");
      sb.append("col_type:");
      if (this.col_type == null) {
        sb.append("null");
      } else {
        sb.append(this.col_type);
      }
      first = false;
    }
    if (isSetCell_versions()) {
      if (!first) sb.append(", ");
      sb.append("cell_versions:");
      sb.append(this.cell_versions);
      first = false;
    }
    if (isSetCell_ttl()) {
      if (!first) sb.append(", ");
      sb.append("cell_ttl:");
      sb.append(this.cell_ttl);
      first = false;
    }
    if (isSetBlk_encoding()) {
      if (!first) sb.append(", ");
      sb.append("blk_encoding:");
      if (this.blk_encoding == null) {
        sb.append("null");
      } else {
        sb.append(this.blk_encoding);
      }
      first = false;
    }
    if (isSetBlk_size()) {
      if (!first) sb.append(", ");
      sb.append("blk_size:");
      sb.append(this.blk_size);
      first = false;
    }
    if (isSetBlk_cells()) {
      if (!first) sb.append(", ");
      sb.append("blk_cells:");
      sb.append(this.blk_cells);
      first = false;
    }
    if (isSetCs_replication()) {
      if (!first) sb.append(", ");
      sb.append("cs_replication:");
      sb.append(this.cs_replication);
      first = false;
    }
    if (isSetCs_size()) {
      if (!first) sb.append(", ");
      sb.append("cs_size:");
      sb.append(this.cs_size);
      first = false;
    }
    if (isSetCs_max()) {
      if (!first) sb.append(", ");
      sb.append("cs_max:");
      sb.append(this.cs_max);
      first = false;
    }
    if (isSetLog_rollout_ratio()) {
      if (!first) sb.append(", ");
      sb.append("log_rollout_ratio:");
      sb.append(this.log_rollout_ratio);
      first = false;
    }
    if (isSetLog_compact_cointervaling()) {
      if (!first) sb.append(", ");
      sb.append("log_compact_cointervaling:");
      sb.append(this.log_compact_cointervaling);
      first = false;
    }
    if (isSetLog_fragment_preload()) {
      if (!first) sb.append(", ");
      sb.append("log_fragment_preload:");
      sb.append(this.log_fragment_preload);
      first = false;
    }
    if (isSetCompact_percent()) {
      if (!first) sb.append(", ");
      sb.append("compact_percent:");
      sb.append(this.compact_percent);
      first = false;
    }
    if (isSetRevision()) {
      if (!first) sb.append(", ");
      sb.append("revision:");
      sb.append(this.revision);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SchemaStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SchemaStandardScheme getScheme() {
      return new SchemaStandardScheme();
    }
  }

  private static class SchemaStandardScheme extends org.apache.thrift.scheme.StandardScheme<Schema> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, Schema struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cid = iprot.readI64();
              struct.setCidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.col_name = iprot.readString();
              struct.setCol_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COL_TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.col_tags = new java.util.ArrayList<java.lang.String>(_list0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.col_tags.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setCol_tagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COL_SEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.col_seq = org.swcdb.thrift.gen.KeySeq.findByValue(iprot.readI32());
              struct.setCol_seqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.col_type = org.swcdb.thrift.gen.ColumnType.findByValue(iprot.readI32());
              struct.setCol_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CELL_VERSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cell_versions = iprot.readI32();
              struct.setCell_versionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CELL_TTL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cell_ttl = iprot.readI32();
              struct.setCell_ttlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BLK_ENCODING
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.blk_encoding = org.swcdb.thrift.gen.EncodingType.findByValue(iprot.readI32());
              struct.setBlk_encodingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BLK_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.blk_size = iprot.readI32();
              struct.setBlk_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BLK_CELLS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.blk_cells = iprot.readI32();
              struct.setBlk_cellsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CS_REPLICATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.cs_replication = iprot.readByte();
              struct.setCs_replicationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CS_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cs_size = iprot.readI32();
              struct.setCs_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CS_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.cs_max = iprot.readByte();
              struct.setCs_maxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LOG_ROLLOUT_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.log_rollout_ratio = iprot.readByte();
              struct.setLog_rollout_ratioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LOG_COMPACT_COINTERVALING
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.log_compact_cointervaling = iprot.readByte();
              struct.setLog_compact_cointervalingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LOG_FRAGMENT_PRELOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.log_fragment_preload = iprot.readByte();
              struct.setLog_fragment_preloadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // COMPACT_PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.compact_percent = iprot.readByte();
              struct.setCompact_percentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // REVISION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.revision = iprot.readI64();
              struct.setRevisionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, Schema struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetCid()) {
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI64(struct.cid);
        oprot.writeFieldEnd();
      }
      if (struct.col_name != null) {
        if (struct.isSetCol_name()) {
          oprot.writeFieldBegin(COL_NAME_FIELD_DESC);
          oprot.writeString(struct.col_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.col_tags != null) {
        oprot.writeFieldBegin(COL_TAGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.col_tags.size()));
          for (java.lang.String _iter3 : struct.col_tags)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.col_seq != null) {
        if (struct.isSetCol_seq()) {
          oprot.writeFieldBegin(COL_SEQ_FIELD_DESC);
          oprot.writeI32(struct.col_seq.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.col_type != null) {
        if (struct.isSetCol_type()) {
          oprot.writeFieldBegin(COL_TYPE_FIELD_DESC);
          oprot.writeI32(struct.col_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCell_versions()) {
        oprot.writeFieldBegin(CELL_VERSIONS_FIELD_DESC);
        oprot.writeI32(struct.cell_versions);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCell_ttl()) {
        oprot.writeFieldBegin(CELL_TTL_FIELD_DESC);
        oprot.writeI32(struct.cell_ttl);
        oprot.writeFieldEnd();
      }
      if (struct.blk_encoding != null) {
        if (struct.isSetBlk_encoding()) {
          oprot.writeFieldBegin(BLK_ENCODING_FIELD_DESC);
          oprot.writeI32(struct.blk_encoding.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBlk_size()) {
        oprot.writeFieldBegin(BLK_SIZE_FIELD_DESC);
        oprot.writeI32(struct.blk_size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBlk_cells()) {
        oprot.writeFieldBegin(BLK_CELLS_FIELD_DESC);
        oprot.writeI32(struct.blk_cells);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCs_replication()) {
        oprot.writeFieldBegin(CS_REPLICATION_FIELD_DESC);
        oprot.writeByte(struct.cs_replication);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCs_size()) {
        oprot.writeFieldBegin(CS_SIZE_FIELD_DESC);
        oprot.writeI32(struct.cs_size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCs_max()) {
        oprot.writeFieldBegin(CS_MAX_FIELD_DESC);
        oprot.writeByte(struct.cs_max);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLog_rollout_ratio()) {
        oprot.writeFieldBegin(LOG_ROLLOUT_RATIO_FIELD_DESC);
        oprot.writeByte(struct.log_rollout_ratio);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLog_compact_cointervaling()) {
        oprot.writeFieldBegin(LOG_COMPACT_COINTERVALING_FIELD_DESC);
        oprot.writeByte(struct.log_compact_cointervaling);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLog_fragment_preload()) {
        oprot.writeFieldBegin(LOG_FRAGMENT_PRELOAD_FIELD_DESC);
        oprot.writeByte(struct.log_fragment_preload);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompact_percent()) {
        oprot.writeFieldBegin(COMPACT_PERCENT_FIELD_DESC);
        oprot.writeByte(struct.compact_percent);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRevision()) {
        oprot.writeFieldBegin(REVISION_FIELD_DESC);
        oprot.writeI64(struct.revision);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SchemaTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SchemaTupleScheme getScheme() {
      return new SchemaTupleScheme();
    }
  }

  private static class SchemaTupleScheme extends org.apache.thrift.scheme.TupleScheme<Schema> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Schema struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCid()) {
        optionals.set(0);
      }
      if (struct.isSetCol_name()) {
        optionals.set(1);
      }
      if (struct.isSetCol_tags()) {
        optionals.set(2);
      }
      if (struct.isSetCol_seq()) {
        optionals.set(3);
      }
      if (struct.isSetCol_type()) {
        optionals.set(4);
      }
      if (struct.isSetCell_versions()) {
        optionals.set(5);
      }
      if (struct.isSetCell_ttl()) {
        optionals.set(6);
      }
      if (struct.isSetBlk_encoding()) {
        optionals.set(7);
      }
      if (struct.isSetBlk_size()) {
        optionals.set(8);
      }
      if (struct.isSetBlk_cells()) {
        optionals.set(9);
      }
      if (struct.isSetCs_replication()) {
        optionals.set(10);
      }
      if (struct.isSetCs_size()) {
        optionals.set(11);
      }
      if (struct.isSetCs_max()) {
        optionals.set(12);
      }
      if (struct.isSetLog_rollout_ratio()) {
        optionals.set(13);
      }
      if (struct.isSetLog_compact_cointervaling()) {
        optionals.set(14);
      }
      if (struct.isSetLog_fragment_preload()) {
        optionals.set(15);
      }
      if (struct.isSetCompact_percent()) {
        optionals.set(16);
      }
      if (struct.isSetRevision()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetCid()) {
        oprot.writeI64(struct.cid);
      }
      if (struct.isSetCol_name()) {
        oprot.writeString(struct.col_name);
      }
      if (struct.isSetCol_tags()) {
        {
          oprot.writeI32(struct.col_tags.size());
          for (java.lang.String _iter4 : struct.col_tags)
          {
            oprot.writeString(_iter4);
          }
        }
      }
      if (struct.isSetCol_seq()) {
        oprot.writeI32(struct.col_seq.getValue());
      }
      if (struct.isSetCol_type()) {
        oprot.writeI32(struct.col_type.getValue());
      }
      if (struct.isSetCell_versions()) {
        oprot.writeI32(struct.cell_versions);
      }
      if (struct.isSetCell_ttl()) {
        oprot.writeI32(struct.cell_ttl);
      }
      if (struct.isSetBlk_encoding()) {
        oprot.writeI32(struct.blk_encoding.getValue());
      }
      if (struct.isSetBlk_size()) {
        oprot.writeI32(struct.blk_size);
      }
      if (struct.isSetBlk_cells()) {
        oprot.writeI32(struct.blk_cells);
      }
      if (struct.isSetCs_replication()) {
        oprot.writeByte(struct.cs_replication);
      }
      if (struct.isSetCs_size()) {
        oprot.writeI32(struct.cs_size);
      }
      if (struct.isSetCs_max()) {
        oprot.writeByte(struct.cs_max);
      }
      if (struct.isSetLog_rollout_ratio()) {
        oprot.writeByte(struct.log_rollout_ratio);
      }
      if (struct.isSetLog_compact_cointervaling()) {
        oprot.writeByte(struct.log_compact_cointervaling);
      }
      if (struct.isSetLog_fragment_preload()) {
        oprot.writeByte(struct.log_fragment_preload);
      }
      if (struct.isSetCompact_percent()) {
        oprot.writeByte(struct.compact_percent);
      }
      if (struct.isSetRevision()) {
        oprot.writeI64(struct.revision);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Schema struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.cid = iprot.readI64();
        struct.setCidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.col_name = iprot.readString();
        struct.setCol_nameIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list5 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.col_tags = new java.util.ArrayList<java.lang.String>(_list5.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readString();
            struct.col_tags.add(_elem6);
          }
        }
        struct.setCol_tagsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.col_seq = org.swcdb.thrift.gen.KeySeq.findByValue(iprot.readI32());
        struct.setCol_seqIsSet(true);
      }
      if (incoming.get(4)) {
        struct.col_type = org.swcdb.thrift.gen.ColumnType.findByValue(iprot.readI32());
        struct.setCol_typeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.cell_versions = iprot.readI32();
        struct.setCell_versionsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.cell_ttl = iprot.readI32();
        struct.setCell_ttlIsSet(true);
      }
      if (incoming.get(7)) {
        struct.blk_encoding = org.swcdb.thrift.gen.EncodingType.findByValue(iprot.readI32());
        struct.setBlk_encodingIsSet(true);
      }
      if (incoming.get(8)) {
        struct.blk_size = iprot.readI32();
        struct.setBlk_sizeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.blk_cells = iprot.readI32();
        struct.setBlk_cellsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.cs_replication = iprot.readByte();
        struct.setCs_replicationIsSet(true);
      }
      if (incoming.get(11)) {
        struct.cs_size = iprot.readI32();
        struct.setCs_sizeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.cs_max = iprot.readByte();
        struct.setCs_maxIsSet(true);
      }
      if (incoming.get(13)) {
        struct.log_rollout_ratio = iprot.readByte();
        struct.setLog_rollout_ratioIsSet(true);
      }
      if (incoming.get(14)) {
        struct.log_compact_cointervaling = iprot.readByte();
        struct.setLog_compact_cointervalingIsSet(true);
      }
      if (incoming.get(15)) {
        struct.log_fragment_preload = iprot.readByte();
        struct.setLog_fragment_preloadIsSet(true);
      }
      if (incoming.get(16)) {
        struct.compact_percent = iprot.readByte();
        struct.setCompact_percentIsSet(true);
      }
      if (incoming.get(17)) {
        struct.revision = iprot.readI64();
        struct.setRevisionIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

