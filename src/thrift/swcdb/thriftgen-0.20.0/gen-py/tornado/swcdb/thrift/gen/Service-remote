#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.20.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado,slots,no_utf8strings
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from swcdb.thrift.gen import Service
from swcdb.thrift.gen.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void sql_mng_column(string sql)')
    print('  Schemas sql_list_columns(string sql)')
    print('  CompactResults sql_compact_columns(string sql)')
    print('  CellsPlain sql_select_plain(string sql)')
    print('  CellsCounter sql_select_counter(string sql)')
    print('  CellsSerial sql_select_serial(string sql)')
    print('  Cells sql_select(string sql)')
    print('  CCells sql_select_rslt_on_column(string sql)')
    print('  KCells sql_select_rslt_on_key(string sql)')
    print('  FCells sql_select_rslt_on_fraction(string sql)')
    print('  CellsGroup sql_query(string sql, CellsResult rslt)')
    print('  void sql_update(string sql, i64 updater_id)')
    print('  Result exec_sql(string sql)')
    print('  i64 updater_create(i32 buffer_size)')
    print('  void updater_close(i64 id)')
    print('  void update_plain(UCCellsPlain cells, i64 updater_id)')
    print('  void update_counter(UCCellsCounter cells, i64 updater_id)')
    print('  void update_serial(UCCellsSerial cells, i64 updater_id)')
    print('  void update_by_types(UCCellsPlain plain, UCCellsCounter counter, UCCellsSerial serial, i64 updater_id)')
    print('  void mng_column(SchemaFunc func, Schema schema)')
    print('  Schemas list_columns(SpecSchemas spec)')
    print('  CompactResults compact_columns(SpecSchemas spec)')
    print('  Cells scan(SpecScan spec)')
    print('  CCells scan_rslt_on_column(SpecScan spec)')
    print('  KCells scan_rslt_on_key(SpecScan spec)')
    print('  FCells scan_rslt_on_fraction(SpecScan spec)')
    print('  CellsGroup scan_rslt_on(SpecScan spec, CellsResult rslt)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Service.Client(protocol)
transport.open()

if cmd == 'sql_mng_column':
    if len(args) != 1:
        print('sql_mng_column requires 1 args')
        sys.exit(1)
    pp.pprint(client.sql_mng_column(args[0],))

elif cmd == 'sql_list_columns':
    if len(args) != 1:
        print('sql_list_columns requires 1 args')
        sys.exit(1)
    pp.pprint(client.sql_list_columns(args[0],))

elif cmd == 'sql_compact_columns':
    if len(args) != 1:
        print('sql_compact_columns requires 1 args')
        sys.exit(1)
    pp.pprint(client.sql_compact_columns(args[0],))

elif cmd == 'sql_select_plain':
    if len(args) != 1:
        print('sql_select_plain requires 1 args')
        sys.exit(1)
    pp.pprint(client.sql_select_plain(args[0],))

elif cmd == 'sql_select_counter':
    if len(args) != 1:
        print('sql_select_counter requires 1 args')
        sys.exit(1)
    pp.pprint(client.sql_select_counter(args[0],))

elif cmd == 'sql_select_serial':
    if len(args) != 1:
        print('sql_select_serial requires 1 args')
        sys.exit(1)
    pp.pprint(client.sql_select_serial(args[0],))

elif cmd == 'sql_select':
    if len(args) != 1:
        print('sql_select requires 1 args')
        sys.exit(1)
    pp.pprint(client.sql_select(args[0],))

elif cmd == 'sql_select_rslt_on_column':
    if len(args) != 1:
        print('sql_select_rslt_on_column requires 1 args')
        sys.exit(1)
    pp.pprint(client.sql_select_rslt_on_column(args[0],))

elif cmd == 'sql_select_rslt_on_key':
    if len(args) != 1:
        print('sql_select_rslt_on_key requires 1 args')
        sys.exit(1)
    pp.pprint(client.sql_select_rslt_on_key(args[0],))

elif cmd == 'sql_select_rslt_on_fraction':
    if len(args) != 1:
        print('sql_select_rslt_on_fraction requires 1 args')
        sys.exit(1)
    pp.pprint(client.sql_select_rslt_on_fraction(args[0],))

elif cmd == 'sql_query':
    if len(args) != 2:
        print('sql_query requires 2 args')
        sys.exit(1)
    pp.pprint(client.sql_query(args[0], eval(args[1]),))

elif cmd == 'sql_update':
    if len(args) != 2:
        print('sql_update requires 2 args')
        sys.exit(1)
    pp.pprint(client.sql_update(args[0], eval(args[1]),))

elif cmd == 'exec_sql':
    if len(args) != 1:
        print('exec_sql requires 1 args')
        sys.exit(1)
    pp.pprint(client.exec_sql(args[0],))

elif cmd == 'updater_create':
    if len(args) != 1:
        print('updater_create requires 1 args')
        sys.exit(1)
    pp.pprint(client.updater_create(eval(args[0]),))

elif cmd == 'updater_close':
    if len(args) != 1:
        print('updater_close requires 1 args')
        sys.exit(1)
    pp.pprint(client.updater_close(eval(args[0]),))

elif cmd == 'update_plain':
    if len(args) != 2:
        print('update_plain requires 2 args')
        sys.exit(1)
    pp.pprint(client.update_plain(eval(args[0]), eval(args[1]),))

elif cmd == 'update_counter':
    if len(args) != 2:
        print('update_counter requires 2 args')
        sys.exit(1)
    pp.pprint(client.update_counter(eval(args[0]), eval(args[1]),))

elif cmd == 'update_serial':
    if len(args) != 2:
        print('update_serial requires 2 args')
        sys.exit(1)
    pp.pprint(client.update_serial(eval(args[0]), eval(args[1]),))

elif cmd == 'update_by_types':
    if len(args) != 4:
        print('update_by_types requires 4 args')
        sys.exit(1)
    pp.pprint(client.update_by_types(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'mng_column':
    if len(args) != 2:
        print('mng_column requires 2 args')
        sys.exit(1)
    pp.pprint(client.mng_column(eval(args[0]), eval(args[1]),))

elif cmd == 'list_columns':
    if len(args) != 1:
        print('list_columns requires 1 args')
        sys.exit(1)
    pp.pprint(client.list_columns(eval(args[0]),))

elif cmd == 'compact_columns':
    if len(args) != 1:
        print('compact_columns requires 1 args')
        sys.exit(1)
    pp.pprint(client.compact_columns(eval(args[0]),))

elif cmd == 'scan':
    if len(args) != 1:
        print('scan requires 1 args')
        sys.exit(1)
    pp.pprint(client.scan(eval(args[0]),))

elif cmd == 'scan_rslt_on_column':
    if len(args) != 1:
        print('scan_rslt_on_column requires 1 args')
        sys.exit(1)
    pp.pprint(client.scan_rslt_on_column(eval(args[0]),))

elif cmd == 'scan_rslt_on_key':
    if len(args) != 1:
        print('scan_rslt_on_key requires 1 args')
        sys.exit(1)
    pp.pprint(client.scan_rslt_on_key(eval(args[0]),))

elif cmd == 'scan_rslt_on_fraction':
    if len(args) != 1:
        print('scan_rslt_on_fraction requires 1 args')
        sys.exit(1)
    pp.pprint(client.scan_rslt_on_fraction(eval(args[0]),))

elif cmd == 'scan_rslt_on':
    if len(args) != 2:
        print('scan_rslt_on requires 2 args')
        sys.exit(1)
    pp.pprint(client.scan_rslt_on(eval(args[0]), eval(args[1]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
