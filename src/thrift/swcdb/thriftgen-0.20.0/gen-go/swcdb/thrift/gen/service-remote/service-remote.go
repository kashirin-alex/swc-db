// Code generated by Thrift Compiler (0.20.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"swcdb/thrift/gen"
)

var _ = gen.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void sql_mng_column(string sql)")
  fmt.Fprintln(os.Stderr, "  Schemas sql_list_columns(string sql)")
  fmt.Fprintln(os.Stderr, "  CompactResults sql_compact_columns(string sql)")
  fmt.Fprintln(os.Stderr, "  CellsPlain sql_select_plain(string sql)")
  fmt.Fprintln(os.Stderr, "  CellsCounter sql_select_counter(string sql)")
  fmt.Fprintln(os.Stderr, "  CellsSerial sql_select_serial(string sql)")
  fmt.Fprintln(os.Stderr, "  Cells sql_select(string sql)")
  fmt.Fprintln(os.Stderr, "  CCells sql_select_rslt_on_column(string sql)")
  fmt.Fprintln(os.Stderr, "  KCells sql_select_rslt_on_key(string sql)")
  fmt.Fprintln(os.Stderr, "  FCells sql_select_rslt_on_fraction(string sql)")
  fmt.Fprintln(os.Stderr, "  CellsGroup sql_query(string sql, CellsResult rslt)")
  fmt.Fprintln(os.Stderr, "  void sql_update(string sql, i64 updater_id)")
  fmt.Fprintln(os.Stderr, "  Result exec_sql(string sql)")
  fmt.Fprintln(os.Stderr, "  i64 updater_create(i32 buffer_size)")
  fmt.Fprintln(os.Stderr, "  void updater_close(i64 id)")
  fmt.Fprintln(os.Stderr, "  void update_plain(UCCellsPlain cells, i64 updater_id)")
  fmt.Fprintln(os.Stderr, "  void update_counter(UCCellsCounter cells, i64 updater_id)")
  fmt.Fprintln(os.Stderr, "  void update_serial(UCCellsSerial cells, i64 updater_id)")
  fmt.Fprintln(os.Stderr, "  void update_by_types(UCCellsPlain plain, UCCellsCounter counter, UCCellsSerial serial, i64 updater_id)")
  fmt.Fprintln(os.Stderr, "  void mng_column(SchemaFunc func, Schema schema)")
  fmt.Fprintln(os.Stderr, "  Schemas list_columns(SpecSchemas spec)")
  fmt.Fprintln(os.Stderr, "  CompactResults compact_columns(SpecSchemas spec)")
  fmt.Fprintln(os.Stderr, "  Cells scan(SpecScan spec)")
  fmt.Fprintln(os.Stderr, "  CCells scan_rslt_on_column(SpecScan spec)")
  fmt.Fprintln(os.Stderr, "  KCells scan_rslt_on_key(SpecScan spec)")
  fmt.Fprintln(os.Stderr, "  FCells scan_rslt_on_fraction(SpecScan spec)")
  fmt.Fprintln(os.Stderr, "  CellsGroup scan_rslt_on(SpecScan spec, CellsResult rslt)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := gen.NewServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "sql_mng_column":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SqlMngColumn requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.SqlMngColumn(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sql_list_columns":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SqlListColumns requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.SqlListColumns(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sql_compact_columns":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SqlCompactColumns requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.SqlCompactColumns(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sql_select_plain":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SqlSelectPlain requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.SqlSelectPlain(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sql_select_counter":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SqlSelectCounter requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.SqlSelectCounter(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sql_select_serial":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SqlSelectSerial requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.SqlSelectSerial(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sql_select":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SqlSelect requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.SqlSelect(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sql_select_rslt_on_column":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SqlSelectRsltOnColumn requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.SqlSelectRsltOnColumn(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sql_select_rslt_on_key":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SqlSelectRsltOnKey requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.SqlSelectRsltOnKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sql_select_rslt_on_fraction":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SqlSelectRsltOnFraction requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.SqlSelectRsltOnFraction(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sql_query":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SqlQuery requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := gen.CellsResult_(tmp1)
    value1 := argvalue1
    fmt.Print(client.SqlQuery(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sql_update":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SqlUpdate requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err333 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err333 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SqlUpdate(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "exec_sql":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ExecSql requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ExecSql(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updater_create":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdaterCreate requires 1 args")
      flag.Usage()
    }
    tmp0, err335 := (strconv.Atoi(flag.Arg(1)))
    if err335 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.UpdaterCreate(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updater_close":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdaterClose requires 1 args")
      flag.Usage()
    }
    argvalue0, err336 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err336 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdaterClose(context.Background(), value0))
    fmt.Print("\n")
    break
  case "update_plain":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdatePlain requires 2 args")
      flag.Usage()
    }
    arg337 := flag.Arg(1)
    mbTrans338 := thrift.NewTMemoryBufferLen(len(arg337))
    defer mbTrans338.Close()
    _, err339 := mbTrans338.WriteString(arg337)
    if err339 != nil { 
      Usage()
      return
    }
    factory340 := thrift.NewTJSONProtocolFactory()
    jsProt341 := factory340.GetProtocol(mbTrans338)
    containerStruct0 := gen.NewServiceUpdatePlainArgs()
    err342 := containerStruct0.ReadField1(context.Background(), jsProt341)
    if err342 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Cells
    value0 := gen.UCCellsPlain(argvalue0)
    argvalue1, err343 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err343 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdatePlain(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "update_counter":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateCounter requires 2 args")
      flag.Usage()
    }
    arg344 := flag.Arg(1)
    mbTrans345 := thrift.NewTMemoryBufferLen(len(arg344))
    defer mbTrans345.Close()
    _, err346 := mbTrans345.WriteString(arg344)
    if err346 != nil { 
      Usage()
      return
    }
    factory347 := thrift.NewTJSONProtocolFactory()
    jsProt348 := factory347.GetProtocol(mbTrans345)
    containerStruct0 := gen.NewServiceUpdateCounterArgs()
    err349 := containerStruct0.ReadField1(context.Background(), jsProt348)
    if err349 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Cells
    value0 := gen.UCCellsCounter(argvalue0)
    argvalue1, err350 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err350 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateCounter(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "update_serial":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateSerial requires 2 args")
      flag.Usage()
    }
    arg351 := flag.Arg(1)
    mbTrans352 := thrift.NewTMemoryBufferLen(len(arg351))
    defer mbTrans352.Close()
    _, err353 := mbTrans352.WriteString(arg351)
    if err353 != nil { 
      Usage()
      return
    }
    factory354 := thrift.NewTJSONProtocolFactory()
    jsProt355 := factory354.GetProtocol(mbTrans352)
    containerStruct0 := gen.NewServiceUpdateSerialArgs()
    err356 := containerStruct0.ReadField1(context.Background(), jsProt355)
    if err356 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Cells
    value0 := gen.UCCellsSerial(argvalue0)
    argvalue1, err357 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err357 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateSerial(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "update_by_types":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "UpdateByTypes requires 4 args")
      flag.Usage()
    }
    arg358 := flag.Arg(1)
    mbTrans359 := thrift.NewTMemoryBufferLen(len(arg358))
    defer mbTrans359.Close()
    _, err360 := mbTrans359.WriteString(arg358)
    if err360 != nil { 
      Usage()
      return
    }
    factory361 := thrift.NewTJSONProtocolFactory()
    jsProt362 := factory361.GetProtocol(mbTrans359)
    containerStruct0 := gen.NewServiceUpdateByTypesArgs()
    err363 := containerStruct0.ReadField1(context.Background(), jsProt362)
    if err363 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Plain
    value0 := gen.UCCellsPlain(argvalue0)
    arg364 := flag.Arg(2)
    mbTrans365 := thrift.NewTMemoryBufferLen(len(arg364))
    defer mbTrans365.Close()
    _, err366 := mbTrans365.WriteString(arg364)
    if err366 != nil { 
      Usage()
      return
    }
    factory367 := thrift.NewTJSONProtocolFactory()
    jsProt368 := factory367.GetProtocol(mbTrans365)
    containerStruct1 := gen.NewServiceUpdateByTypesArgs()
    err369 := containerStruct1.ReadField2(context.Background(), jsProt368)
    if err369 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Counter
    value1 := gen.UCCellsCounter(argvalue1)
    arg370 := flag.Arg(3)
    mbTrans371 := thrift.NewTMemoryBufferLen(len(arg370))
    defer mbTrans371.Close()
    _, err372 := mbTrans371.WriteString(arg370)
    if err372 != nil { 
      Usage()
      return
    }
    factory373 := thrift.NewTJSONProtocolFactory()
    jsProt374 := factory373.GetProtocol(mbTrans371)
    containerStruct2 := gen.NewServiceUpdateByTypesArgs()
    err375 := containerStruct2.ReadField3(context.Background(), jsProt374)
    if err375 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Serial
    value2 := gen.UCCellsSerial(argvalue2)
    argvalue3, err376 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err376 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.UpdateByTypes(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "mng_column":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "MngColumn requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := gen.SchemaFunc(tmp0)
    value0 := argvalue0
    arg377 := flag.Arg(2)
    mbTrans378 := thrift.NewTMemoryBufferLen(len(arg377))
    defer mbTrans378.Close()
    _, err379 := mbTrans378.WriteString(arg377)
    if err379 != nil {
      Usage()
      return
    }
    factory380 := thrift.NewTJSONProtocolFactory()
    jsProt381 := factory380.GetProtocol(mbTrans378)
    argvalue1 := gen.NewSchema()
    err382 := argvalue1.Read(context.Background(), jsProt381)
    if err382 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.MngColumn(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "list_columns":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListColumns requires 1 args")
      flag.Usage()
    }
    arg383 := flag.Arg(1)
    mbTrans384 := thrift.NewTMemoryBufferLen(len(arg383))
    defer mbTrans384.Close()
    _, err385 := mbTrans384.WriteString(arg383)
    if err385 != nil {
      Usage()
      return
    }
    factory386 := thrift.NewTJSONProtocolFactory()
    jsProt387 := factory386.GetProtocol(mbTrans384)
    argvalue0 := gen.NewSpecSchemas()
    err388 := argvalue0.Read(context.Background(), jsProt387)
    if err388 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListColumns(context.Background(), value0))
    fmt.Print("\n")
    break
  case "compact_columns":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CompactColumns requires 1 args")
      flag.Usage()
    }
    arg389 := flag.Arg(1)
    mbTrans390 := thrift.NewTMemoryBufferLen(len(arg389))
    defer mbTrans390.Close()
    _, err391 := mbTrans390.WriteString(arg389)
    if err391 != nil {
      Usage()
      return
    }
    factory392 := thrift.NewTJSONProtocolFactory()
    jsProt393 := factory392.GetProtocol(mbTrans390)
    argvalue0 := gen.NewSpecSchemas()
    err394 := argvalue0.Read(context.Background(), jsProt393)
    if err394 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CompactColumns(context.Background(), value0))
    fmt.Print("\n")
    break
  case "scan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Scan requires 1 args")
      flag.Usage()
    }
    arg395 := flag.Arg(1)
    mbTrans396 := thrift.NewTMemoryBufferLen(len(arg395))
    defer mbTrans396.Close()
    _, err397 := mbTrans396.WriteString(arg395)
    if err397 != nil {
      Usage()
      return
    }
    factory398 := thrift.NewTJSONProtocolFactory()
    jsProt399 := factory398.GetProtocol(mbTrans396)
    argvalue0 := gen.NewSpecScan()
    err400 := argvalue0.Read(context.Background(), jsProt399)
    if err400 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Scan(context.Background(), value0))
    fmt.Print("\n")
    break
  case "scan_rslt_on_column":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ScanRsltOnColumn requires 1 args")
      flag.Usage()
    }
    arg401 := flag.Arg(1)
    mbTrans402 := thrift.NewTMemoryBufferLen(len(arg401))
    defer mbTrans402.Close()
    _, err403 := mbTrans402.WriteString(arg401)
    if err403 != nil {
      Usage()
      return
    }
    factory404 := thrift.NewTJSONProtocolFactory()
    jsProt405 := factory404.GetProtocol(mbTrans402)
    argvalue0 := gen.NewSpecScan()
    err406 := argvalue0.Read(context.Background(), jsProt405)
    if err406 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ScanRsltOnColumn(context.Background(), value0))
    fmt.Print("\n")
    break
  case "scan_rslt_on_key":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ScanRsltOnKey requires 1 args")
      flag.Usage()
    }
    arg407 := flag.Arg(1)
    mbTrans408 := thrift.NewTMemoryBufferLen(len(arg407))
    defer mbTrans408.Close()
    _, err409 := mbTrans408.WriteString(arg407)
    if err409 != nil {
      Usage()
      return
    }
    factory410 := thrift.NewTJSONProtocolFactory()
    jsProt411 := factory410.GetProtocol(mbTrans408)
    argvalue0 := gen.NewSpecScan()
    err412 := argvalue0.Read(context.Background(), jsProt411)
    if err412 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ScanRsltOnKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "scan_rslt_on_fraction":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ScanRsltOnFraction requires 1 args")
      flag.Usage()
    }
    arg413 := flag.Arg(1)
    mbTrans414 := thrift.NewTMemoryBufferLen(len(arg413))
    defer mbTrans414.Close()
    _, err415 := mbTrans414.WriteString(arg413)
    if err415 != nil {
      Usage()
      return
    }
    factory416 := thrift.NewTJSONProtocolFactory()
    jsProt417 := factory416.GetProtocol(mbTrans414)
    argvalue0 := gen.NewSpecScan()
    err418 := argvalue0.Read(context.Background(), jsProt417)
    if err418 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ScanRsltOnFraction(context.Background(), value0))
    fmt.Print("\n")
    break
  case "scan_rslt_on":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ScanRsltOn requires 2 args")
      flag.Usage()
    }
    arg419 := flag.Arg(1)
    mbTrans420 := thrift.NewTMemoryBufferLen(len(arg419))
    defer mbTrans420.Close()
    _, err421 := mbTrans420.WriteString(arg419)
    if err421 != nil {
      Usage()
      return
    }
    factory422 := thrift.NewTJSONProtocolFactory()
    jsProt423 := factory422.GetProtocol(mbTrans420)
    argvalue0 := gen.NewSpecScan()
    err424 := argvalue0.Read(context.Background(), jsProt423)
    if err424 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := gen.CellsResult_(tmp1)
    value1 := argvalue1
    fmt.Print(client.ScanRsltOn(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
