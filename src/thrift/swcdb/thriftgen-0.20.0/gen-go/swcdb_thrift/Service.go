// Code generated by Thrift Compiler (0.21.0). DO NOT EDIT.

package swcdb_thrift

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"log/slog"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = bytes.Equal
var _ = context.Background
var _ = errors.New
var _ = fmt.Printf
var _ = slog.Log
var _ = time.Now
var _ = thrift.ZERO
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

//Column Key Sequences
type _KeySeq int64
const (
	_KeySeq_UNKNOWN _KeySeq = 0
	_KeySeq_LEXIC _KeySeq = 1
	_KeySeq_VOLUME _KeySeq = 2
	_KeySeq_FC_LEXIC _KeySeq = 3
	_KeySeq_FC_VOLUME _KeySeq = 4
)

func (p _KeySeq) String() string {
	switch p {
	case _KeySeq_UNKNOWN: return "UNKNOWN"
	case _KeySeq_LEXIC: return "LEXIC"
	case _KeySeq_VOLUME: return "VOLUME"
	case _KeySeq_FC_LEXIC: return "FC_LEXIC"
	case _KeySeq_FC_VOLUME: return "FC_VOLUME"
	}
	return "<UNSET>"
}

func _KeySeqFromString(s string) (_KeySeq, error) {
	switch s {
	case "UNKNOWN": return _KeySeq_UNKNOWN, nil
	case "LEXIC": return _KeySeq_LEXIC, nil
	case "VOLUME": return _KeySeq_VOLUME, nil
	case "FC_LEXIC": return _KeySeq_FC_LEXIC, nil
	case "FC_VOLUME": return _KeySeq_FC_VOLUME, nil
	}
	return _KeySeq(0), fmt.Errorf("not a valid _KeySeq string")
}


func _KeySeqPtr(v _KeySeq) *_KeySeq { return &v }

func (p _KeySeq) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *_KeySeq) UnmarshalText(text []byte) error {
	q, err := _KeySeqFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *_KeySeq) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = _KeySeq(v)
	return nil
}

func (p *_KeySeq) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

//Column Value Types
type _ColumnType int64
const (
	_ColumnType_UNKNOWN _ColumnType = 0
	_ColumnType_PLAIN _ColumnType = 1
	_ColumnType_COUNTER_I64 _ColumnType = 2
	_ColumnType_COUNTER_I32 _ColumnType = 3
	_ColumnType_COUNTER_I16 _ColumnType = 4
	_ColumnType_COUNTER_I8 _ColumnType = 5
	_ColumnType_SERIAL _ColumnType = 6
	_ColumnType_CELL_DEFINED _ColumnType = 15
)

func (p _ColumnType) String() string {
	switch p {
	case _ColumnType_UNKNOWN: return "UNKNOWN"
	case _ColumnType_PLAIN: return "PLAIN"
	case _ColumnType_COUNTER_I64: return "COUNTER_I64"
	case _ColumnType_COUNTER_I32: return "COUNTER_I32"
	case _ColumnType_COUNTER_I16: return "COUNTER_I16"
	case _ColumnType_COUNTER_I8: return "COUNTER_I8"
	case _ColumnType_SERIAL: return "SERIAL"
	case _ColumnType_CELL_DEFINED: return "CELL_DEFINED"
	}
	return "<UNSET>"
}

func _ColumnTypeFromString(s string) (_ColumnType, error) {
	switch s {
	case "UNKNOWN": return _ColumnType_UNKNOWN, nil
	case "PLAIN": return _ColumnType_PLAIN, nil
	case "COUNTER_I64": return _ColumnType_COUNTER_I64, nil
	case "COUNTER_I32": return _ColumnType_COUNTER_I32, nil
	case "COUNTER_I16": return _ColumnType_COUNTER_I16, nil
	case "COUNTER_I8": return _ColumnType_COUNTER_I8, nil
	case "SERIAL": return _ColumnType_SERIAL, nil
	case "CELL_DEFINED": return _ColumnType_CELL_DEFINED, nil
	}
	return _ColumnType(0), fmt.Errorf("not a valid _ColumnType string")
}


func _ColumnTypePtr(v _ColumnType) *_ColumnType { return &v }

func (p _ColumnType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *_ColumnType) UnmarshalText(text []byte) error {
	q, err := _ColumnTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *_ColumnType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = _ColumnType(v)
	return nil
}

func (p *_ColumnType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

//Data Encoding Types
type _EncodingType int64
const (
	_EncodingType_DEFAULT _EncodingType = 0
	_EncodingType_PLAIN _EncodingType = 1
	_EncodingType_ZLIB _EncodingType = 2
	_EncodingType_SNAPPY _EncodingType = 3
	_EncodingType_ZSTD _EncodingType = 4
	_EncodingType_UNKNOWN _EncodingType = 255
)

func (p _EncodingType) String() string {
	switch p {
	case _EncodingType_DEFAULT: return "DEFAULT"
	case _EncodingType_PLAIN: return "PLAIN"
	case _EncodingType_ZLIB: return "ZLIB"
	case _EncodingType_SNAPPY: return "SNAPPY"
	case _EncodingType_ZSTD: return "ZSTD"
	case _EncodingType_UNKNOWN: return "UNKNOWN"
	}
	return "<UNSET>"
}

func _EncodingTypeFromString(s string) (_EncodingType, error) {
	switch s {
	case "DEFAULT": return _EncodingType_DEFAULT, nil
	case "PLAIN": return _EncodingType_PLAIN, nil
	case "ZLIB": return _EncodingType_ZLIB, nil
	case "SNAPPY": return _EncodingType_SNAPPY, nil
	case "ZSTD": return _EncodingType_ZSTD, nil
	case "UNKNOWN": return _EncodingType_UNKNOWN, nil
	}
	return _EncodingType(0), fmt.Errorf("not a valid _EncodingType string")
}


func _EncodingTypePtr(v _EncodingType) *_EncodingType { return &v }

func (p _EncodingType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *_EncodingType) UnmarshalText(text []byte) error {
	q, err := _EncodingTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *_EncodingType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = _EncodingType(v)
	return nil
}

func (p *_EncodingType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

//Manage Columns schema function Flags
type _SchemaFunc int64
const (
	_SchemaFunc_CREATE _SchemaFunc = 3
	_SchemaFunc_REMOVE _SchemaFunc = 5
	_SchemaFunc_MODIFY _SchemaFunc = 7
)

func (p _SchemaFunc) String() string {
	switch p {
	case _SchemaFunc_CREATE: return "CREATE"
	case _SchemaFunc_REMOVE: return "REMOVE"
	case _SchemaFunc_MODIFY: return "MODIFY"
	}
	return "<UNSET>"
}

func _SchemaFuncFromString(s string) (_SchemaFunc, error) {
	switch s {
	case "CREATE": return _SchemaFunc_CREATE, nil
	case "REMOVE": return _SchemaFunc_REMOVE, nil
	case "MODIFY": return _SchemaFunc_MODIFY, nil
	}
	return _SchemaFunc(0), fmt.Errorf("not a valid _SchemaFunc string")
}


func _SchemaFuncPtr(v _SchemaFunc) *_SchemaFunc { return &v }

func (p _SchemaFunc) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *_SchemaFunc) UnmarshalText(text []byte) error {
	q, err := _SchemaFuncFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *_SchemaFunc) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = _SchemaFunc(v)
	return nil
}

func (p *_SchemaFunc) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

//The available logical Comparators, plus extended logic options applied with 'v' for VOLUME
type _Comp int64
const (
	_Comp_NONE _Comp = 0
	_Comp_PF _Comp = 1
	_Comp_GT _Comp = 2
	_Comp_GE _Comp = 3
	_Comp_EQ _Comp = 4
	_Comp_LE _Comp = 5
	_Comp_LT _Comp = 6
	_Comp_NE _Comp = 7
	_Comp_RE _Comp = 8
	_Comp_VGT _Comp = 9
	_Comp_VGE _Comp = 10
	_Comp_VLE _Comp = 11
	_Comp_VLT _Comp = 12
	_Comp_SBS _Comp = 13
	_Comp_SPS _Comp = 14
	_Comp_POSBS _Comp = 15
	_Comp_POSPS _Comp = 16
	_Comp_FOSBS _Comp = 17
	_Comp_FOSPS _Comp = 18
	_Comp_FIP _Comp = 19
	_Comp_FI _Comp = 20
	_Comp_OR _Comp = 21
)

func (p _Comp) String() string {
	switch p {
	case _Comp_NONE: return "NONE"
	case _Comp_PF: return "PF"
	case _Comp_GT: return "GT"
	case _Comp_GE: return "GE"
	case _Comp_EQ: return "EQ"
	case _Comp_LE: return "LE"
	case _Comp_LT: return "LT"
	case _Comp_NE: return "NE"
	case _Comp_RE: return "RE"
	case _Comp_VGT: return "VGT"
	case _Comp_VGE: return "VGE"
	case _Comp_VLE: return "VLE"
	case _Comp_VLT: return "VLT"
	case _Comp_SBS: return "SBS"
	case _Comp_SPS: return "SPS"
	case _Comp_POSBS: return "POSBS"
	case _Comp_POSPS: return "POSPS"
	case _Comp_FOSBS: return "FOSBS"
	case _Comp_FOSPS: return "FOSPS"
	case _Comp_FIP: return "FIP"
	case _Comp_FI: return "FI"
	case _Comp_OR: return "OR"
	}
	return "<UNSET>"
}

func _CompFromString(s string) (_Comp, error) {
	switch s {
	case "NONE": return _Comp_NONE, nil
	case "PF": return _Comp_PF, nil
	case "GT": return _Comp_GT, nil
	case "GE": return _Comp_GE, nil
	case "EQ": return _Comp_EQ, nil
	case "LE": return _Comp_LE, nil
	case "LT": return _Comp_LT, nil
	case "NE": return _Comp_NE, nil
	case "RE": return _Comp_RE, nil
	case "VGT": return _Comp_VGT, nil
	case "VGE": return _Comp_VGE, nil
	case "VLE": return _Comp_VLE, nil
	case "VLT": return _Comp_VLT, nil
	case "SBS": return _Comp_SBS, nil
	case "SPS": return _Comp_SPS, nil
	case "POSBS": return _Comp_POSBS, nil
	case "POSPS": return _Comp_POSPS, nil
	case "FOSBS": return _Comp_FOSBS, nil
	case "FOSPS": return _Comp_FOSPS, nil
	case "FIP": return _Comp_FIP, nil
	case "FI": return _Comp_FI, nil
	case "OR": return _Comp_OR, nil
	}
	return _Comp(0), fmt.Errorf("not a valid _Comp string")
}


func _CompPtr(v _Comp) *_Comp { return &v }

func (p _Comp) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *_Comp) UnmarshalText(text []byte) error {
	q, err := _CompFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *_Comp) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = _Comp(v)
	return nil
}

func (p *_Comp) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

//The Scan options Flags Specifications for the SpecFlags 'options' bit
type _SpecFlagsOpt int64
const (
	_SpecFlagsOpt_NONE _SpecFlagsOpt = 0
	_SpecFlagsOpt_LIMIT_BY_KEYS _SpecFlagsOpt = 1
	_SpecFlagsOpt_OFFSET_BY_KEYS _SpecFlagsOpt = 4
	_SpecFlagsOpt_ONLY_KEYS _SpecFlagsOpt = 8
	_SpecFlagsOpt_ONLY_DELETES _SpecFlagsOpt = 10
)

func (p _SpecFlagsOpt) String() string {
	switch p {
	case _SpecFlagsOpt_NONE: return "NONE"
	case _SpecFlagsOpt_LIMIT_BY_KEYS: return "LIMIT_BY_KEYS"
	case _SpecFlagsOpt_OFFSET_BY_KEYS: return "OFFSET_BY_KEYS"
	case _SpecFlagsOpt_ONLY_KEYS: return "ONLY_KEYS"
	case _SpecFlagsOpt_ONLY_DELETES: return "ONLY_DELETES"
	}
	return "<UNSET>"
}

func _SpecFlagsOptFromString(s string) (_SpecFlagsOpt, error) {
	switch s {
	case "NONE": return _SpecFlagsOpt_NONE, nil
	case "LIMIT_BY_KEYS": return _SpecFlagsOpt_LIMIT_BY_KEYS, nil
	case "OFFSET_BY_KEYS": return _SpecFlagsOpt_OFFSET_BY_KEYS, nil
	case "ONLY_KEYS": return _SpecFlagsOpt_ONLY_KEYS, nil
	case "ONLY_DELETES": return _SpecFlagsOpt_ONLY_DELETES, nil
	}
	return _SpecFlagsOpt(0), fmt.Errorf("not a valid _SpecFlagsOpt string")
}


func _SpecFlagsOptPtr(v _SpecFlagsOpt) *_SpecFlagsOpt { return &v }

func (p _SpecFlagsOpt) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *_SpecFlagsOpt) UnmarshalText(text []byte) error {
	q, err := _SpecFlagsOptFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *_SpecFlagsOpt) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = _SpecFlagsOpt(v)
	return nil
}

func (p *_SpecFlagsOpt) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type _UpdateOP int64
const (
	_UpdateOP_REPLACE _UpdateOP = 0
	_UpdateOP_APPEND _UpdateOP = 1
	_UpdateOP_PREPEND _UpdateOP = 2
	_UpdateOP_INSERT _UpdateOP = 3
	_UpdateOP_OVERWRITE _UpdateOP = 4
	_UpdateOP_SERIAL _UpdateOP = 5
)

func (p _UpdateOP) String() string {
	switch p {
	case _UpdateOP_REPLACE: return "REPLACE"
	case _UpdateOP_APPEND: return "APPEND"
	case _UpdateOP_PREPEND: return "PREPEND"
	case _UpdateOP_INSERT: return "INSERT"
	case _UpdateOP_OVERWRITE: return "OVERWRITE"
	case _UpdateOP_SERIAL: return "SERIAL"
	}
	return "<UNSET>"
}

func _UpdateOPFromString(s string) (_UpdateOP, error) {
	switch s {
	case "REPLACE": return _UpdateOP_REPLACE, nil
	case "APPEND": return _UpdateOP_APPEND, nil
	case "PREPEND": return _UpdateOP_PREPEND, nil
	case "INSERT": return _UpdateOP_INSERT, nil
	case "OVERWRITE": return _UpdateOP_OVERWRITE, nil
	case "SERIAL": return _UpdateOP_SERIAL, nil
	}
	return _UpdateOP(0), fmt.Errorf("not a valid _UpdateOP string")
}


func _UpdateOPPtr(v _UpdateOP) *_UpdateOP { return &v }

func (p _UpdateOP) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *_UpdateOP) UnmarshalText(text []byte) error {
	q, err := _UpdateOPFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *_UpdateOP) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = _UpdateOP(v)
	return nil
}

func (p *_UpdateOP) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

//The Scan Interval Specs Options for the SpecIntervalPlain, SpecIntervalCounter and SpecIntervalSerial 'options' bit
type _SpecIntervalOptions int64
const (
	_SpecIntervalOptions_UPDATING _SpecIntervalOptions = 4
	_SpecIntervalOptions_DELETING _SpecIntervalOptions = 8
)

func (p _SpecIntervalOptions) String() string {
	switch p {
	case _SpecIntervalOptions_UPDATING: return "UPDATING"
	case _SpecIntervalOptions_DELETING: return "DELETING"
	}
	return "<UNSET>"
}

func _SpecIntervalOptionsFromString(s string) (_SpecIntervalOptions, error) {
	switch s {
	case "UPDATING": return _SpecIntervalOptions_UPDATING, nil
	case "DELETING": return _SpecIntervalOptions_DELETING, nil
	}
	return _SpecIntervalOptions(0), fmt.Errorf("not a valid _SpecIntervalOptions string")
}


func _SpecIntervalOptionsPtr(v _SpecIntervalOptions) *_SpecIntervalOptions { return &v }

func (p _SpecIntervalOptions) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *_SpecIntervalOptions) UnmarshalText(text []byte) error {
	q, err := _SpecIntervalOptionsFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *_SpecIntervalOptions) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = _SpecIntervalOptions(v)
	return nil
}

func (p *_SpecIntervalOptions) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

//The Cell Flag
type _Flag int64
const (
	_Flag_NONE _Flag = 0
	_Flag_INSERT _Flag = 1
	_Flag_DELETE_LE _Flag = 2
	_Flag_DELETE_EQ _Flag = 3
)

func (p _Flag) String() string {
	switch p {
	case _Flag_NONE: return "NONE"
	case _Flag_INSERT: return "INSERT"
	case _Flag_DELETE_LE: return "DELETE_LE"
	case _Flag_DELETE_EQ: return "DELETE_EQ"
	}
	return "<UNSET>"
}

func _FlagFromString(s string) (_Flag, error) {
	switch s {
	case "NONE": return _Flag_NONE, nil
	case "INSERT": return _Flag_INSERT, nil
	case "DELETE_LE": return _Flag_DELETE_LE, nil
	case "DELETE_EQ": return _Flag_DELETE_EQ, nil
	}
	return _Flag(0), fmt.Errorf("not a valid _Flag string")
}


func _FlagPtr(v _Flag) *_Flag { return &v }

func (p _Flag) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *_Flag) UnmarshalText(text []byte) error {
	q, err := _FlagFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *_Flag) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = _Flag(v)
	return nil
}

func (p *_Flag) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

//MATH Operations for Serial Field Update of types INT64 and DOUBLE
type _FU_MATH_OP int64
const (
	_FU_MATH_OP_EQUAL _FU_MATH_OP = 0
	_FU_MATH_OP_PLUS _FU_MATH_OP = 1
	_FU_MATH_OP_MULTIPLY _FU_MATH_OP = 2
	_FU_MATH_OP_DIVIDE _FU_MATH_OP = 3
)

func (p _FU_MATH_OP) String() string {
	switch p {
	case _FU_MATH_OP_EQUAL: return "EQUAL"
	case _FU_MATH_OP_PLUS: return "PLUS"
	case _FU_MATH_OP_MULTIPLY: return "MULTIPLY"
	case _FU_MATH_OP_DIVIDE: return "DIVIDE"
	}
	return "<UNSET>"
}

func _FU_MATH_OPFromString(s string) (_FU_MATH_OP, error) {
	switch s {
	case "EQUAL": return _FU_MATH_OP_EQUAL, nil
	case "PLUS": return _FU_MATH_OP_PLUS, nil
	case "MULTIPLY": return _FU_MATH_OP_MULTIPLY, nil
	case "DIVIDE": return _FU_MATH_OP_DIVIDE, nil
	}
	return _FU_MATH_OP(0), fmt.Errorf("not a valid _FU_MATH_OP string")
}


func _FU_MATH_OPPtr(v _FU_MATH_OP) *_FU_MATH_OP { return &v }

func (p _FU_MATH_OP) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *_FU_MATH_OP) UnmarshalText(text []byte) error {
	q, err := _FU_MATH_OPFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *_FU_MATH_OP) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = _FU_MATH_OP(v)
	return nil
}

func (p *_FU_MATH_OP) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

//LIST Operations for Serial Field Update of array/list/bytes with LIST-op in the inner SERIAL fields
type _FU_LIST_OP int64
const (
	_FU_LIST_OP_REPLACE _FU_LIST_OP = 0
	_FU_LIST_OP_APPEND _FU_LIST_OP = 1
	_FU_LIST_OP_PREPEND _FU_LIST_OP = 2
	_FU_LIST_OP_INSERT _FU_LIST_OP = 3
	_FU_LIST_OP_OVERWRITE _FU_LIST_OP = 4
	_FU_LIST_OP_ERASE _FU_LIST_OP = 5
	_FU_LIST_OP_BY_UNIQUE _FU_LIST_OP = 6
	_FU_LIST_OP_BY_COND _FU_LIST_OP = 7
	_FU_LIST_OP_BY_INDEX _FU_LIST_OP = 8
)

func (p _FU_LIST_OP) String() string {
	switch p {
	case _FU_LIST_OP_REPLACE: return "REPLACE"
	case _FU_LIST_OP_APPEND: return "APPEND"
	case _FU_LIST_OP_PREPEND: return "PREPEND"
	case _FU_LIST_OP_INSERT: return "INSERT"
	case _FU_LIST_OP_OVERWRITE: return "OVERWRITE"
	case _FU_LIST_OP_ERASE: return "ERASE"
	case _FU_LIST_OP_BY_UNIQUE: return "BY_UNIQUE"
	case _FU_LIST_OP_BY_COND: return "BY_COND"
	case _FU_LIST_OP_BY_INDEX: return "BY_INDEX"
	}
	return "<UNSET>"
}

func _FU_LIST_OPFromString(s string) (_FU_LIST_OP, error) {
	switch s {
	case "REPLACE": return _FU_LIST_OP_REPLACE, nil
	case "APPEND": return _FU_LIST_OP_APPEND, nil
	case "PREPEND": return _FU_LIST_OP_PREPEND, nil
	case "INSERT": return _FU_LIST_OP_INSERT, nil
	case "OVERWRITE": return _FU_LIST_OP_OVERWRITE, nil
	case "ERASE": return _FU_LIST_OP_ERASE, nil
	case "BY_UNIQUE": return _FU_LIST_OP_BY_UNIQUE, nil
	case "BY_COND": return _FU_LIST_OP_BY_COND, nil
	case "BY_INDEX": return _FU_LIST_OP_BY_INDEX, nil
	}
	return _FU_LIST_OP(0), fmt.Errorf("not a valid _FU_LIST_OP string")
}


func _FU_LIST_OPPtr(v _FU_LIST_OP) *_FU_LIST_OP { return &v }

func (p _FU_LIST_OP) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *_FU_LIST_OP) UnmarshalText(text []byte) error {
	q, err := _FU_LIST_OPFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *_FU_LIST_OP) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = _FU_LIST_OP(v)
	return nil
}

func (p *_FU_LIST_OP) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

//The Cells Results types for using with CellsGroup requests
type _CellsResult_ int64
const (
	_CellsResult__IN_LIST _CellsResult_ = 0
	_CellsResult__ON_COLUMN _CellsResult_ = 1
	_CellsResult__ON_KEY _CellsResult_ = 2
	_CellsResult__ON_FRACTION _CellsResult_ = 3
)

func (p _CellsResult_) String() string {
	switch p {
	case _CellsResult__IN_LIST: return "IN_LIST"
	case _CellsResult__ON_COLUMN: return "ON_COLUMN"
	case _CellsResult__ON_KEY: return "ON_KEY"
	case _CellsResult__ON_FRACTION: return "ON_FRACTION"
	}
	return "<UNSET>"
}

func _CellsResult_FromString(s string) (_CellsResult_, error) {
	switch s {
	case "IN_LIST": return _CellsResult__IN_LIST, nil
	case "ON_COLUMN": return _CellsResult__ON_COLUMN, nil
	case "ON_KEY": return _CellsResult__ON_KEY, nil
	case "ON_FRACTION": return _CellsResult__ON_FRACTION, nil
	}
	return _CellsResult_(0), fmt.Errorf("not a valid _CellsResult_ string")
}


func _CellsResult_Ptr(v _CellsResult_) *_CellsResult_ { return &v }

func (p _CellsResult_) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *_CellsResult_) UnmarshalText(text []byte) error {
	q, err := _CellsResult_FromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *_CellsResult_) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = _CellsResult_(v)
	return nil
}

func (p *_CellsResult_) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

//A list-container of Schemas
type _Schemas []*_Schema

func _SchemasPtr(v _Schemas) *_Schemas { return &v }

//A Cell Key defined as binary(bytes) items in a list-container
type _Key [][]byte

func _KeyPtr(v _Key) *_Key { return &v }

//The Serial Cell Value Specifications defined as SpecValueSerialField items in a list-container
type _SpecValueSerialFields []*_SpecValueSerialField

func _SpecValueSerialFieldsPtr(v _SpecValueSerialFields) *_SpecValueSerialFields { return &v }

//The Cell Value Specifications defined as SpecValuePlain items in a list-container
type _SpecValuesPlain []*_SpecValuePlain

func _SpecValuesPlainPtr(v _SpecValuesPlain) *_SpecValuesPlain { return &v }

//The Cell Value Specifications defined as SpecValueCounter items in a list-container
type _SpecValuesCounter []*_SpecValueCounter

func _SpecValuesCounterPtr(v _SpecValuesCounter) *_SpecValuesCounter { return &v }

//The Cell Value Specifications defined as SpecValueSerial items in a list-container
type _SpecValuesSerial []*_SpecValueSerial

func _SpecValuesSerialPtr(v _SpecValuesSerial) *_SpecValuesSerial { return &v }

//The Key Specifications defined as SpecFraction items in a list-container
type _SpecKey []*_SpecFraction

func _SpecKeyPtr(v _SpecKey) *_SpecKey { return &v }

//The Key Intervals Specifications defined as SpecKeyInterval items in a list-container
type _SpecKeyIntervals []*_SpecKeyInterval

func _SpecKeyIntervalsPtr(v _SpecKeyIntervals) *_SpecKeyIntervals { return &v }

//The Cells for Update defined as UCellPlain items in a list-container
type _UCellsPlain []*_UCellPlain

func _UCellsPlainPtr(v _UCellsPlain) *_UCellsPlain { return &v }

//The Cells for Update for a Column Id defined as UCellsPlain items in a map-container by CID
type _UCCellsPlain map[int64]_UCellsPlain

func _UCCellsPlainPtr(v _UCCellsPlain) *_UCCellsPlain { return &v }

//The Cells for Update defined as UCellCounter items in a list-container
type _UCellsCounter []*_UCellCounter

func _UCellsCounterPtr(v _UCellsCounter) *_UCellsCounter { return &v }

//The Cells for Update for a Column Id defined as UCellsCounter items in a map-container by CID
type _UCCellsCounter map[int64]_UCellsCounter

func _UCCellsCounterPtr(v _UCCellsCounter) *_UCCellsCounter { return &v }

//The Serial Cell Value Fields defined as CellValueSerial items in a list-container
type _CellValuesSerial []*_CellValueSerial

func _CellValuesSerialPtr(v _CellValuesSerial) *_CellValuesSerial { return &v }

//The Serial Cell Value Fields defined as CellValueSerialOp items in a list-container
type _CellValuesSerialOp []*_CellValueSerialOp

func _CellValuesSerialOpPtr(v _CellValuesSerialOp) *_CellValuesSerialOp { return &v }

//The Cells for Update defined as UCellSerial items in a list-container
type _UCellsSerial []*_UCellSerial

func _UCellsSerialPtr(v _UCellsSerial) *_UCellsSerial { return &v }

//The Cells for Update for a Column Id defined as UCellsSerial items in a map-container by CID
type _UCCellsSerial map[int64]_UCellsSerial

func _UCCellsSerialPtr(v _UCCellsSerial) *_UCCellsSerial { return &v }

//A list-container of Plain Cells
type _CellsPlain []*_CellPlain

func _CellsPlainPtr(v _CellsPlain) *_CellsPlain { return &v }

//A list-container of Counter Cells
type _CellsCounter []*_CellCounter

func _CellsCounterPtr(v _CellsCounter) *_CellsCounter { return &v }

//A list-container of Serial Cells
type _CellsSerial []*_CellSerial

func _CellsSerialPtr(v _CellsSerial) *_CellsSerial { return &v }

//The Columns Cells for results on Columns of scan, defined as cCells items in a map-container by Column Name
type _CCells map[string]*_cCells

func _CCellsPtr(v _CCells) *_CCells { return &v }

//The Keys Cells for results on Key of scan, defined as kCells items in a list-container
type _KCells []*_kCells

func _KCellsPtr(v _KCells) *_KCells { return &v }

//The Compact Results, defined as CompactResult items in a list-container
type _CompactResults []*_CompactResult_

func _CompactResultsPtr(v _CompactResults) *_CompactResults { return &v }

// The SWC::Thrift::Exception a base for any Exceptions
// both for the Thrift-Protocol and SWC-DB Errors.
// 
// Attributes:
//  - _code: The corresponding Thrift-Procotol or SWC-DB Error Code
//  - _message: The message describing the error code
// 
type _Exception struct {
	_code int32 `thrift:"code,1" db:"code" json:"code"`
	_message string `thrift:"message,2" db:"message" json:"message"`
}

func New_Exception() *_Exception {
	return &_Exception{}
}



func (p *_Exception) Get_code() int32 {
	return p._code
}



func (p *_Exception) Get_message() string {
	return p._message
}

func (p *_Exception) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Exception) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._code = v
	}
	return nil
}

func (p *_Exception) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p._message = v
	}
	return nil
}

func (p *_Exception) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Exception"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Exception) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p._code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
	}
	return err
}

func (p *_Exception) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p._message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
	}
	return err
}

func (p *_Exception) Equals(other *_Exception) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._code != other._code { return false }
	if p._message != other._message { return false }
	return true
}

func (p *_Exception) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Exception(%+v)", *p)
}

func (p *_Exception) Error() string {
	return p.String()
}

func (_Exception) TExceptionType() thrift.TExceptionType {
	return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*_Exception)(nil)

func (p *_Exception) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Exception",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Exception)(nil)

func (p *_Exception) Validate() error {
	return nil
}

// The Schema Definition
// 
// Attributes:
//  - _cid: Column ID
//  - _col_name: Column Name
//  - _col_tags: Column Tags
//  - _col_seq: Column Key Sequence
//  - _col_type: Column Type
//  - _cell_versions: Cell Versions
//  - _cell_ttl: Cell Time to Live
//  - _blk_encoding: Block Encoding
//  - _blk_size: Block Size in Bytes
//  - _blk_cells: Number of Cells in Block
//  - _cs_replication: CellStore file Replication
//  - _cs_size: CellStore Size in Bytes
//  - _cs_max: Max CellStores in a Range
//  - _log_rollout_ratio: Write Fragment File on ratio reached
//  - _log_compact_cointervaling: Min. Cointervaling Fragments for Compaction
//  - _log_fragment_preload: Number of Fragment to Preload
//  - _compact_percent: Compact at percent reach
//  - _revision: Schema's revision/id
// 
type _Schema struct {
	_cid *int64 `thrift:"cid,1" db:"cid" json:"cid,omitempty"`
	_col_name *string `thrift:"col_name,2" db:"col_name" json:"col_name,omitempty"`
	_col_tags []string `thrift:"col_tags,3" db:"col_tags" json:"col_tags"`
	_col_seq *_KeySeq `thrift:"col_seq,4" db:"col_seq" json:"col_seq,omitempty"`
	_col_type *_ColumnType `thrift:"col_type,5" db:"col_type" json:"col_type,omitempty"`
	_cell_versions *int32 `thrift:"cell_versions,6" db:"cell_versions" json:"cell_versions,omitempty"`
	_cell_ttl *int32 `thrift:"cell_ttl,7" db:"cell_ttl" json:"cell_ttl,omitempty"`
	_blk_encoding *_EncodingType `thrift:"blk_encoding,8" db:"blk_encoding" json:"blk_encoding,omitempty"`
	_blk_size *int32 `thrift:"blk_size,9" db:"blk_size" json:"blk_size,omitempty"`
	_blk_cells *int32 `thrift:"blk_cells,10" db:"blk_cells" json:"blk_cells,omitempty"`
	_cs_replication *int8 `thrift:"cs_replication,11" db:"cs_replication" json:"cs_replication,omitempty"`
	_cs_size *int32 `thrift:"cs_size,12" db:"cs_size" json:"cs_size,omitempty"`
	_cs_max *int8 `thrift:"cs_max,13" db:"cs_max" json:"cs_max,omitempty"`
	_log_rollout_ratio *int8 `thrift:"log_rollout_ratio,14" db:"log_rollout_ratio" json:"log_rollout_ratio,omitempty"`
	_log_compact_cointervaling *int8 `thrift:"log_compact_cointervaling,15" db:"log_compact_cointervaling" json:"log_compact_cointervaling,omitempty"`
	_log_fragment_preload *int8 `thrift:"log_fragment_preload,16" db:"log_fragment_preload" json:"log_fragment_preload,omitempty"`
	_compact_percent *int8 `thrift:"compact_percent,17" db:"compact_percent" json:"compact_percent,omitempty"`
	_revision *int64 `thrift:"revision,18" db:"revision" json:"revision,omitempty"`
}

func New_Schema() *_Schema {
	return &_Schema{}
}

var _Schema__cid_DEFAULT int64

func (p *_Schema) Get_cid() int64 {
	if !p.IsSet_cid() {
		return _Schema__cid_DEFAULT
	}
	return *p._cid
}

var _Schema__col_name_DEFAULT string

func (p *_Schema) Get_col_name() string {
	if !p.IsSet_col_name() {
		return _Schema__col_name_DEFAULT
	}
	return *p._col_name
}



func (p *_Schema) Get_col_tags() []string {
	return p._col_tags
}

var _Schema__col_seq_DEFAULT _KeySeq

func (p *_Schema) Get_col_seq() _KeySeq {
	if !p.IsSet_col_seq() {
		return _Schema__col_seq_DEFAULT
	}
	return *p._col_seq
}

var _Schema__col_type_DEFAULT _ColumnType

func (p *_Schema) Get_col_type() _ColumnType {
	if !p.IsSet_col_type() {
		return _Schema__col_type_DEFAULT
	}
	return *p._col_type
}

var _Schema__cell_versions_DEFAULT int32

func (p *_Schema) Get_cell_versions() int32 {
	if !p.IsSet_cell_versions() {
		return _Schema__cell_versions_DEFAULT
	}
	return *p._cell_versions
}

var _Schema__cell_ttl_DEFAULT int32

func (p *_Schema) Get_cell_ttl() int32 {
	if !p.IsSet_cell_ttl() {
		return _Schema__cell_ttl_DEFAULT
	}
	return *p._cell_ttl
}

var _Schema__blk_encoding_DEFAULT _EncodingType

func (p *_Schema) Get_blk_encoding() _EncodingType {
	if !p.IsSet_blk_encoding() {
		return _Schema__blk_encoding_DEFAULT
	}
	return *p._blk_encoding
}

var _Schema__blk_size_DEFAULT int32

func (p *_Schema) Get_blk_size() int32 {
	if !p.IsSet_blk_size() {
		return _Schema__blk_size_DEFAULT
	}
	return *p._blk_size
}

var _Schema__blk_cells_DEFAULT int32

func (p *_Schema) Get_blk_cells() int32 {
	if !p.IsSet_blk_cells() {
		return _Schema__blk_cells_DEFAULT
	}
	return *p._blk_cells
}

var _Schema__cs_replication_DEFAULT int8

func (p *_Schema) Get_cs_replication() int8 {
	if !p.IsSet_cs_replication() {
		return _Schema__cs_replication_DEFAULT
	}
	return *p._cs_replication
}

var _Schema__cs_size_DEFAULT int32

func (p *_Schema) Get_cs_size() int32 {
	if !p.IsSet_cs_size() {
		return _Schema__cs_size_DEFAULT
	}
	return *p._cs_size
}

var _Schema__cs_max_DEFAULT int8

func (p *_Schema) Get_cs_max() int8 {
	if !p.IsSet_cs_max() {
		return _Schema__cs_max_DEFAULT
	}
	return *p._cs_max
}

var _Schema__log_rollout_ratio_DEFAULT int8

func (p *_Schema) Get_log_rollout_ratio() int8 {
	if !p.IsSet_log_rollout_ratio() {
		return _Schema__log_rollout_ratio_DEFAULT
	}
	return *p._log_rollout_ratio
}

var _Schema__log_compact_cointervaling_DEFAULT int8

func (p *_Schema) Get_log_compact_cointervaling() int8 {
	if !p.IsSet_log_compact_cointervaling() {
		return _Schema__log_compact_cointervaling_DEFAULT
	}
	return *p._log_compact_cointervaling
}

var _Schema__log_fragment_preload_DEFAULT int8

func (p *_Schema) Get_log_fragment_preload() int8 {
	if !p.IsSet_log_fragment_preload() {
		return _Schema__log_fragment_preload_DEFAULT
	}
	return *p._log_fragment_preload
}

var _Schema__compact_percent_DEFAULT int8

func (p *_Schema) Get_compact_percent() int8 {
	if !p.IsSet_compact_percent() {
		return _Schema__compact_percent_DEFAULT
	}
	return *p._compact_percent
}

var _Schema__revision_DEFAULT int64

func (p *_Schema) Get_revision() int64 {
	if !p.IsSet_revision() {
		return _Schema__revision_DEFAULT
	}
	return *p._revision
}

func (p *_Schema) IsSet_cid() bool {
	return p._cid != nil
}

func (p *_Schema) IsSet_col_name() bool {
	return p._col_name != nil
}

func (p *_Schema) IsSet_col_seq() bool {
	return p._col_seq != nil
}

func (p *_Schema) IsSet_col_type() bool {
	return p._col_type != nil
}

func (p *_Schema) IsSet_cell_versions() bool {
	return p._cell_versions != nil
}

func (p *_Schema) IsSet_cell_ttl() bool {
	return p._cell_ttl != nil
}

func (p *_Schema) IsSet_blk_encoding() bool {
	return p._blk_encoding != nil
}

func (p *_Schema) IsSet_blk_size() bool {
	return p._blk_size != nil
}

func (p *_Schema) IsSet_blk_cells() bool {
	return p._blk_cells != nil
}

func (p *_Schema) IsSet_cs_replication() bool {
	return p._cs_replication != nil
}

func (p *_Schema) IsSet_cs_size() bool {
	return p._cs_size != nil
}

func (p *_Schema) IsSet_cs_max() bool {
	return p._cs_max != nil
}

func (p *_Schema) IsSet_log_rollout_ratio() bool {
	return p._log_rollout_ratio != nil
}

func (p *_Schema) IsSet_log_compact_cointervaling() bool {
	return p._log_compact_cointervaling != nil
}

func (p *_Schema) IsSet_log_fragment_preload() bool {
	return p._log_fragment_preload != nil
}

func (p *_Schema) IsSet_compact_percent() bool {
	return p._compact_percent != nil
}

func (p *_Schema) IsSet_revision() bool {
	return p._revision != nil
}

func (p *_Schema) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField11(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField12(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField13(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField14(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 15:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField15(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 16:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField16(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 17:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField17(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 18:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField18(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Schema) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._cid = &v
	}
	return nil
}

func (p *_Schema) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p._col_name = &v
	}
	return nil
}

func (p *_Schema) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p._col_tags = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__elem0 = v
		}
		p._col_tags = append(p._col_tags, _elem0)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_Schema) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := _KeySeq(v)
		p._col_seq = &temp
	}
	return nil
}

func (p *_Schema) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := _ColumnType(v)
		p._col_type = &temp
	}
	return nil
}

func (p *_Schema) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p._cell_versions = &v
	}
	return nil
}

func (p *_Schema) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p._cell_ttl = &v
	}
	return nil
}

func (p *_Schema) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		temp := _EncodingType(v)
		p._blk_encoding = &temp
	}
	return nil
}

func (p *_Schema) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p._blk_size = &v
	}
	return nil
}

func (p *_Schema) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p._blk_cells = &v
	}
	return nil
}

func (p *_Schema) ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		temp := int8(v)
		p._cs_replication = &temp
	}
	return nil
}

func (p *_Schema) ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p._cs_size = &v
	}
	return nil
}

func (p *_Schema) ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		temp := int8(v)
		p._cs_max = &temp
	}
	return nil
}

func (p *_Schema) ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		temp := int8(v)
		p._log_rollout_ratio = &temp
	}
	return nil
}

func (p *_Schema) ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		temp := int8(v)
		p._log_compact_cointervaling = &temp
	}
	return nil
}

func (p *_Schema) ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		temp := int8(v)
		p._log_fragment_preload = &temp
	}
	return nil
}

func (p *_Schema) ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		temp := int8(v)
		p._compact_percent = &temp
	}
	return nil
}

func (p *_Schema) ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p._revision = &v
	}
	return nil
}

func (p *_Schema) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Schema"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
		if err := p.writeField6(ctx, oprot); err != nil { return err }
		if err := p.writeField7(ctx, oprot); err != nil { return err }
		if err := p.writeField8(ctx, oprot); err != nil { return err }
		if err := p.writeField9(ctx, oprot); err != nil { return err }
		if err := p.writeField10(ctx, oprot); err != nil { return err }
		if err := p.writeField11(ctx, oprot); err != nil { return err }
		if err := p.writeField12(ctx, oprot); err != nil { return err }
		if err := p.writeField13(ctx, oprot); err != nil { return err }
		if err := p.writeField14(ctx, oprot); err != nil { return err }
		if err := p.writeField15(ctx, oprot); err != nil { return err }
		if err := p.writeField16(ctx, oprot); err != nil { return err }
		if err := p.writeField17(ctx, oprot); err != nil { return err }
		if err := p.writeField18(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Schema) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_cid() {
		if err := oprot.WriteFieldBegin(ctx, "cid", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cid: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p._cid)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.cid (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cid: ", p), err)
		}
	}
	return err
}

func (p *_Schema) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_col_name() {
		if err := oprot.WriteFieldBegin(ctx, "col_name", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:col_name: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p._col_name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.col_name (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:col_name: ", p), err)
		}
	}
	return err
}

func (p *_Schema) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "col_tags", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:col_tags: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p._col_tags)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._col_tags {
		if err := oprot.WriteString(ctx, string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:col_tags: ", p), err)
	}
	return err
}

func (p *_Schema) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_col_seq() {
		if err := oprot.WriteFieldBegin(ctx, "col_seq", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:col_seq: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p._col_seq)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.col_seq (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:col_seq: ", p), err)
		}
	}
	return err
}

func (p *_Schema) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_col_type() {
		if err := oprot.WriteFieldBegin(ctx, "col_type", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:col_type: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p._col_type)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.col_type (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:col_type: ", p), err)
		}
	}
	return err
}

func (p *_Schema) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_cell_versions() {
		if err := oprot.WriteFieldBegin(ctx, "cell_versions", thrift.I32, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:cell_versions: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p._cell_versions)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.cell_versions (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:cell_versions: ", p), err)
		}
	}
	return err
}

func (p *_Schema) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_cell_ttl() {
		if err := oprot.WriteFieldBegin(ctx, "cell_ttl", thrift.I32, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:cell_ttl: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p._cell_ttl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.cell_ttl (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:cell_ttl: ", p), err)
		}
	}
	return err
}

func (p *_Schema) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_blk_encoding() {
		if err := oprot.WriteFieldBegin(ctx, "blk_encoding", thrift.I32, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:blk_encoding: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p._blk_encoding)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.blk_encoding (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:blk_encoding: ", p), err)
		}
	}
	return err
}

func (p *_Schema) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_blk_size() {
		if err := oprot.WriteFieldBegin(ctx, "blk_size", thrift.I32, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:blk_size: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p._blk_size)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.blk_size (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:blk_size: ", p), err)
		}
	}
	return err
}

func (p *_Schema) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_blk_cells() {
		if err := oprot.WriteFieldBegin(ctx, "blk_cells", thrift.I32, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:blk_cells: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p._blk_cells)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.blk_cells (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:blk_cells: ", p), err)
		}
	}
	return err
}

func (p *_Schema) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_cs_replication() {
		if err := oprot.WriteFieldBegin(ctx, "cs_replication", thrift.BYTE, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:cs_replication: ", p), err)
		}
		if err := oprot.WriteByte(ctx, int8(*p._cs_replication)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.cs_replication (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:cs_replication: ", p), err)
		}
	}
	return err
}

func (p *_Schema) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_cs_size() {
		if err := oprot.WriteFieldBegin(ctx, "cs_size", thrift.I32, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:cs_size: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p._cs_size)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.cs_size (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:cs_size: ", p), err)
		}
	}
	return err
}

func (p *_Schema) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_cs_max() {
		if err := oprot.WriteFieldBegin(ctx, "cs_max", thrift.BYTE, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:cs_max: ", p), err)
		}
		if err := oprot.WriteByte(ctx, int8(*p._cs_max)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.cs_max (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:cs_max: ", p), err)
		}
	}
	return err
}

func (p *_Schema) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_log_rollout_ratio() {
		if err := oprot.WriteFieldBegin(ctx, "log_rollout_ratio", thrift.BYTE, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:log_rollout_ratio: ", p), err)
		}
		if err := oprot.WriteByte(ctx, int8(*p._log_rollout_ratio)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.log_rollout_ratio (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:log_rollout_ratio: ", p), err)
		}
	}
	return err
}

func (p *_Schema) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_log_compact_cointervaling() {
		if err := oprot.WriteFieldBegin(ctx, "log_compact_cointervaling", thrift.BYTE, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:log_compact_cointervaling: ", p), err)
		}
		if err := oprot.WriteByte(ctx, int8(*p._log_compact_cointervaling)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.log_compact_cointervaling (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:log_compact_cointervaling: ", p), err)
		}
	}
	return err
}

func (p *_Schema) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_log_fragment_preload() {
		if err := oprot.WriteFieldBegin(ctx, "log_fragment_preload", thrift.BYTE, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:log_fragment_preload: ", p), err)
		}
		if err := oprot.WriteByte(ctx, int8(*p._log_fragment_preload)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.log_fragment_preload (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:log_fragment_preload: ", p), err)
		}
	}
	return err
}

func (p *_Schema) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_compact_percent() {
		if err := oprot.WriteFieldBegin(ctx, "compact_percent", thrift.BYTE, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:compact_percent: ", p), err)
		}
		if err := oprot.WriteByte(ctx, int8(*p._compact_percent)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.compact_percent (17) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:compact_percent: ", p), err)
		}
	}
	return err
}

func (p *_Schema) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_revision() {
		if err := oprot.WriteFieldBegin(ctx, "revision", thrift.I64, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:revision: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p._revision)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.revision (18) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:revision: ", p), err)
		}
	}
	return err
}

func (p *_Schema) Equals(other *_Schema) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._cid != other._cid {
		if p._cid == nil || other._cid == nil {
			return false
		}
		if (*p._cid) != (*other._cid) { return false }
	}
	if p._col_name != other._col_name {
		if p._col_name == nil || other._col_name == nil {
			return false
		}
		if (*p._col_name) != (*other._col_name) { return false }
	}
	if len(p._col_tags) != len(other._col_tags) { return false }
	for i, _tgt := range p._col_tags {
		_src1 := other._col_tags[i]
		if _tgt != _src1 { return false }
	}
	if p._col_seq != other._col_seq {
		if p._col_seq == nil || other._col_seq == nil {
			return false
		}
		if (*p._col_seq) != (*other._col_seq) { return false }
	}
	if p._col_type != other._col_type {
		if p._col_type == nil || other._col_type == nil {
			return false
		}
		if (*p._col_type) != (*other._col_type) { return false }
	}
	if p._cell_versions != other._cell_versions {
		if p._cell_versions == nil || other._cell_versions == nil {
			return false
		}
		if (*p._cell_versions) != (*other._cell_versions) { return false }
	}
	if p._cell_ttl != other._cell_ttl {
		if p._cell_ttl == nil || other._cell_ttl == nil {
			return false
		}
		if (*p._cell_ttl) != (*other._cell_ttl) { return false }
	}
	if p._blk_encoding != other._blk_encoding {
		if p._blk_encoding == nil || other._blk_encoding == nil {
			return false
		}
		if (*p._blk_encoding) != (*other._blk_encoding) { return false }
	}
	if p._blk_size != other._blk_size {
		if p._blk_size == nil || other._blk_size == nil {
			return false
		}
		if (*p._blk_size) != (*other._blk_size) { return false }
	}
	if p._blk_cells != other._blk_cells {
		if p._blk_cells == nil || other._blk_cells == nil {
			return false
		}
		if (*p._blk_cells) != (*other._blk_cells) { return false }
	}
	if p._cs_replication != other._cs_replication {
		if p._cs_replication == nil || other._cs_replication == nil {
			return false
		}
		if (*p._cs_replication) != (*other._cs_replication) { return false }
	}
	if p._cs_size != other._cs_size {
		if p._cs_size == nil || other._cs_size == nil {
			return false
		}
		if (*p._cs_size) != (*other._cs_size) { return false }
	}
	if p._cs_max != other._cs_max {
		if p._cs_max == nil || other._cs_max == nil {
			return false
		}
		if (*p._cs_max) != (*other._cs_max) { return false }
	}
	if p._log_rollout_ratio != other._log_rollout_ratio {
		if p._log_rollout_ratio == nil || other._log_rollout_ratio == nil {
			return false
		}
		if (*p._log_rollout_ratio) != (*other._log_rollout_ratio) { return false }
	}
	if p._log_compact_cointervaling != other._log_compact_cointervaling {
		if p._log_compact_cointervaling == nil || other._log_compact_cointervaling == nil {
			return false
		}
		if (*p._log_compact_cointervaling) != (*other._log_compact_cointervaling) { return false }
	}
	if p._log_fragment_preload != other._log_fragment_preload {
		if p._log_fragment_preload == nil || other._log_fragment_preload == nil {
			return false
		}
		if (*p._log_fragment_preload) != (*other._log_fragment_preload) { return false }
	}
	if p._compact_percent != other._compact_percent {
		if p._compact_percent == nil || other._compact_percent == nil {
			return false
		}
		if (*p._compact_percent) != (*other._compact_percent) { return false }
	}
	if p._revision != other._revision {
		if p._revision == nil || other._revision == nil {
			return false
		}
		if (*p._revision) != (*other._revision) { return false }
	}
	return true
}

func (p *_Schema) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Schema(%+v)", *p)
}

func (p *_Schema) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Schema",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Schema)(nil)

func (p *_Schema) Validate() error {
	return nil
}

// The Schema matching Pattern
// 
// Attributes:
//  - _comp: Logical comparator to Apply
//  - _value: The patern value to match against
// 
type _SchemaPattern struct {
	_comp _Comp `thrift:"comp,1" db:"comp" json:"comp"`
	_value string `thrift:"value,2" db:"value" json:"value"`
}

func New_SchemaPattern() *_SchemaPattern {
	return &_SchemaPattern{}
}



func (p *_SchemaPattern) Get_comp() _Comp {
	return p._comp
}



func (p *_SchemaPattern) Get_value() string {
	return p._value
}

func (p *_SchemaPattern) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_SchemaPattern) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := _Comp(v)
		p._comp = temp
	}
	return nil
}

func (p *_SchemaPattern) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p._value = v
	}
	return nil
}

func (p *_SchemaPattern) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SchemaPattern"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_SchemaPattern) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "comp", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:comp: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p._comp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.comp (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:comp: ", p), err)
	}
	return err
}

func (p *_SchemaPattern) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p._value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err)
	}
	return err
}

func (p *_SchemaPattern) Equals(other *_SchemaPattern) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._comp != other._comp { return false }
	if p._value != other._value { return false }
	return true
}

func (p *_SchemaPattern) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_SchemaPattern(%+v)", *p)
}

func (p *_SchemaPattern) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._SchemaPattern",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_SchemaPattern)(nil)

func (p *_SchemaPattern) Validate() error {
	return nil
}

// The Schema Tags patterns for the SchemaPatterns
// 
// Attributes:
//  - _comp: Logical comparator to Apply, unsupported PF, RE and Vol. kind
//  - _values: The tags patterns to match against schema's column tags
// 
type _SchemaTagsPatterns struct {
	_comp _Comp `thrift:"comp,1" db:"comp" json:"comp"`
	_values []*_SchemaPattern `thrift:"values,2" db:"values" json:"values"`
}

func New_SchemaTagsPatterns() *_SchemaTagsPatterns {
	return &_SchemaTagsPatterns{}
}



func (p *_SchemaTagsPatterns) Get_comp() _Comp {
	return p._comp
}



func (p *_SchemaTagsPatterns) Get_values() []*_SchemaPattern {
	return p._values
}

func (p *_SchemaTagsPatterns) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_SchemaTagsPatterns) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := _Comp(v)
		p._comp = temp
	}
	return nil
}

func (p *_SchemaTagsPatterns) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*_SchemaPattern, 0, size)
	p._values = tSlice
	for i := 0; i < size; i++ {
		__elem2 := &_SchemaPattern{}
		if err := __elem2.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem2), err)
		}
		p._values = append(p._values, _elem2)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SchemaTagsPatterns) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SchemaTagsPatterns"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_SchemaTagsPatterns) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "comp", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:comp: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p._comp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.comp (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:comp: ", p), err)
	}
	return err
}

func (p *_SchemaTagsPatterns) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "values", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:values: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._values)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._values {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:values: ", p), err)
	}
	return err
}

func (p *_SchemaTagsPatterns) Equals(other *_SchemaTagsPatterns) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._comp != other._comp { return false }
	if len(p._values) != len(other._values) { return false }
	for i, _tgt := range p._values {
		_src3 := other._values[i]
		if !_tgt.Equals(_src3) { return false }
	}
	return true
}

func (p *_SchemaTagsPatterns) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_SchemaTagsPatterns(%+v)", *p)
}

func (p *_SchemaTagsPatterns) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._SchemaTagsPatterns",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_SchemaTagsPatterns)(nil)

func (p *_SchemaTagsPatterns) Validate() error {
	return nil
}

// The Schema Patterns for the SpecSchemas
// 
// Attributes:
//  - _names: The Schema patterns for selecting by Column Name
//  - _tags: The Schema patterns for selecting by Column Tags
// 
type _SchemaPatterns struct {
	_names []*_SchemaPattern `thrift:"names,1" db:"names" json:"names"`
	_tags *_SchemaTagsPatterns `thrift:"tags,2" db:"tags" json:"tags"`
}

func New_SchemaPatterns() *_SchemaPatterns {
	return &_SchemaPatterns{}
}



func (p *_SchemaPatterns) Get_names() []*_SchemaPattern {
	return p._names
}

var _SchemaPatterns__tags_DEFAULT *_SchemaTagsPatterns

func (p *_SchemaPatterns) Get_tags() *_SchemaTagsPatterns {
	if !p.IsSet_tags() {
		return _SchemaPatterns__tags_DEFAULT
	}
	return p._tags
}

func (p *_SchemaPatterns) IsSet_tags() bool {
	return p._tags != nil
}

func (p *_SchemaPatterns) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_SchemaPatterns) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*_SchemaPattern, 0, size)
	p._names = tSlice
	for i := 0; i < size; i++ {
		__elem4 := &_SchemaPattern{}
		if err := __elem4.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem4), err)
		}
		p._names = append(p._names, _elem4)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SchemaPatterns) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p._tags = &_SchemaTagsPatterns{}
	if err := p._tags.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._tags), err)
	}
	return nil
}

func (p *_SchemaPatterns) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SchemaPatterns"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_SchemaPatterns) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "names", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:names: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._names)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._names {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:names: ", p), err)
	}
	return err
}

func (p *_SchemaPatterns) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "tags", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tags: ", p), err)
	}
	if err := p._tags.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._tags), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tags: ", p), err)
	}
	return err
}

func (p *_SchemaPatterns) Equals(other *_SchemaPatterns) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p._names) != len(other._names) { return false }
	for i, _tgt := range p._names {
		_src5 := other._names[i]
		if !_tgt.Equals(_src5) { return false }
	}
	if !p._tags.Equals(other._tags) { return false }
	return true
}

func (p *_SchemaPatterns) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_SchemaPatterns(%+v)", *p)
}

func (p *_SchemaPatterns) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._SchemaPatterns",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_SchemaPatterns)(nil)

func (p *_SchemaPatterns) Validate() error {
	return nil
}

// The Specs for Schemas for using with list_columns or compact_columns
// 
// Attributes:
//  - _cids: The Column IDs
//  - _names: The Column Names
//  - _patterns: The Schema's selector patterns
// 
type _SpecSchemas struct {
	_cids []int64 `thrift:"cids,1" db:"cids" json:"cids"`
	_names []string `thrift:"names,2" db:"names" json:"names"`
	_patterns *_SchemaPatterns `thrift:"patterns,3" db:"patterns" json:"patterns"`
}

func New_SpecSchemas() *_SpecSchemas {
	return &_SpecSchemas{}
}



func (p *_SpecSchemas) Get_cids() []int64 {
	return p._cids
}



func (p *_SpecSchemas) Get_names() []string {
	return p._names
}

var _SpecSchemas__patterns_DEFAULT *_SchemaPatterns

func (p *_SpecSchemas) Get_patterns() *_SchemaPatterns {
	if !p.IsSet_patterns() {
		return _SpecSchemas__patterns_DEFAULT
	}
	return p._patterns
}

func (p *_SpecSchemas) IsSet_patterns() bool {
	return p._patterns != nil
}

func (p *_SpecSchemas) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_SpecSchemas) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p._cids = tSlice
	for i := 0; i < size; i++ {
		var _elem6 int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__elem6 = v
		}
		p._cids = append(p._cids, _elem6)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SpecSchemas) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p._names = tSlice
	for i := 0; i < size; i++ {
		var _elem7 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__elem7 = v
		}
		p._names = append(p._names, _elem7)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SpecSchemas) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p._patterns = &_SchemaPatterns{}
	if err := p._patterns.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._patterns), err)
	}
	return nil
}

func (p *_SpecSchemas) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SpecSchemas"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_SpecSchemas) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "cids", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cids: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.I64, len(p._cids)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._cids {
		if err := oprot.WriteI64(ctx, int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cids: ", p), err)
	}
	return err
}

func (p *_SpecSchemas) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "names", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:names: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p._names)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._names {
		if err := oprot.WriteString(ctx, string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:names: ", p), err)
	}
	return err
}

func (p *_SpecSchemas) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "patterns", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patterns: ", p), err)
	}
	if err := p._patterns.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._patterns), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patterns: ", p), err)
	}
	return err
}

func (p *_SpecSchemas) Equals(other *_SpecSchemas) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p._cids) != len(other._cids) { return false }
	for i, _tgt := range p._cids {
		_src8 := other._cids[i]
		if _tgt != _src8 { return false }
	}
	if len(p._names) != len(other._names) { return false }
	for i, _tgt := range p._names {
		_src9 := other._names[i]
		if _tgt != _src9 { return false }
	}
	if !p._patterns.Equals(other._patterns) { return false }
	return true
}

func (p *_SpecSchemas) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_SpecSchemas(%+v)", *p)
}

func (p *_SpecSchemas) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._SpecSchemas",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_SpecSchemas)(nil)

func (p *_SpecSchemas) Validate() error {
	return nil
}

// The Scan Specifications Flags
// 
// Attributes:
//  - _limit: Limit to this number of cells
//  - _offset: Scan from this number of cells Offset on matching Cell-Interval
//  - _max_versions: Select only this number of Versions of a given Cell-Key
//  - _max_buffer: return results with reach of this Buffer size in bytes
//  - _options: The options bit by SpecFlagsOpt
// 
type _SpecFlags struct {
	_limit *int64 `thrift:"limit,1" db:"limit" json:"limit,omitempty"`
	_offset *int64 `thrift:"offset,2" db:"offset" json:"offset,omitempty"`
	_max_versions *int32 `thrift:"max_versions,3" db:"max_versions" json:"max_versions,omitempty"`
	_max_buffer *int32 `thrift:"max_buffer,4" db:"max_buffer" json:"max_buffer,omitempty"`
	_options *int8 `thrift:"options,5" db:"options" json:"options,omitempty"`
}

func New_SpecFlags() *_SpecFlags {
	return &_SpecFlags{}
}

var _SpecFlags__limit_DEFAULT int64

func (p *_SpecFlags) Get_limit() int64 {
	if !p.IsSet_limit() {
		return _SpecFlags__limit_DEFAULT
	}
	return *p._limit
}

var _SpecFlags__offset_DEFAULT int64

func (p *_SpecFlags) Get_offset() int64 {
	if !p.IsSet_offset() {
		return _SpecFlags__offset_DEFAULT
	}
	return *p._offset
}

var _SpecFlags__max_versions_DEFAULT int32

func (p *_SpecFlags) Get_max_versions() int32 {
	if !p.IsSet_max_versions() {
		return _SpecFlags__max_versions_DEFAULT
	}
	return *p._max_versions
}

var _SpecFlags__max_buffer_DEFAULT int32

func (p *_SpecFlags) Get_max_buffer() int32 {
	if !p.IsSet_max_buffer() {
		return _SpecFlags__max_buffer_DEFAULT
	}
	return *p._max_buffer
}

var _SpecFlags__options_DEFAULT int8

func (p *_SpecFlags) Get_options() int8 {
	if !p.IsSet_options() {
		return _SpecFlags__options_DEFAULT
	}
	return *p._options
}

func (p *_SpecFlags) IsSet_limit() bool {
	return p._limit != nil
}

func (p *_SpecFlags) IsSet_offset() bool {
	return p._offset != nil
}

func (p *_SpecFlags) IsSet_max_versions() bool {
	return p._max_versions != nil
}

func (p *_SpecFlags) IsSet_max_buffer() bool {
	return p._max_buffer != nil
}

func (p *_SpecFlags) IsSet_options() bool {
	return p._options != nil
}

func (p *_SpecFlags) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_SpecFlags) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._limit = &v
	}
	return nil
}

func (p *_SpecFlags) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p._offset = &v
	}
	return nil
}

func (p *_SpecFlags) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p._max_versions = &v
	}
	return nil
}

func (p *_SpecFlags) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p._max_buffer = &v
	}
	return nil
}

func (p *_SpecFlags) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := int8(v)
		p._options = &temp
	}
	return nil
}

func (p *_SpecFlags) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SpecFlags"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_SpecFlags) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_limit() {
		if err := oprot.WriteFieldBegin(ctx, "limit", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:limit: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p._limit)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.limit (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:limit: ", p), err)
		}
	}
	return err
}

func (p *_SpecFlags) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_offset() {
		if err := oprot.WriteFieldBegin(ctx, "offset", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:offset: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p._offset)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.offset (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:offset: ", p), err)
		}
	}
	return err
}

func (p *_SpecFlags) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_max_versions() {
		if err := oprot.WriteFieldBegin(ctx, "max_versions", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max_versions: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p._max_versions)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.max_versions (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max_versions: ", p), err)
		}
	}
	return err
}

func (p *_SpecFlags) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_max_buffer() {
		if err := oprot.WriteFieldBegin(ctx, "max_buffer", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:max_buffer: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p._max_buffer)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.max_buffer (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:max_buffer: ", p), err)
		}
	}
	return err
}

func (p *_SpecFlags) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_options() {
		if err := oprot.WriteFieldBegin(ctx, "options", thrift.BYTE, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:options: ", p), err)
		}
		if err := oprot.WriteByte(ctx, int8(*p._options)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.options (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:options: ", p), err)
		}
	}
	return err
}

func (p *_SpecFlags) Equals(other *_SpecFlags) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._limit != other._limit {
		if p._limit == nil || other._limit == nil {
			return false
		}
		if (*p._limit) != (*other._limit) { return false }
	}
	if p._offset != other._offset {
		if p._offset == nil || other._offset == nil {
			return false
		}
		if (*p._offset) != (*other._offset) { return false }
	}
	if p._max_versions != other._max_versions {
		if p._max_versions == nil || other._max_versions == nil {
			return false
		}
		if (*p._max_versions) != (*other._max_versions) { return false }
	}
	if p._max_buffer != other._max_buffer {
		if p._max_buffer == nil || other._max_buffer == nil {
			return false
		}
		if (*p._max_buffer) != (*other._max_buffer) { return false }
	}
	if p._options != other._options {
		if p._options == nil || other._options == nil {
			return false
		}
		if (*p._options) != (*other._options) { return false }
	}
	return true
}

func (p *_SpecFlags) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_SpecFlags(%+v)", *p)
}

func (p *_SpecFlags) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._SpecFlags",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_SpecFlags)(nil)

func (p *_SpecFlags) Validate() error {
	return nil
}

// Attributes:
//  - _op: The Operation of update
//  - _pos: The position/index of INSERT and OVERWRITE update operations
// 
type _SpecUpdateOP struct {
	_op _UpdateOP `thrift:"op,1" db:"op" json:"op"`
	_pos *int32 `thrift:"pos,2" db:"pos" json:"pos,omitempty"`
}

func New_SpecUpdateOP() *_SpecUpdateOP {
	return &_SpecUpdateOP{}
}



func (p *_SpecUpdateOP) Get_op() _UpdateOP {
	return p._op
}

var _SpecUpdateOP__pos_DEFAULT int32

func (p *_SpecUpdateOP) Get_pos() int32 {
	if !p.IsSet_pos() {
		return _SpecUpdateOP__pos_DEFAULT
	}
	return *p._pos
}

func (p *_SpecUpdateOP) IsSet_pos() bool {
	return p._pos != nil
}

func (p *_SpecUpdateOP) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_SpecUpdateOP) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := _UpdateOP(v)
		p._op = temp
	}
	return nil
}

func (p *_SpecUpdateOP) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p._pos = &v
	}
	return nil
}

func (p *_SpecUpdateOP) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SpecUpdateOP"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_SpecUpdateOP) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "op", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:op: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p._op)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.op (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:op: ", p), err)
	}
	return err
}

func (p *_SpecUpdateOP) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_pos() {
		if err := oprot.WriteFieldBegin(ctx, "pos", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pos: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p._pos)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pos (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pos: ", p), err)
		}
	}
	return err
}

func (p *_SpecUpdateOP) Equals(other *_SpecUpdateOP) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._op != other._op { return false }
	if p._pos != other._pos {
		if p._pos == nil || other._pos == nil {
			return false
		}
		if (*p._pos) != (*other._pos) { return false }
	}
	return true
}

func (p *_SpecUpdateOP) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_SpecUpdateOP(%+v)", *p)
}

func (p *_SpecUpdateOP) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._SpecUpdateOP",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_SpecUpdateOP)(nil)

func (p *_SpecUpdateOP) Validate() error {
	return nil
}

// The Value specs for an Updating Interval of 'updating' in SpecIntervalPlain
// 
// Attributes:
//  - _v: The bytes value for the updated cell
//  - _ts: The timestamp for the updated cell NULL: MIN_INT64+1, AUTO:MIN_INT64+2 (or not-set)
//  - _encoder: Optionally the Cell Value Encoding Type: ZLIB/SNAPPY/ZSTD
//  - _update_op: Optionally the operaton of value update
// 
type _SpecIntervalUpdatePlain struct {
	_v []byte `thrift:"v,1" db:"v" json:"v"`
	_ts *int64 `thrift:"ts,2" db:"ts" json:"ts,omitempty"`
	_encoder *_EncodingType `thrift:"encoder,3" db:"encoder" json:"encoder,omitempty"`
	_update_op *_SpecUpdateOP `thrift:"update_op,4" db:"update_op" json:"update_op,omitempty"`
}

func New_SpecIntervalUpdatePlain() *_SpecIntervalUpdatePlain {
	return &_SpecIntervalUpdatePlain{}
}



func (p *_SpecIntervalUpdatePlain) Get_v() []byte {
	return p._v
}

var _SpecIntervalUpdatePlain__ts_DEFAULT int64

func (p *_SpecIntervalUpdatePlain) Get_ts() int64 {
	if !p.IsSet_ts() {
		return _SpecIntervalUpdatePlain__ts_DEFAULT
	}
	return *p._ts
}

var _SpecIntervalUpdatePlain__encoder_DEFAULT _EncodingType

func (p *_SpecIntervalUpdatePlain) Get_encoder() _EncodingType {
	if !p.IsSet_encoder() {
		return _SpecIntervalUpdatePlain__encoder_DEFAULT
	}
	return *p._encoder
}

var _SpecIntervalUpdatePlain__update_op_DEFAULT *_SpecUpdateOP

func (p *_SpecIntervalUpdatePlain) Get_update_op() *_SpecUpdateOP {
	if !p.IsSet_update_op() {
		return _SpecIntervalUpdatePlain__update_op_DEFAULT
	}
	return p._update_op
}

func (p *_SpecIntervalUpdatePlain) IsSet_ts() bool {
	return p._ts != nil
}

func (p *_SpecIntervalUpdatePlain) IsSet_encoder() bool {
	return p._encoder != nil
}

func (p *_SpecIntervalUpdatePlain) IsSet_update_op() bool {
	return p._update_op != nil
}

func (p *_SpecIntervalUpdatePlain) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_SpecIntervalUpdatePlain) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._v = v
	}
	return nil
}

func (p *_SpecIntervalUpdatePlain) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p._ts = &v
	}
	return nil
}

func (p *_SpecIntervalUpdatePlain) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := _EncodingType(v)
		p._encoder = &temp
	}
	return nil
}

func (p *_SpecIntervalUpdatePlain) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	p._update_op = &_SpecUpdateOP{}
	if err := p._update_op.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._update_op), err)
	}
	return nil
}

func (p *_SpecIntervalUpdatePlain) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SpecIntervalUpdatePlain"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_SpecIntervalUpdatePlain) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:v: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p._v); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.v (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:v: ", p), err)
	}
	return err
}

func (p *_SpecIntervalUpdatePlain) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_ts() {
		if err := oprot.WriteFieldBegin(ctx, "ts", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ts: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p._ts)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ts (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ts: ", p), err)
		}
	}
	return err
}

func (p *_SpecIntervalUpdatePlain) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_encoder() {
		if err := oprot.WriteFieldBegin(ctx, "encoder", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:encoder: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p._encoder)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.encoder (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:encoder: ", p), err)
		}
	}
	return err
}

func (p *_SpecIntervalUpdatePlain) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_update_op() {
		if err := oprot.WriteFieldBegin(ctx, "update_op", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:update_op: ", p), err)
		}
		if err := p._update_op.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._update_op), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:update_op: ", p), err)
		}
	}
	return err
}

func (p *_SpecIntervalUpdatePlain) Equals(other *_SpecIntervalUpdatePlain) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if bytes.Compare(p._v, other._v) != 0 { return false }
	if p._ts != other._ts {
		if p._ts == nil || other._ts == nil {
			return false
		}
		if (*p._ts) != (*other._ts) { return false }
	}
	if p._encoder != other._encoder {
		if p._encoder == nil || other._encoder == nil {
			return false
		}
		if (*p._encoder) != (*other._encoder) { return false }
	}
	if !p._update_op.Equals(other._update_op) { return false }
	return true
}

func (p *_SpecIntervalUpdatePlain) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_SpecIntervalUpdatePlain(%+v)", *p)
}

func (p *_SpecIntervalUpdatePlain) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._SpecIntervalUpdatePlain",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_SpecIntervalUpdatePlain)(nil)

func (p *_SpecIntervalUpdatePlain) Validate() error {
	return nil
}

// The Value specs for an Updating Interval of 'updating' in SpecIntervalCounter
// 
// Attributes:
//  - _v: The int64 value for the updated cell
//  - _op: The Opration pf Counter, available: COUNTER_OP_EQUAL
//  - _ts: The timestamp for the updated cell NULL: MIN_INT64+1, AUTO:MIN_INT64+2 (or not-set)
//  - _update_op: Optionally the operaton of value update
// 
type _SpecIntervalUpdateCounter struct {
	_v int64 `thrift:"v,1" db:"v" json:"v"`
	_op int64 `thrift:"op,2" db:"op" json:"op"`
	_ts *int64 `thrift:"ts,3" db:"ts" json:"ts,omitempty"`
	_update_op *_SpecUpdateOP `thrift:"update_op,4" db:"update_op" json:"update_op,omitempty"`
}

func New_SpecIntervalUpdateCounter() *_SpecIntervalUpdateCounter {
	return &_SpecIntervalUpdateCounter{}
}



func (p *_SpecIntervalUpdateCounter) Get_v() int64 {
	return p._v
}



func (p *_SpecIntervalUpdateCounter) Get_op() int64 {
	return p._op
}

var _SpecIntervalUpdateCounter__ts_DEFAULT int64

func (p *_SpecIntervalUpdateCounter) Get_ts() int64 {
	if !p.IsSet_ts() {
		return _SpecIntervalUpdateCounter__ts_DEFAULT
	}
	return *p._ts
}

var _SpecIntervalUpdateCounter__update_op_DEFAULT *_SpecUpdateOP

func (p *_SpecIntervalUpdateCounter) Get_update_op() *_SpecUpdateOP {
	if !p.IsSet_update_op() {
		return _SpecIntervalUpdateCounter__update_op_DEFAULT
	}
	return p._update_op
}

func (p *_SpecIntervalUpdateCounter) IsSet_ts() bool {
	return p._ts != nil
}

func (p *_SpecIntervalUpdateCounter) IsSet_update_op() bool {
	return p._update_op != nil
}

func (p *_SpecIntervalUpdateCounter) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_SpecIntervalUpdateCounter) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._v = v
	}
	return nil
}

func (p *_SpecIntervalUpdateCounter) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p._op = v
	}
	return nil
}

func (p *_SpecIntervalUpdateCounter) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p._ts = &v
	}
	return nil
}

func (p *_SpecIntervalUpdateCounter) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	p._update_op = &_SpecUpdateOP{}
	if err := p._update_op.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._update_op), err)
	}
	return nil
}

func (p *_SpecIntervalUpdateCounter) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SpecIntervalUpdateCounter"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_SpecIntervalUpdateCounter) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:v: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._v)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.v (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:v: ", p), err)
	}
	return err
}

func (p *_SpecIntervalUpdateCounter) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "op", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:op: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._op)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.op (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:op: ", p), err)
	}
	return err
}

func (p *_SpecIntervalUpdateCounter) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_ts() {
		if err := oprot.WriteFieldBegin(ctx, "ts", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ts: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p._ts)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ts (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ts: ", p), err)
		}
	}
	return err
}

func (p *_SpecIntervalUpdateCounter) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_update_op() {
		if err := oprot.WriteFieldBegin(ctx, "update_op", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:update_op: ", p), err)
		}
		if err := p._update_op.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._update_op), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:update_op: ", p), err)
		}
	}
	return err
}

func (p *_SpecIntervalUpdateCounter) Equals(other *_SpecIntervalUpdateCounter) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._v != other._v { return false }
	if p._op != other._op { return false }
	if p._ts != other._ts {
		if p._ts == nil || other._ts == nil {
			return false
		}
		if (*p._ts) != (*other._ts) { return false }
	}
	if !p._update_op.Equals(other._update_op) { return false }
	return true
}

func (p *_SpecIntervalUpdateCounter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_SpecIntervalUpdateCounter(%+v)", *p)
}

func (p *_SpecIntervalUpdateCounter) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._SpecIntervalUpdateCounter",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_SpecIntervalUpdateCounter)(nil)

func (p *_SpecIntervalUpdateCounter) Validate() error {
	return nil
}

// The Value specs for an Updating Interval of 'updating' in SpecIntervalSerial
// 
// Attributes:
//  - _ts: The timestamp for the updated cell NULL: MIN_INT64-1, AUTO:MIN_INT64-1
//  - _v: The values of serial-fields for the updated cell
//  - _v_op: The values of serial-fields for the the SERIAL operation update
//  - _encoder: Optionally the Cell Value Encoding Type: ZLIB/SNAPPY/ZSTD
//  - _update_op: Optionally the operaton of value update
// 
type _SpecIntervalUpdateSerial struct {
	_ts int64 `thrift:"ts,1" db:"ts" json:"ts"`
	_v []*_CellValueSerial `thrift:"v,2" db:"v" json:"v"`
	_v_op []*_CellValueSerialOp `thrift:"v_op,3" db:"v_op" json:"v_op"`
	_encoder *_EncodingType `thrift:"encoder,4" db:"encoder" json:"encoder,omitempty"`
	_update_op *_SpecUpdateOP `thrift:"update_op,5" db:"update_op" json:"update_op,omitempty"`
}

func New_SpecIntervalUpdateSerial() *_SpecIntervalUpdateSerial {
	return &_SpecIntervalUpdateSerial{}
}



func (p *_SpecIntervalUpdateSerial) Get_ts() int64 {
	return p._ts
}



func (p *_SpecIntervalUpdateSerial) Get_v() []*_CellValueSerial {
	return p._v
}



func (p *_SpecIntervalUpdateSerial) Get_v_op() []*_CellValueSerialOp {
	return p._v_op
}

var _SpecIntervalUpdateSerial__encoder_DEFAULT _EncodingType

func (p *_SpecIntervalUpdateSerial) Get_encoder() _EncodingType {
	if !p.IsSet_encoder() {
		return _SpecIntervalUpdateSerial__encoder_DEFAULT
	}
	return *p._encoder
}

var _SpecIntervalUpdateSerial__update_op_DEFAULT *_SpecUpdateOP

func (p *_SpecIntervalUpdateSerial) Get_update_op() *_SpecUpdateOP {
	if !p.IsSet_update_op() {
		return _SpecIntervalUpdateSerial__update_op_DEFAULT
	}
	return p._update_op
}

func (p *_SpecIntervalUpdateSerial) IsSet_encoder() bool {
	return p._encoder != nil
}

func (p *_SpecIntervalUpdateSerial) IsSet_update_op() bool {
	return p._update_op != nil
}

func (p *_SpecIntervalUpdateSerial) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_SpecIntervalUpdateSerial) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._ts = v
	}
	return nil
}

func (p *_SpecIntervalUpdateSerial) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*_CellValueSerial, 0, size)
	p._v = tSlice
	for i := 0; i < size; i++ {
		__elem10 := &_CellValueSerial{}
		if err := __elem10.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem10), err)
		}
		p._v = append(p._v, _elem10)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SpecIntervalUpdateSerial) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*_CellValueSerialOp, 0, size)
	p._v_op = tSlice
	for i := 0; i < size; i++ {
		__elem11 := &_CellValueSerialOp{}
		if err := __elem11.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem11), err)
		}
		p._v_op = append(p._v_op, _elem11)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SpecIntervalUpdateSerial) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := _EncodingType(v)
		p._encoder = &temp
	}
	return nil
}

func (p *_SpecIntervalUpdateSerial) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	p._update_op = &_SpecUpdateOP{}
	if err := p._update_op.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._update_op), err)
	}
	return nil
}

func (p *_SpecIntervalUpdateSerial) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SpecIntervalUpdateSerial"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_SpecIntervalUpdateSerial) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ts", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ts: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._ts)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ts (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ts: ", p), err)
	}
	return err
}

func (p *_SpecIntervalUpdateSerial) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:v: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._v)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._v {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:v: ", p), err)
	}
	return err
}

func (p *_SpecIntervalUpdateSerial) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v_op", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:v_op: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._v_op)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._v_op {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:v_op: ", p), err)
	}
	return err
}

func (p *_SpecIntervalUpdateSerial) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_encoder() {
		if err := oprot.WriteFieldBegin(ctx, "encoder", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:encoder: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p._encoder)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.encoder (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:encoder: ", p), err)
		}
	}
	return err
}

func (p *_SpecIntervalUpdateSerial) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_update_op() {
		if err := oprot.WriteFieldBegin(ctx, "update_op", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:update_op: ", p), err)
		}
		if err := p._update_op.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._update_op), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:update_op: ", p), err)
		}
	}
	return err
}

func (p *_SpecIntervalUpdateSerial) Equals(other *_SpecIntervalUpdateSerial) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._ts != other._ts { return false }
	if len(p._v) != len(other._v) { return false }
	for i, _tgt := range p._v {
		_src12 := other._v[i]
		if !_tgt.Equals(_src12) { return false }
	}
	if len(p._v_op) != len(other._v_op) { return false }
	for i, _tgt := range p._v_op {
		_src13 := other._v_op[i]
		if !_tgt.Equals(_src13) { return false }
	}
	if p._encoder != other._encoder {
		if p._encoder == nil || other._encoder == nil {
			return false
		}
		if (*p._encoder) != (*other._encoder) { return false }
	}
	if !p._update_op.Equals(other._update_op) { return false }
	return true
}

func (p *_SpecIntervalUpdateSerial) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_SpecIntervalUpdateSerial(%+v)", *p)
}

func (p *_SpecIntervalUpdateSerial) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._SpecIntervalUpdateSerial",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_SpecIntervalUpdateSerial)(nil)

func (p *_SpecIntervalUpdateSerial) Validate() error {
	return nil
}

// The Specifications of INT64 Serial Value Field
// 
// Attributes:
//  - _comp: Logical comparator to Apply
//  - _v: The int64 to match against the value field
// 
type _SpecValueSerial_INT64 struct {
	_comp _Comp `thrift:"comp,1" db:"comp" json:"comp"`
	_v int64 `thrift:"v,2" db:"v" json:"v"`
}

func New_SpecValueSerial_INT64() *_SpecValueSerial_INT64 {
	return &_SpecValueSerial_INT64{}
}



func (p *_SpecValueSerial_INT64) Get_comp() _Comp {
	return p._comp
}



func (p *_SpecValueSerial_INT64) Get_v() int64 {
	return p._v
}

func (p *_SpecValueSerial_INT64) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_SpecValueSerial_INT64) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := _Comp(v)
		p._comp = temp
	}
	return nil
}

func (p *_SpecValueSerial_INT64) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p._v = v
	}
	return nil
}

func (p *_SpecValueSerial_INT64) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SpecValueSerial_INT64"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_SpecValueSerial_INT64) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "comp", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:comp: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p._comp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.comp (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:comp: ", p), err)
	}
	return err
}

func (p *_SpecValueSerial_INT64) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:v: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._v)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.v (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:v: ", p), err)
	}
	return err
}

func (p *_SpecValueSerial_INT64) Equals(other *_SpecValueSerial_INT64) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._comp != other._comp { return false }
	if p._v != other._v { return false }
	return true
}

func (p *_SpecValueSerial_INT64) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_SpecValueSerial_INT64(%+v)", *p)
}

func (p *_SpecValueSerial_INT64) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._SpecValueSerial_INT64",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_SpecValueSerial_INT64)(nil)

func (p *_SpecValueSerial_INT64) Validate() error {
	return nil
}

// The Specifications of DOUBLE Serial Value Field
// 
// Attributes:
//  - _comp: Logical comparator to Apply
//  - _v: The double to match against the value field
// 
type _SpecValueSerial_DOUBLE struct {
	_comp _Comp `thrift:"comp,1" db:"comp" json:"comp"`
	_v float64 `thrift:"v,2" db:"v" json:"v"`
}

func New_SpecValueSerial_DOUBLE() *_SpecValueSerial_DOUBLE {
	return &_SpecValueSerial_DOUBLE{}
}



func (p *_SpecValueSerial_DOUBLE) Get_comp() _Comp {
	return p._comp
}



func (p *_SpecValueSerial_DOUBLE) Get_v() float64 {
	return p._v
}

func (p *_SpecValueSerial_DOUBLE) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_SpecValueSerial_DOUBLE) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := _Comp(v)
		p._comp = temp
	}
	return nil
}

func (p *_SpecValueSerial_DOUBLE) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p._v = v
	}
	return nil
}

func (p *_SpecValueSerial_DOUBLE) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SpecValueSerial_DOUBLE"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_SpecValueSerial_DOUBLE) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "comp", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:comp: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p._comp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.comp (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:comp: ", p), err)
	}
	return err
}

func (p *_SpecValueSerial_DOUBLE) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v", thrift.DOUBLE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:v: ", p), err)
	}
	if err := oprot.WriteDouble(ctx, float64(p._v)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.v (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:v: ", p), err)
	}
	return err
}

func (p *_SpecValueSerial_DOUBLE) Equals(other *_SpecValueSerial_DOUBLE) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._comp != other._comp { return false }
	if p._v != other._v { return false }
	return true
}

func (p *_SpecValueSerial_DOUBLE) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_SpecValueSerial_DOUBLE(%+v)", *p)
}

func (p *_SpecValueSerial_DOUBLE) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._SpecValueSerial_DOUBLE",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_SpecValueSerial_DOUBLE)(nil)

func (p *_SpecValueSerial_DOUBLE) Validate() error {
	return nil
}

// The Specifications of BYTES Serial Value Field
// 
// Attributes:
//  - _comp: Logical comparator to Apply
//  - _v: The binary(bytes) to match against the value field
// 
type _SpecValueSerial_BYTES struct {
	_comp _Comp `thrift:"comp,1" db:"comp" json:"comp"`
	_v []byte `thrift:"v,2" db:"v" json:"v"`
}

func New_SpecValueSerial_BYTES() *_SpecValueSerial_BYTES {
	return &_SpecValueSerial_BYTES{}
}



func (p *_SpecValueSerial_BYTES) Get_comp() _Comp {
	return p._comp
}



func (p *_SpecValueSerial_BYTES) Get_v() []byte {
	return p._v
}

func (p *_SpecValueSerial_BYTES) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_SpecValueSerial_BYTES) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := _Comp(v)
		p._comp = temp
	}
	return nil
}

func (p *_SpecValueSerial_BYTES) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p._v = v
	}
	return nil
}

func (p *_SpecValueSerial_BYTES) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SpecValueSerial_BYTES"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_SpecValueSerial_BYTES) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "comp", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:comp: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p._comp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.comp (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:comp: ", p), err)
	}
	return err
}

func (p *_SpecValueSerial_BYTES) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:v: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p._v); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.v (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:v: ", p), err)
	}
	return err
}

func (p *_SpecValueSerial_BYTES) Equals(other *_SpecValueSerial_BYTES) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._comp != other._comp { return false }
	if bytes.Compare(p._v, other._v) != 0 { return false }
	return true
}

func (p *_SpecValueSerial_BYTES) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_SpecValueSerial_BYTES(%+v)", *p)
}

func (p *_SpecValueSerial_BYTES) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._SpecValueSerial_BYTES",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_SpecValueSerial_BYTES)(nil)

func (p *_SpecValueSerial_BYTES) Validate() error {
	return nil
}

// The Specifications of KEY Serial Value Field
// 
// Attributes:
//  - _seq: The Key Sequence to use
//  - _v: The Specification of the Key to match against the value field
// 
type _SpecValueSerial_KEY struct {
	_seq _KeySeq `thrift:"seq,1" db:"seq" json:"seq"`
	_v []*_SpecFraction `thrift:"v,2" db:"v" json:"v"`
}

func New_SpecValueSerial_KEY() *_SpecValueSerial_KEY {
	return &_SpecValueSerial_KEY{}
}



func (p *_SpecValueSerial_KEY) Get_seq() _KeySeq {
	return p._seq
}



func (p *_SpecValueSerial_KEY) Get_v() []*_SpecFraction {
	return p._v
}

func (p *_SpecValueSerial_KEY) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_SpecValueSerial_KEY) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := _KeySeq(v)
		p._seq = temp
	}
	return nil
}

func (p *_SpecValueSerial_KEY) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*_SpecFraction, 0, size)
	p._v = tSlice
	for i := 0; i < size; i++ {
		__elem14 := &_SpecFraction{}
		if err := __elem14.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem14), err)
		}
		p._v = append(p._v, _elem14)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SpecValueSerial_KEY) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SpecValueSerial_KEY"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_SpecValueSerial_KEY) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "seq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p._seq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err)
	}
	return err
}

func (p *_SpecValueSerial_KEY) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:v: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._v)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._v {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:v: ", p), err)
	}
	return err
}

func (p *_SpecValueSerial_KEY) Equals(other *_SpecValueSerial_KEY) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._seq != other._seq { return false }
	if len(p._v) != len(other._v) { return false }
	for i, _tgt := range p._v {
		_src15 := other._v[i]
		if !_tgt.Equals(_src15) { return false }
	}
	return true
}

func (p *_SpecValueSerial_KEY) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_SpecValueSerial_KEY(%+v)", *p)
}

func (p *_SpecValueSerial_KEY) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._SpecValueSerial_KEY",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_SpecValueSerial_KEY)(nil)

func (p *_SpecValueSerial_KEY) Validate() error {
	return nil
}

// The Specifications of LIST_INT64(LI) Serial Value Field
// 
// Attributes:
//  - _comp: Logical comparator to Apply
//  - _v: The List of Int64 to match against the value field
// 
type _SpecValueSerial_LI struct {
	_comp _Comp `thrift:"comp,1" db:"comp" json:"comp"`
	_v []*_SpecValueSerial_INT64 `thrift:"v,2" db:"v" json:"v"`
}

func New_SpecValueSerial_LI() *_SpecValueSerial_LI {
	return &_SpecValueSerial_LI{}
}



func (p *_SpecValueSerial_LI) Get_comp() _Comp {
	return p._comp
}



func (p *_SpecValueSerial_LI) Get_v() []*_SpecValueSerial_INT64 {
	return p._v
}

func (p *_SpecValueSerial_LI) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_SpecValueSerial_LI) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := _Comp(v)
		p._comp = temp
	}
	return nil
}

func (p *_SpecValueSerial_LI) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*_SpecValueSerial_INT64, 0, size)
	p._v = tSlice
	for i := 0; i < size; i++ {
		__elem16 := &_SpecValueSerial_INT64{}
		if err := __elem16.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem16), err)
		}
		p._v = append(p._v, _elem16)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SpecValueSerial_LI) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SpecValueSerial_LI"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_SpecValueSerial_LI) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "comp", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:comp: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p._comp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.comp (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:comp: ", p), err)
	}
	return err
}

func (p *_SpecValueSerial_LI) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:v: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._v)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._v {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:v: ", p), err)
	}
	return err
}

func (p *_SpecValueSerial_LI) Equals(other *_SpecValueSerial_LI) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._comp != other._comp { return false }
	if len(p._v) != len(other._v) { return false }
	for i, _tgt := range p._v {
		_src17 := other._v[i]
		if !_tgt.Equals(_src17) { return false }
	}
	return true
}

func (p *_SpecValueSerial_LI) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_SpecValueSerial_LI(%+v)", *p)
}

func (p *_SpecValueSerial_LI) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._SpecValueSerial_LI",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_SpecValueSerial_LI)(nil)

func (p *_SpecValueSerial_LI) Validate() error {
	return nil
}

// The Specifications of LIST_BYTES(LB) Serial Value Field
// 
// Attributes:
//  - _comp: Logical comparator to Apply
//  - _v: The List of Bytes to match against the value field
// 
type _SpecValueSerial_LB struct {
	_comp _Comp `thrift:"comp,1" db:"comp" json:"comp"`
	_v []*_SpecValueSerial_BYTES `thrift:"v,2" db:"v" json:"v"`
}

func New_SpecValueSerial_LB() *_SpecValueSerial_LB {
	return &_SpecValueSerial_LB{}
}



func (p *_SpecValueSerial_LB) Get_comp() _Comp {
	return p._comp
}



func (p *_SpecValueSerial_LB) Get_v() []*_SpecValueSerial_BYTES {
	return p._v
}

func (p *_SpecValueSerial_LB) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_SpecValueSerial_LB) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := _Comp(v)
		p._comp = temp
	}
	return nil
}

func (p *_SpecValueSerial_LB) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*_SpecValueSerial_BYTES, 0, size)
	p._v = tSlice
	for i := 0; i < size; i++ {
		__elem18 := &_SpecValueSerial_BYTES{}
		if err := __elem18.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem18), err)
		}
		p._v = append(p._v, _elem18)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SpecValueSerial_LB) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SpecValueSerial_LB"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_SpecValueSerial_LB) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "comp", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:comp: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p._comp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.comp (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:comp: ", p), err)
	}
	return err
}

func (p *_SpecValueSerial_LB) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:v: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._v)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._v {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:v: ", p), err)
	}
	return err
}

func (p *_SpecValueSerial_LB) Equals(other *_SpecValueSerial_LB) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._comp != other._comp { return false }
	if len(p._v) != len(other._v) { return false }
	for i, _tgt := range p._v {
		_src19 := other._v[i]
		if !_tgt.Equals(_src19) { return false }
	}
	return true
}

func (p *_SpecValueSerial_LB) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_SpecValueSerial_LB(%+v)", *p)
}

func (p *_SpecValueSerial_LB) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._SpecValueSerial_LB",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_SpecValueSerial_LB)(nil)

func (p *_SpecValueSerial_LB) Validate() error {
	return nil
}

// Attributes:
//  - _field_id: The Field Id of the Value Field
//  - _spec_int64: The specifications of Int64 for the field
//  - _spec_double: The specifications of Double for the field
//  - _spec_bytes: The specifications of Bytes for the field
//  - _spec_key: The specifications of Cell-Key for the field
//  - _spec_li: The specifications of List Int64 for the field
//  - _spec_lb: The specifications of List Bytes for the field
// 
type _SpecValueSerialField struct {
	_field_id int32 `thrift:"field_id,1" db:"field_id" json:"field_id"`
	_spec_int64 *_SpecValueSerial_INT64 `thrift:"spec_int64,2" db:"spec_int64" json:"spec_int64,omitempty"`
	_spec_double *_SpecValueSerial_DOUBLE `thrift:"spec_double,3" db:"spec_double" json:"spec_double,omitempty"`
	_spec_bytes *_SpecValueSerial_BYTES `thrift:"spec_bytes,4" db:"spec_bytes" json:"spec_bytes"`
	_spec_key *_SpecValueSerial_KEY `thrift:"spec_key,5" db:"spec_key" json:"spec_key"`
	_spec_li *_SpecValueSerial_LI `thrift:"spec_li,6" db:"spec_li" json:"spec_li"`
	_spec_lb *_SpecValueSerial_LB `thrift:"spec_lb,7" db:"spec_lb" json:"spec_lb"`
}

func New_SpecValueSerialField() *_SpecValueSerialField {
	return &_SpecValueSerialField{}
}



func (p *_SpecValueSerialField) Get_field_id() int32 {
	return p._field_id
}

var _SpecValueSerialField__spec_int64_DEFAULT *_SpecValueSerial_INT64

func (p *_SpecValueSerialField) Get_spec_int64() *_SpecValueSerial_INT64 {
	if !p.IsSet_spec_int64() {
		return _SpecValueSerialField__spec_int64_DEFAULT
	}
	return p._spec_int64
}

var _SpecValueSerialField__spec_double_DEFAULT *_SpecValueSerial_DOUBLE

func (p *_SpecValueSerialField) Get_spec_double() *_SpecValueSerial_DOUBLE {
	if !p.IsSet_spec_double() {
		return _SpecValueSerialField__spec_double_DEFAULT
	}
	return p._spec_double
}

var _SpecValueSerialField__spec_bytes_DEFAULT *_SpecValueSerial_BYTES

func (p *_SpecValueSerialField) Get_spec_bytes() *_SpecValueSerial_BYTES {
	if !p.IsSet_spec_bytes() {
		return _SpecValueSerialField__spec_bytes_DEFAULT
	}
	return p._spec_bytes
}

var _SpecValueSerialField__spec_key_DEFAULT *_SpecValueSerial_KEY

func (p *_SpecValueSerialField) Get_spec_key() *_SpecValueSerial_KEY {
	if !p.IsSet_spec_key() {
		return _SpecValueSerialField__spec_key_DEFAULT
	}
	return p._spec_key
}

var _SpecValueSerialField__spec_li_DEFAULT *_SpecValueSerial_LI

func (p *_SpecValueSerialField) Get_spec_li() *_SpecValueSerial_LI {
	if !p.IsSet_spec_li() {
		return _SpecValueSerialField__spec_li_DEFAULT
	}
	return p._spec_li
}

var _SpecValueSerialField__spec_lb_DEFAULT *_SpecValueSerial_LB

func (p *_SpecValueSerialField) Get_spec_lb() *_SpecValueSerial_LB {
	if !p.IsSet_spec_lb() {
		return _SpecValueSerialField__spec_lb_DEFAULT
	}
	return p._spec_lb
}

func (p *_SpecValueSerialField) IsSet_spec_int64() bool {
	return p._spec_int64 != nil
}

func (p *_SpecValueSerialField) IsSet_spec_double() bool {
	return p._spec_double != nil
}

func (p *_SpecValueSerialField) IsSet_spec_bytes() bool {
	return p._spec_bytes != nil
}

func (p *_SpecValueSerialField) IsSet_spec_key() bool {
	return p._spec_key != nil
}

func (p *_SpecValueSerialField) IsSet_spec_li() bool {
	return p._spec_li != nil
}

func (p *_SpecValueSerialField) IsSet_spec_lb() bool {
	return p._spec_lb != nil
}

func (p *_SpecValueSerialField) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_SpecValueSerialField) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._field_id = v
	}
	return nil
}

func (p *_SpecValueSerialField) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p._spec_int64 = &_SpecValueSerial_INT64{}
	if err := p._spec_int64.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._spec_int64), err)
	}
	return nil
}

func (p *_SpecValueSerialField) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p._spec_double = &_SpecValueSerial_DOUBLE{}
	if err := p._spec_double.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._spec_double), err)
	}
	return nil
}

func (p *_SpecValueSerialField) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	p._spec_bytes = &_SpecValueSerial_BYTES{}
	if err := p._spec_bytes.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._spec_bytes), err)
	}
	return nil
}

func (p *_SpecValueSerialField) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	p._spec_key = &_SpecValueSerial_KEY{}
	if err := p._spec_key.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._spec_key), err)
	}
	return nil
}

func (p *_SpecValueSerialField) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	p._spec_li = &_SpecValueSerial_LI{}
	if err := p._spec_li.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._spec_li), err)
	}
	return nil
}

func (p *_SpecValueSerialField) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	p._spec_lb = &_SpecValueSerial_LB{}
	if err := p._spec_lb.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._spec_lb), err)
	}
	return nil
}

func (p *_SpecValueSerialField) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SpecValueSerialField"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
		if err := p.writeField6(ctx, oprot); err != nil { return err }
		if err := p.writeField7(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_SpecValueSerialField) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "field_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:field_id: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p._field_id)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.field_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:field_id: ", p), err)
	}
	return err
}

func (p *_SpecValueSerialField) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_spec_int64() {
		if err := oprot.WriteFieldBegin(ctx, "spec_int64", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:spec_int64: ", p), err)
		}
		if err := p._spec_int64.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._spec_int64), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:spec_int64: ", p), err)
		}
	}
	return err
}

func (p *_SpecValueSerialField) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_spec_double() {
		if err := oprot.WriteFieldBegin(ctx, "spec_double", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:spec_double: ", p), err)
		}
		if err := p._spec_double.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._spec_double), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:spec_double: ", p), err)
		}
	}
	return err
}

func (p *_SpecValueSerialField) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "spec_bytes", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:spec_bytes: ", p), err)
	}
	if err := p._spec_bytes.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._spec_bytes), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:spec_bytes: ", p), err)
	}
	return err
}

func (p *_SpecValueSerialField) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "spec_key", thrift.STRUCT, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:spec_key: ", p), err)
	}
	if err := p._spec_key.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._spec_key), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:spec_key: ", p), err)
	}
	return err
}

func (p *_SpecValueSerialField) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "spec_li", thrift.STRUCT, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:spec_li: ", p), err)
	}
	if err := p._spec_li.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._spec_li), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:spec_li: ", p), err)
	}
	return err
}

func (p *_SpecValueSerialField) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "spec_lb", thrift.STRUCT, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:spec_lb: ", p), err)
	}
	if err := p._spec_lb.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._spec_lb), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:spec_lb: ", p), err)
	}
	return err
}

func (p *_SpecValueSerialField) Equals(other *_SpecValueSerialField) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._field_id != other._field_id { return false }
	if !p._spec_int64.Equals(other._spec_int64) { return false }
	if !p._spec_double.Equals(other._spec_double) { return false }
	if !p._spec_bytes.Equals(other._spec_bytes) { return false }
	if !p._spec_key.Equals(other._spec_key) { return false }
	if !p._spec_li.Equals(other._spec_li) { return false }
	if !p._spec_lb.Equals(other._spec_lb) { return false }
	return true
}

func (p *_SpecValueSerialField) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_SpecValueSerialField(%+v)", *p)
}

func (p *_SpecValueSerialField) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._SpecValueSerialField",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_SpecValueSerialField)(nil)

func (p *_SpecValueSerialField) Validate() error {
	return nil
}

// The Plain Value Specifications, option to use with Extended Logical Comparators
// 
// Attributes:
//  - _comp: Logical comparator to Apply
//  - _v: The binary(bytes) to match against the Cell value
// 
type _SpecValuePlain struct {
	_comp _Comp `thrift:"comp,1" db:"comp" json:"comp"`
	_v []byte `thrift:"v,2" db:"v" json:"v"`
}

func New_SpecValuePlain() *_SpecValuePlain {
	return &_SpecValuePlain{}
}



func (p *_SpecValuePlain) Get_comp() _Comp {
	return p._comp
}



func (p *_SpecValuePlain) Get_v() []byte {
	return p._v
}

func (p *_SpecValuePlain) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_SpecValuePlain) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := _Comp(v)
		p._comp = temp
	}
	return nil
}

func (p *_SpecValuePlain) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p._v = v
	}
	return nil
}

func (p *_SpecValuePlain) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SpecValuePlain"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_SpecValuePlain) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "comp", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:comp: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p._comp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.comp (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:comp: ", p), err)
	}
	return err
}

func (p *_SpecValuePlain) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:v: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p._v); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.v (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:v: ", p), err)
	}
	return err
}

func (p *_SpecValuePlain) Equals(other *_SpecValuePlain) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._comp != other._comp { return false }
	if bytes.Compare(p._v, other._v) != 0 { return false }
	return true
}

func (p *_SpecValuePlain) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_SpecValuePlain(%+v)", *p)
}

func (p *_SpecValuePlain) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._SpecValuePlain",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_SpecValuePlain)(nil)

func (p *_SpecValuePlain) Validate() error {
	return nil
}

// The Counter Value Specifications, option to use with Extended Logical Comparators
// 
// Attributes:
//  - _comp: Logical comparator to Apply
//  - _v: The int64 to match against the Cell value
// 
type _SpecValueCounter struct {
	_comp _Comp `thrift:"comp,1" db:"comp" json:"comp"`
	_v int64 `thrift:"v,2" db:"v" json:"v"`
}

func New_SpecValueCounter() *_SpecValueCounter {
	return &_SpecValueCounter{}
}



func (p *_SpecValueCounter) Get_comp() _Comp {
	return p._comp
}



func (p *_SpecValueCounter) Get_v() int64 {
	return p._v
}

func (p *_SpecValueCounter) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_SpecValueCounter) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := _Comp(v)
		p._comp = temp
	}
	return nil
}

func (p *_SpecValueCounter) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p._v = v
	}
	return nil
}

func (p *_SpecValueCounter) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SpecValueCounter"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_SpecValueCounter) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "comp", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:comp: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p._comp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.comp (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:comp: ", p), err)
	}
	return err
}

func (p *_SpecValueCounter) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:v: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._v)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.v (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:v: ", p), err)
	}
	return err
}

func (p *_SpecValueCounter) Equals(other *_SpecValueCounter) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._comp != other._comp { return false }
	if p._v != other._v { return false }
	return true
}

func (p *_SpecValueCounter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_SpecValueCounter(%+v)", *p)
}

func (p *_SpecValueCounter) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._SpecValueCounter",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_SpecValueCounter)(nil)

func (p *_SpecValueCounter) Validate() error {
	return nil
}

// The Serial Value Specifications
// 
// Attributes:
//  - _comp: Logical comparator to Apply
//  - _fields: The Serial Value Specifications to match against the SERIAL Cell value fields
// 
type _SpecValueSerial struct {
	_comp _Comp `thrift:"comp,1" db:"comp" json:"comp"`
	_fields _SpecValueSerialFields `thrift:"fields,2" db:"fields" json:"fields"`
}

func New_SpecValueSerial() *_SpecValueSerial {
	return &_SpecValueSerial{}
}



func (p *_SpecValueSerial) Get_comp() _Comp {
	return p._comp
}



func (p *_SpecValueSerial) Get_fields() _SpecValueSerialFields {
	return p._fields
}

func (p *_SpecValueSerial) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_SpecValueSerial) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := _Comp(v)
		p._comp = temp
	}
	return nil
}

func (p *_SpecValueSerial) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_SpecValueSerialFields, 0, size)
	p._fields = tSlice
	for i := 0; i < size; i++ {
		__elem20 := &_SpecValueSerialField{}
		if err := __elem20.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem20), err)
		}
		p._fields = append(p._fields, _elem20)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SpecValueSerial) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SpecValueSerial"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_SpecValueSerial) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "comp", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:comp: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p._comp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.comp (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:comp: ", p), err)
	}
	return err
}

func (p *_SpecValueSerial) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fields", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fields: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._fields)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._fields {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fields: ", p), err)
	}
	return err
}

func (p *_SpecValueSerial) Equals(other *_SpecValueSerial) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._comp != other._comp { return false }
	if len(p._fields) != len(other._fields) { return false }
	for i, _tgt := range p._fields {
		_src21 := other._fields[i]
		if !_tgt.Equals(_src21) { return false }
	}
	return true
}

func (p *_SpecValueSerial) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_SpecValueSerial(%+v)", *p)
}

func (p *_SpecValueSerial) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._SpecValueSerial",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_SpecValueSerial)(nil)

func (p *_SpecValueSerial) Validate() error {
	return nil
}

// The Fraction Specifications
// 
// Attributes:
//  - _comp: Logical comparator to Apply
//  - _f: The binary(bytes) to match against a fraction of a Cell-Key
// 
type _SpecFraction struct {
	_comp _Comp `thrift:"comp,1" db:"comp" json:"comp"`
	_f []byte `thrift:"f,2" db:"f" json:"f"`
}

func New_SpecFraction() *_SpecFraction {
	return &_SpecFraction{}
}



func (p *_SpecFraction) Get_comp() _Comp {
	return p._comp
}



func (p *_SpecFraction) Get_f() []byte {
	return p._f
}

func (p *_SpecFraction) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_SpecFraction) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := _Comp(v)
		p._comp = temp
	}
	return nil
}

func (p *_SpecFraction) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p._f = v
	}
	return nil
}

func (p *_SpecFraction) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SpecFraction"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_SpecFraction) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "comp", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:comp: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p._comp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.comp (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:comp: ", p), err)
	}
	return err
}

func (p *_SpecFraction) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "f", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:f: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p._f); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.f (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:f: ", p), err)
	}
	return err
}

func (p *_SpecFraction) Equals(other *_SpecFraction) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._comp != other._comp { return false }
	if bytes.Compare(p._f, other._f) != 0 { return false }
	return true
}

func (p *_SpecFraction) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_SpecFraction(%+v)", *p)
}

func (p *_SpecFraction) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._SpecFraction",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_SpecFraction)(nil)

func (p *_SpecFraction) Validate() error {
	return nil
}

// The Timestamp Specifications
// 
// Attributes:
//  - _comp: Logical comparator to Apply
//  - _ts: The timestamp in nanoseconds to match against the Cell timestamp/version (not the revision)
// 
type _SpecTimestamp struct {
	_comp _Comp `thrift:"comp,1" db:"comp" json:"comp"`
	_ts int64 `thrift:"ts,2" db:"ts" json:"ts"`
}

func New_SpecTimestamp() *_SpecTimestamp {
	return &_SpecTimestamp{}
}



func (p *_SpecTimestamp) Get_comp() _Comp {
	return p._comp
}



func (p *_SpecTimestamp) Get_ts() int64 {
	return p._ts
}

func (p *_SpecTimestamp) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_SpecTimestamp) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := _Comp(v)
		p._comp = temp
	}
	return nil
}

func (p *_SpecTimestamp) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p._ts = v
	}
	return nil
}

func (p *_SpecTimestamp) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SpecTimestamp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_SpecTimestamp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "comp", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:comp: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p._comp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.comp (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:comp: ", p), err)
	}
	return err
}

func (p *_SpecTimestamp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ts", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ts: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._ts)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ts (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ts: ", p), err)
	}
	return err
}

func (p *_SpecTimestamp) Equals(other *_SpecTimestamp) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._comp != other._comp { return false }
	if p._ts != other._ts { return false }
	return true
}

func (p *_SpecTimestamp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_SpecTimestamp(%+v)", *p)
}

func (p *_SpecTimestamp) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._SpecTimestamp",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_SpecTimestamp)(nil)

func (p *_SpecTimestamp) Validate() error {
	return nil
}

// The Key Interval Specifications
// 
// Attributes:
//  - _start: The Key Start Spec, the start of cells-interval key match
//  - _finish: The Key Finish Spec, the finish of cells-interval key match
// 
type _SpecKeyInterval struct {
	_start _SpecKey `thrift:"start,1" db:"start" json:"start"`
	_finish _SpecKey `thrift:"finish,2" db:"finish" json:"finish"`
}

func New_SpecKeyInterval() *_SpecKeyInterval {
	return &_SpecKeyInterval{}
}



func (p *_SpecKeyInterval) Get_start() _SpecKey {
	return p._start
}



func (p *_SpecKeyInterval) Get_finish() _SpecKey {
	return p._finish
}

func (p *_SpecKeyInterval) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_SpecKeyInterval) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_SpecKey, 0, size)
	p._start = tSlice
	for i := 0; i < size; i++ {
		__elem22 := &_SpecFraction{}
		if err := __elem22.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem22), err)
		}
		p._start = append(p._start, _elem22)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SpecKeyInterval) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_SpecKey, 0, size)
	p._finish = tSlice
	for i := 0; i < size; i++ {
		__elem23 := &_SpecFraction{}
		if err := __elem23.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem23), err)
		}
		p._finish = append(p._finish, _elem23)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SpecKeyInterval) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SpecKeyInterval"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_SpecKeyInterval) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "start", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:start: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._start)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._start {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:start: ", p), err)
	}
	return err
}

func (p *_SpecKeyInterval) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "finish", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:finish: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._finish)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._finish {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:finish: ", p), err)
	}
	return err
}

func (p *_SpecKeyInterval) Equals(other *_SpecKeyInterval) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p._start) != len(other._start) { return false }
	for i, _tgt := range p._start {
		_src24 := other._start[i]
		if !_tgt.Equals(_src24) { return false }
	}
	if len(p._finish) != len(other._finish) { return false }
	for i, _tgt := range p._finish {
		_src25 := other._finish[i]
		if !_tgt.Equals(_src25) { return false }
	}
	return true
}

func (p *_SpecKeyInterval) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_SpecKeyInterval(%+v)", *p)
}

func (p *_SpecKeyInterval) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._SpecKeyInterval",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_SpecKeyInterval)(nil)

func (p *_SpecKeyInterval) Validate() error {
	return nil
}

// The Cells Interval Plain type Specifications with interval-scope Flags
// 
// Attributes:
//  - _range_begin: Begin of Ranges evaluation with this Key inclusive
//  - _range_end: End of Ranges evaluation with this Key inclusive
//  - _offset_key: Offset Cell Key of a Scan, select cells from this key inclusive
//  - _offset_rev: Offset Cell Timestamp of a Scan, select cells after this timestamp
//  - _key_intervals: The Key Intervals
//  - _values: The Cell Value Specifications, cell-value match for plain type
//  - _ts_start: The Timestamp Start Spec, the start of cells-interval timestamp match
//  - _ts_finish: The Timestamp Finish Spec, the finish of cells-interval timestamp match
//  - _flags: The Interval Flags Specification
//  - _options: The Interval Options Specification
//  - _updating: The Value spec of an Updating Interval
// 
type _SpecIntervalPlain struct {
	_range_begin _Key `thrift:"range_begin,1" db:"range_begin" json:"range_begin"`
	_range_end _Key `thrift:"range_end,2" db:"range_end" json:"range_end"`
	_offset_key _Key `thrift:"offset_key,3" db:"offset_key" json:"offset_key"`
	_offset_rev *int64 `thrift:"offset_rev,4" db:"offset_rev" json:"offset_rev,omitempty"`
	_key_intervals _SpecKeyIntervals `thrift:"key_intervals,5" db:"key_intervals" json:"key_intervals"`
	_values _SpecValuesPlain `thrift:"values,6" db:"values" json:"values"`
	_ts_start *_SpecTimestamp `thrift:"ts_start,7" db:"ts_start" json:"ts_start,omitempty"`
	_ts_finish *_SpecTimestamp `thrift:"ts_finish,8" db:"ts_finish" json:"ts_finish,omitempty"`
	_flags *_SpecFlags `thrift:"flags,9" db:"flags" json:"flags,omitempty"`
	_options *_SpecIntervalOptions `thrift:"options,10" db:"options" json:"options,omitempty"`
	_updating *_SpecIntervalUpdatePlain `thrift:"updating,11" db:"updating" json:"updating,omitempty"`
}

func New_SpecIntervalPlain() *_SpecIntervalPlain {
	return &_SpecIntervalPlain{}
}



func (p *_SpecIntervalPlain) Get_range_begin() _Key {
	return p._range_begin
}



func (p *_SpecIntervalPlain) Get_range_end() _Key {
	return p._range_end
}



func (p *_SpecIntervalPlain) Get_offset_key() _Key {
	return p._offset_key
}

var _SpecIntervalPlain__offset_rev_DEFAULT int64

func (p *_SpecIntervalPlain) Get_offset_rev() int64 {
	if !p.IsSet_offset_rev() {
		return _SpecIntervalPlain__offset_rev_DEFAULT
	}
	return *p._offset_rev
}



func (p *_SpecIntervalPlain) Get_key_intervals() _SpecKeyIntervals {
	return p._key_intervals
}



func (p *_SpecIntervalPlain) Get_values() _SpecValuesPlain {
	return p._values
}

var _SpecIntervalPlain__ts_start_DEFAULT *_SpecTimestamp

func (p *_SpecIntervalPlain) Get_ts_start() *_SpecTimestamp {
	if !p.IsSet_ts_start() {
		return _SpecIntervalPlain__ts_start_DEFAULT
	}
	return p._ts_start
}

var _SpecIntervalPlain__ts_finish_DEFAULT *_SpecTimestamp

func (p *_SpecIntervalPlain) Get_ts_finish() *_SpecTimestamp {
	if !p.IsSet_ts_finish() {
		return _SpecIntervalPlain__ts_finish_DEFAULT
	}
	return p._ts_finish
}

var _SpecIntervalPlain__flags_DEFAULT *_SpecFlags

func (p *_SpecIntervalPlain) Get_flags() *_SpecFlags {
	if !p.IsSet_flags() {
		return _SpecIntervalPlain__flags_DEFAULT
	}
	return p._flags
}

var _SpecIntervalPlain__options_DEFAULT _SpecIntervalOptions

func (p *_SpecIntervalPlain) Get_options() _SpecIntervalOptions {
	if !p.IsSet_options() {
		return _SpecIntervalPlain__options_DEFAULT
	}
	return *p._options
}

var _SpecIntervalPlain__updating_DEFAULT *_SpecIntervalUpdatePlain

func (p *_SpecIntervalPlain) Get_updating() *_SpecIntervalUpdatePlain {
	if !p.IsSet_updating() {
		return _SpecIntervalPlain__updating_DEFAULT
	}
	return p._updating
}

func (p *_SpecIntervalPlain) IsSet_offset_rev() bool {
	return p._offset_rev != nil
}

func (p *_SpecIntervalPlain) IsSet_ts_start() bool {
	return p._ts_start != nil
}

func (p *_SpecIntervalPlain) IsSet_ts_finish() bool {
	return p._ts_finish != nil
}

func (p *_SpecIntervalPlain) IsSet_flags() bool {
	return p._flags != nil
}

func (p *_SpecIntervalPlain) IsSet_options() bool {
	return p._options != nil
}

func (p *_SpecIntervalPlain) IsSet_updating() bool {
	return p._updating != nil
}

func (p *_SpecIntervalPlain) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField11(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_SpecIntervalPlain) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_Key, 0, size)
	p._range_begin = tSlice
	for i := 0; i < size; i++ {
		var _elem26 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__elem26 = v
		}
		p._range_begin = append(p._range_begin, _elem26)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SpecIntervalPlain) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_Key, 0, size)
	p._range_end = tSlice
	for i := 0; i < size; i++ {
		var _elem27 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__elem27 = v
		}
		p._range_end = append(p._range_end, _elem27)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SpecIntervalPlain) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_Key, 0, size)
	p._offset_key = tSlice
	for i := 0; i < size; i++ {
		var _elem28 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__elem28 = v
		}
		p._offset_key = append(p._offset_key, _elem28)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SpecIntervalPlain) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p._offset_rev = &v
	}
	return nil
}

func (p *_SpecIntervalPlain) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_SpecKeyIntervals, 0, size)
	p._key_intervals = tSlice
	for i := 0; i < size; i++ {
		__elem29 := &_SpecKeyInterval{}
		if err := __elem29.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem29), err)
		}
		p._key_intervals = append(p._key_intervals, _elem29)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SpecIntervalPlain) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_SpecValuesPlain, 0, size)
	p._values = tSlice
	for i := 0; i < size; i++ {
		__elem30 := &_SpecValuePlain{}
		if err := __elem30.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem30), err)
		}
		p._values = append(p._values, _elem30)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SpecIntervalPlain) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	p._ts_start = &_SpecTimestamp{}
	if err := p._ts_start.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._ts_start), err)
	}
	return nil
}

func (p *_SpecIntervalPlain) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	p._ts_finish = &_SpecTimestamp{}
	if err := p._ts_finish.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._ts_finish), err)
	}
	return nil
}

func (p *_SpecIntervalPlain) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	p._flags = &_SpecFlags{}
	if err := p._flags.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._flags), err)
	}
	return nil
}

func (p *_SpecIntervalPlain) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := _SpecIntervalOptions(v)
		p._options = &temp
	}
	return nil
}

func (p *_SpecIntervalPlain) ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
	p._updating = &_SpecIntervalUpdatePlain{}
	if err := p._updating.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._updating), err)
	}
	return nil
}

func (p *_SpecIntervalPlain) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SpecIntervalPlain"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
		if err := p.writeField6(ctx, oprot); err != nil { return err }
		if err := p.writeField7(ctx, oprot); err != nil { return err }
		if err := p.writeField8(ctx, oprot); err != nil { return err }
		if err := p.writeField9(ctx, oprot); err != nil { return err }
		if err := p.writeField10(ctx, oprot); err != nil { return err }
		if err := p.writeField11(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_SpecIntervalPlain) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "range_begin", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:range_begin: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p._range_begin)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._range_begin {
		if err := oprot.WriteBinary(ctx, v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:range_begin: ", p), err)
	}
	return err
}

func (p *_SpecIntervalPlain) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "range_end", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:range_end: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p._range_end)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._range_end {
		if err := oprot.WriteBinary(ctx, v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:range_end: ", p), err)
	}
	return err
}

func (p *_SpecIntervalPlain) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "offset_key", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:offset_key: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p._offset_key)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._offset_key {
		if err := oprot.WriteBinary(ctx, v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:offset_key: ", p), err)
	}
	return err
}

func (p *_SpecIntervalPlain) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_offset_rev() {
		if err := oprot.WriteFieldBegin(ctx, "offset_rev", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:offset_rev: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p._offset_rev)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.offset_rev (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:offset_rev: ", p), err)
		}
	}
	return err
}

func (p *_SpecIntervalPlain) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "key_intervals", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:key_intervals: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._key_intervals)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._key_intervals {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:key_intervals: ", p), err)
	}
	return err
}

func (p *_SpecIntervalPlain) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "values", thrift.LIST, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:values: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._values)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._values {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:values: ", p), err)
	}
	return err
}

func (p *_SpecIntervalPlain) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_ts_start() {
		if err := oprot.WriteFieldBegin(ctx, "ts_start", thrift.STRUCT, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:ts_start: ", p), err)
		}
		if err := p._ts_start.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._ts_start), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:ts_start: ", p), err)
		}
	}
	return err
}

func (p *_SpecIntervalPlain) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_ts_finish() {
		if err := oprot.WriteFieldBegin(ctx, "ts_finish", thrift.STRUCT, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:ts_finish: ", p), err)
		}
		if err := p._ts_finish.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._ts_finish), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:ts_finish: ", p), err)
		}
	}
	return err
}

func (p *_SpecIntervalPlain) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_flags() {
		if err := oprot.WriteFieldBegin(ctx, "flags", thrift.STRUCT, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:flags: ", p), err)
		}
		if err := p._flags.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._flags), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:flags: ", p), err)
		}
	}
	return err
}

func (p *_SpecIntervalPlain) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_options() {
		if err := oprot.WriteFieldBegin(ctx, "options", thrift.I32, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:options: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p._options)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.options (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:options: ", p), err)
		}
	}
	return err
}

func (p *_SpecIntervalPlain) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_updating() {
		if err := oprot.WriteFieldBegin(ctx, "updating", thrift.STRUCT, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:updating: ", p), err)
		}
		if err := p._updating.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._updating), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:updating: ", p), err)
		}
	}
	return err
}

func (p *_SpecIntervalPlain) Equals(other *_SpecIntervalPlain) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p._range_begin) != len(other._range_begin) { return false }
	for i, _tgt := range p._range_begin {
		_src31 := other._range_begin[i]
		if bytes.Compare(_tgt, _src31) != 0 { return false }
	}
	if len(p._range_end) != len(other._range_end) { return false }
	for i, _tgt := range p._range_end {
		_src32 := other._range_end[i]
		if bytes.Compare(_tgt, _src32) != 0 { return false }
	}
	if len(p._offset_key) != len(other._offset_key) { return false }
	for i, _tgt := range p._offset_key {
		_src33 := other._offset_key[i]
		if bytes.Compare(_tgt, _src33) != 0 { return false }
	}
	if p._offset_rev != other._offset_rev {
		if p._offset_rev == nil || other._offset_rev == nil {
			return false
		}
		if (*p._offset_rev) != (*other._offset_rev) { return false }
	}
	if len(p._key_intervals) != len(other._key_intervals) { return false }
	for i, _tgt := range p._key_intervals {
		_src34 := other._key_intervals[i]
		if !_tgt.Equals(_src34) { return false }
	}
	if len(p._values) != len(other._values) { return false }
	for i, _tgt := range p._values {
		_src35 := other._values[i]
		if !_tgt.Equals(_src35) { return false }
	}
	if !p._ts_start.Equals(other._ts_start) { return false }
	if !p._ts_finish.Equals(other._ts_finish) { return false }
	if !p._flags.Equals(other._flags) { return false }
	if p._options != other._options {
		if p._options == nil || other._options == nil {
			return false
		}
		if (*p._options) != (*other._options) { return false }
	}
	if !p._updating.Equals(other._updating) { return false }
	return true
}

func (p *_SpecIntervalPlain) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_SpecIntervalPlain(%+v)", *p)
}

func (p *_SpecIntervalPlain) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._SpecIntervalPlain",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_SpecIntervalPlain)(nil)

func (p *_SpecIntervalPlain) Validate() error {
	return nil
}

// The Cells Interval Counter type Specifications with interval-scope Flags
// 
// Attributes:
//  - _range_begin: Begin of Ranges evaluation with this Key inclusive
//  - _range_end: End of Ranges evaluation with this Key inclusive
//  - _offset_key: Offset Cell Key of a Scan, select cells from this key inclusive
//  - _offset_rev: Offset Cell Timestamp of a Scan, select cells after this timestamp
//  - _key_intervals: The Key Intervals
//  - _values: The Cell Value Specifications, cell-value match for counter type
//  - _ts_start: The Timestamp Start Spec, the start of cells-interval timestamp match
//  - _ts_finish: The Timestamp Finish Spec, the finish of cells-interval timestamp match
//  - _flags: The Interval Flags Specification
//  - _options: The Interval Options Specification
//  - _updating: The Value spec of an Updating Interval
// 
type _SpecIntervalCounter struct {
	_range_begin _Key `thrift:"range_begin,1" db:"range_begin" json:"range_begin"`
	_range_end _Key `thrift:"range_end,2" db:"range_end" json:"range_end"`
	_offset_key _Key `thrift:"offset_key,3" db:"offset_key" json:"offset_key"`
	_offset_rev *int64 `thrift:"offset_rev,4" db:"offset_rev" json:"offset_rev,omitempty"`
	_key_intervals _SpecKeyIntervals `thrift:"key_intervals,5" db:"key_intervals" json:"key_intervals"`
	_values _SpecValuesCounter `thrift:"values,6" db:"values" json:"values"`
	_ts_start *_SpecTimestamp `thrift:"ts_start,7" db:"ts_start" json:"ts_start,omitempty"`
	_ts_finish *_SpecTimestamp `thrift:"ts_finish,8" db:"ts_finish" json:"ts_finish,omitempty"`
	_flags *_SpecFlags `thrift:"flags,9" db:"flags" json:"flags,omitempty"`
	_options *_SpecIntervalOptions `thrift:"options,10" db:"options" json:"options,omitempty"`
	_updating *_SpecIntervalUpdateCounter `thrift:"updating,11" db:"updating" json:"updating,omitempty"`
}

func New_SpecIntervalCounter() *_SpecIntervalCounter {
	return &_SpecIntervalCounter{}
}



func (p *_SpecIntervalCounter) Get_range_begin() _Key {
	return p._range_begin
}



func (p *_SpecIntervalCounter) Get_range_end() _Key {
	return p._range_end
}



func (p *_SpecIntervalCounter) Get_offset_key() _Key {
	return p._offset_key
}

var _SpecIntervalCounter__offset_rev_DEFAULT int64

func (p *_SpecIntervalCounter) Get_offset_rev() int64 {
	if !p.IsSet_offset_rev() {
		return _SpecIntervalCounter__offset_rev_DEFAULT
	}
	return *p._offset_rev
}



func (p *_SpecIntervalCounter) Get_key_intervals() _SpecKeyIntervals {
	return p._key_intervals
}



func (p *_SpecIntervalCounter) Get_values() _SpecValuesCounter {
	return p._values
}

var _SpecIntervalCounter__ts_start_DEFAULT *_SpecTimestamp

func (p *_SpecIntervalCounter) Get_ts_start() *_SpecTimestamp {
	if !p.IsSet_ts_start() {
		return _SpecIntervalCounter__ts_start_DEFAULT
	}
	return p._ts_start
}

var _SpecIntervalCounter__ts_finish_DEFAULT *_SpecTimestamp

func (p *_SpecIntervalCounter) Get_ts_finish() *_SpecTimestamp {
	if !p.IsSet_ts_finish() {
		return _SpecIntervalCounter__ts_finish_DEFAULT
	}
	return p._ts_finish
}

var _SpecIntervalCounter__flags_DEFAULT *_SpecFlags

func (p *_SpecIntervalCounter) Get_flags() *_SpecFlags {
	if !p.IsSet_flags() {
		return _SpecIntervalCounter__flags_DEFAULT
	}
	return p._flags
}

var _SpecIntervalCounter__options_DEFAULT _SpecIntervalOptions

func (p *_SpecIntervalCounter) Get_options() _SpecIntervalOptions {
	if !p.IsSet_options() {
		return _SpecIntervalCounter__options_DEFAULT
	}
	return *p._options
}

var _SpecIntervalCounter__updating_DEFAULT *_SpecIntervalUpdateCounter

func (p *_SpecIntervalCounter) Get_updating() *_SpecIntervalUpdateCounter {
	if !p.IsSet_updating() {
		return _SpecIntervalCounter__updating_DEFAULT
	}
	return p._updating
}

func (p *_SpecIntervalCounter) IsSet_offset_rev() bool {
	return p._offset_rev != nil
}

func (p *_SpecIntervalCounter) IsSet_ts_start() bool {
	return p._ts_start != nil
}

func (p *_SpecIntervalCounter) IsSet_ts_finish() bool {
	return p._ts_finish != nil
}

func (p *_SpecIntervalCounter) IsSet_flags() bool {
	return p._flags != nil
}

func (p *_SpecIntervalCounter) IsSet_options() bool {
	return p._options != nil
}

func (p *_SpecIntervalCounter) IsSet_updating() bool {
	return p._updating != nil
}

func (p *_SpecIntervalCounter) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField11(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_SpecIntervalCounter) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_Key, 0, size)
	p._range_begin = tSlice
	for i := 0; i < size; i++ {
		var _elem36 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__elem36 = v
		}
		p._range_begin = append(p._range_begin, _elem36)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SpecIntervalCounter) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_Key, 0, size)
	p._range_end = tSlice
	for i := 0; i < size; i++ {
		var _elem37 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__elem37 = v
		}
		p._range_end = append(p._range_end, _elem37)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SpecIntervalCounter) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_Key, 0, size)
	p._offset_key = tSlice
	for i := 0; i < size; i++ {
		var _elem38 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__elem38 = v
		}
		p._offset_key = append(p._offset_key, _elem38)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SpecIntervalCounter) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p._offset_rev = &v
	}
	return nil
}

func (p *_SpecIntervalCounter) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_SpecKeyIntervals, 0, size)
	p._key_intervals = tSlice
	for i := 0; i < size; i++ {
		__elem39 := &_SpecKeyInterval{}
		if err := __elem39.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem39), err)
		}
		p._key_intervals = append(p._key_intervals, _elem39)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SpecIntervalCounter) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_SpecValuesCounter, 0, size)
	p._values = tSlice
	for i := 0; i < size; i++ {
		__elem40 := &_SpecValueCounter{}
		if err := __elem40.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem40), err)
		}
		p._values = append(p._values, _elem40)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SpecIntervalCounter) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	p._ts_start = &_SpecTimestamp{}
	if err := p._ts_start.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._ts_start), err)
	}
	return nil
}

func (p *_SpecIntervalCounter) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	p._ts_finish = &_SpecTimestamp{}
	if err := p._ts_finish.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._ts_finish), err)
	}
	return nil
}

func (p *_SpecIntervalCounter) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	p._flags = &_SpecFlags{}
	if err := p._flags.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._flags), err)
	}
	return nil
}

func (p *_SpecIntervalCounter) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := _SpecIntervalOptions(v)
		p._options = &temp
	}
	return nil
}

func (p *_SpecIntervalCounter) ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
	p._updating = &_SpecIntervalUpdateCounter{}
	if err := p._updating.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._updating), err)
	}
	return nil
}

func (p *_SpecIntervalCounter) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SpecIntervalCounter"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
		if err := p.writeField6(ctx, oprot); err != nil { return err }
		if err := p.writeField7(ctx, oprot); err != nil { return err }
		if err := p.writeField8(ctx, oprot); err != nil { return err }
		if err := p.writeField9(ctx, oprot); err != nil { return err }
		if err := p.writeField10(ctx, oprot); err != nil { return err }
		if err := p.writeField11(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_SpecIntervalCounter) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "range_begin", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:range_begin: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p._range_begin)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._range_begin {
		if err := oprot.WriteBinary(ctx, v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:range_begin: ", p), err)
	}
	return err
}

func (p *_SpecIntervalCounter) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "range_end", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:range_end: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p._range_end)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._range_end {
		if err := oprot.WriteBinary(ctx, v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:range_end: ", p), err)
	}
	return err
}

func (p *_SpecIntervalCounter) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "offset_key", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:offset_key: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p._offset_key)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._offset_key {
		if err := oprot.WriteBinary(ctx, v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:offset_key: ", p), err)
	}
	return err
}

func (p *_SpecIntervalCounter) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_offset_rev() {
		if err := oprot.WriteFieldBegin(ctx, "offset_rev", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:offset_rev: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p._offset_rev)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.offset_rev (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:offset_rev: ", p), err)
		}
	}
	return err
}

func (p *_SpecIntervalCounter) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "key_intervals", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:key_intervals: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._key_intervals)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._key_intervals {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:key_intervals: ", p), err)
	}
	return err
}

func (p *_SpecIntervalCounter) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "values", thrift.LIST, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:values: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._values)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._values {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:values: ", p), err)
	}
	return err
}

func (p *_SpecIntervalCounter) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_ts_start() {
		if err := oprot.WriteFieldBegin(ctx, "ts_start", thrift.STRUCT, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:ts_start: ", p), err)
		}
		if err := p._ts_start.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._ts_start), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:ts_start: ", p), err)
		}
	}
	return err
}

func (p *_SpecIntervalCounter) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_ts_finish() {
		if err := oprot.WriteFieldBegin(ctx, "ts_finish", thrift.STRUCT, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:ts_finish: ", p), err)
		}
		if err := p._ts_finish.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._ts_finish), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:ts_finish: ", p), err)
		}
	}
	return err
}

func (p *_SpecIntervalCounter) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_flags() {
		if err := oprot.WriteFieldBegin(ctx, "flags", thrift.STRUCT, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:flags: ", p), err)
		}
		if err := p._flags.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._flags), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:flags: ", p), err)
		}
	}
	return err
}

func (p *_SpecIntervalCounter) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_options() {
		if err := oprot.WriteFieldBegin(ctx, "options", thrift.I32, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:options: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p._options)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.options (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:options: ", p), err)
		}
	}
	return err
}

func (p *_SpecIntervalCounter) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_updating() {
		if err := oprot.WriteFieldBegin(ctx, "updating", thrift.STRUCT, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:updating: ", p), err)
		}
		if err := p._updating.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._updating), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:updating: ", p), err)
		}
	}
	return err
}

func (p *_SpecIntervalCounter) Equals(other *_SpecIntervalCounter) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p._range_begin) != len(other._range_begin) { return false }
	for i, _tgt := range p._range_begin {
		_src41 := other._range_begin[i]
		if bytes.Compare(_tgt, _src41) != 0 { return false }
	}
	if len(p._range_end) != len(other._range_end) { return false }
	for i, _tgt := range p._range_end {
		_src42 := other._range_end[i]
		if bytes.Compare(_tgt, _src42) != 0 { return false }
	}
	if len(p._offset_key) != len(other._offset_key) { return false }
	for i, _tgt := range p._offset_key {
		_src43 := other._offset_key[i]
		if bytes.Compare(_tgt, _src43) != 0 { return false }
	}
	if p._offset_rev != other._offset_rev {
		if p._offset_rev == nil || other._offset_rev == nil {
			return false
		}
		if (*p._offset_rev) != (*other._offset_rev) { return false }
	}
	if len(p._key_intervals) != len(other._key_intervals) { return false }
	for i, _tgt := range p._key_intervals {
		_src44 := other._key_intervals[i]
		if !_tgt.Equals(_src44) { return false }
	}
	if len(p._values) != len(other._values) { return false }
	for i, _tgt := range p._values {
		_src45 := other._values[i]
		if !_tgt.Equals(_src45) { return false }
	}
	if !p._ts_start.Equals(other._ts_start) { return false }
	if !p._ts_finish.Equals(other._ts_finish) { return false }
	if !p._flags.Equals(other._flags) { return false }
	if p._options != other._options {
		if p._options == nil || other._options == nil {
			return false
		}
		if (*p._options) != (*other._options) { return false }
	}
	if !p._updating.Equals(other._updating) { return false }
	return true
}

func (p *_SpecIntervalCounter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_SpecIntervalCounter(%+v)", *p)
}

func (p *_SpecIntervalCounter) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._SpecIntervalCounter",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_SpecIntervalCounter)(nil)

func (p *_SpecIntervalCounter) Validate() error {
	return nil
}

// The Cells Interval Serial type Specifications with interval-scope Flags
// 
// Attributes:
//  - _range_begin: Begin of Ranges evaluation with this Key inclusive
//  - _range_end: End of Ranges evaluation with this Key inclusive
//  - _offset_key: Offset Cell Key of a Scan, select cells from this key inclusive
//  - _offset_rev: Offset Cell Timestamp of a Scan, select cells after this timestamp
//  - _key_intervals: The Key Intervals
//  - _values: The Serial Cell Value Specifications, cell-value fields match
//  - _ts_start: The Timestamp Start Spec, the start of cells-interval timestamp match
//  - _ts_finish: The Timestamp Finish Spec, the finish of cells-interval timestamp match
//  - _flags: The Interval Flags Specification
//  - _options: The Interval Options Specification
//  - _updating: The Serial-Value spec of an Updating Interval
// 
type _SpecIntervalSerial struct {
	_range_begin _Key `thrift:"range_begin,1" db:"range_begin" json:"range_begin"`
	_range_end _Key `thrift:"range_end,2" db:"range_end" json:"range_end"`
	_offset_key _Key `thrift:"offset_key,3" db:"offset_key" json:"offset_key"`
	_offset_rev *int64 `thrift:"offset_rev,4" db:"offset_rev" json:"offset_rev,omitempty"`
	_key_intervals _SpecKeyIntervals `thrift:"key_intervals,5" db:"key_intervals" json:"key_intervals"`
	_values _SpecValuesSerial `thrift:"values,6" db:"values" json:"values"`
	_ts_start *_SpecTimestamp `thrift:"ts_start,7" db:"ts_start" json:"ts_start,omitempty"`
	_ts_finish *_SpecTimestamp `thrift:"ts_finish,8" db:"ts_finish" json:"ts_finish,omitempty"`
	_flags *_SpecFlags `thrift:"flags,9" db:"flags" json:"flags,omitempty"`
	_options *_SpecIntervalOptions `thrift:"options,10" db:"options" json:"options,omitempty"`
	_updating *_SpecIntervalUpdateSerial `thrift:"updating,11" db:"updating" json:"updating,omitempty"`
}

func New_SpecIntervalSerial() *_SpecIntervalSerial {
	return &_SpecIntervalSerial{}
}



func (p *_SpecIntervalSerial) Get_range_begin() _Key {
	return p._range_begin
}



func (p *_SpecIntervalSerial) Get_range_end() _Key {
	return p._range_end
}



func (p *_SpecIntervalSerial) Get_offset_key() _Key {
	return p._offset_key
}

var _SpecIntervalSerial__offset_rev_DEFAULT int64

func (p *_SpecIntervalSerial) Get_offset_rev() int64 {
	if !p.IsSet_offset_rev() {
		return _SpecIntervalSerial__offset_rev_DEFAULT
	}
	return *p._offset_rev
}



func (p *_SpecIntervalSerial) Get_key_intervals() _SpecKeyIntervals {
	return p._key_intervals
}



func (p *_SpecIntervalSerial) Get_values() _SpecValuesSerial {
	return p._values
}

var _SpecIntervalSerial__ts_start_DEFAULT *_SpecTimestamp

func (p *_SpecIntervalSerial) Get_ts_start() *_SpecTimestamp {
	if !p.IsSet_ts_start() {
		return _SpecIntervalSerial__ts_start_DEFAULT
	}
	return p._ts_start
}

var _SpecIntervalSerial__ts_finish_DEFAULT *_SpecTimestamp

func (p *_SpecIntervalSerial) Get_ts_finish() *_SpecTimestamp {
	if !p.IsSet_ts_finish() {
		return _SpecIntervalSerial__ts_finish_DEFAULT
	}
	return p._ts_finish
}

var _SpecIntervalSerial__flags_DEFAULT *_SpecFlags

func (p *_SpecIntervalSerial) Get_flags() *_SpecFlags {
	if !p.IsSet_flags() {
		return _SpecIntervalSerial__flags_DEFAULT
	}
	return p._flags
}

var _SpecIntervalSerial__options_DEFAULT _SpecIntervalOptions

func (p *_SpecIntervalSerial) Get_options() _SpecIntervalOptions {
	if !p.IsSet_options() {
		return _SpecIntervalSerial__options_DEFAULT
	}
	return *p._options
}

var _SpecIntervalSerial__updating_DEFAULT *_SpecIntervalUpdateSerial

func (p *_SpecIntervalSerial) Get_updating() *_SpecIntervalUpdateSerial {
	if !p.IsSet_updating() {
		return _SpecIntervalSerial__updating_DEFAULT
	}
	return p._updating
}

func (p *_SpecIntervalSerial) IsSet_offset_rev() bool {
	return p._offset_rev != nil
}

func (p *_SpecIntervalSerial) IsSet_ts_start() bool {
	return p._ts_start != nil
}

func (p *_SpecIntervalSerial) IsSet_ts_finish() bool {
	return p._ts_finish != nil
}

func (p *_SpecIntervalSerial) IsSet_flags() bool {
	return p._flags != nil
}

func (p *_SpecIntervalSerial) IsSet_options() bool {
	return p._options != nil
}

func (p *_SpecIntervalSerial) IsSet_updating() bool {
	return p._updating != nil
}

func (p *_SpecIntervalSerial) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField11(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_SpecIntervalSerial) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_Key, 0, size)
	p._range_begin = tSlice
	for i := 0; i < size; i++ {
		var _elem46 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__elem46 = v
		}
		p._range_begin = append(p._range_begin, _elem46)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SpecIntervalSerial) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_Key, 0, size)
	p._range_end = tSlice
	for i := 0; i < size; i++ {
		var _elem47 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__elem47 = v
		}
		p._range_end = append(p._range_end, _elem47)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SpecIntervalSerial) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_Key, 0, size)
	p._offset_key = tSlice
	for i := 0; i < size; i++ {
		var _elem48 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__elem48 = v
		}
		p._offset_key = append(p._offset_key, _elem48)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SpecIntervalSerial) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p._offset_rev = &v
	}
	return nil
}

func (p *_SpecIntervalSerial) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_SpecKeyIntervals, 0, size)
	p._key_intervals = tSlice
	for i := 0; i < size; i++ {
		__elem49 := &_SpecKeyInterval{}
		if err := __elem49.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem49), err)
		}
		p._key_intervals = append(p._key_intervals, _elem49)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SpecIntervalSerial) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_SpecValuesSerial, 0, size)
	p._values = tSlice
	for i := 0; i < size; i++ {
		__elem50 := &_SpecValueSerial{}
		if err := __elem50.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem50), err)
		}
		p._values = append(p._values, _elem50)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SpecIntervalSerial) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	p._ts_start = &_SpecTimestamp{}
	if err := p._ts_start.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._ts_start), err)
	}
	return nil
}

func (p *_SpecIntervalSerial) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	p._ts_finish = &_SpecTimestamp{}
	if err := p._ts_finish.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._ts_finish), err)
	}
	return nil
}

func (p *_SpecIntervalSerial) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	p._flags = &_SpecFlags{}
	if err := p._flags.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._flags), err)
	}
	return nil
}

func (p *_SpecIntervalSerial) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := _SpecIntervalOptions(v)
		p._options = &temp
	}
	return nil
}

func (p *_SpecIntervalSerial) ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
	p._updating = &_SpecIntervalUpdateSerial{}
	if err := p._updating.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._updating), err)
	}
	return nil
}

func (p *_SpecIntervalSerial) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SpecIntervalSerial"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
		if err := p.writeField6(ctx, oprot); err != nil { return err }
		if err := p.writeField7(ctx, oprot); err != nil { return err }
		if err := p.writeField8(ctx, oprot); err != nil { return err }
		if err := p.writeField9(ctx, oprot); err != nil { return err }
		if err := p.writeField10(ctx, oprot); err != nil { return err }
		if err := p.writeField11(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_SpecIntervalSerial) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "range_begin", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:range_begin: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p._range_begin)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._range_begin {
		if err := oprot.WriteBinary(ctx, v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:range_begin: ", p), err)
	}
	return err
}

func (p *_SpecIntervalSerial) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "range_end", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:range_end: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p._range_end)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._range_end {
		if err := oprot.WriteBinary(ctx, v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:range_end: ", p), err)
	}
	return err
}

func (p *_SpecIntervalSerial) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "offset_key", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:offset_key: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p._offset_key)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._offset_key {
		if err := oprot.WriteBinary(ctx, v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:offset_key: ", p), err)
	}
	return err
}

func (p *_SpecIntervalSerial) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_offset_rev() {
		if err := oprot.WriteFieldBegin(ctx, "offset_rev", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:offset_rev: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p._offset_rev)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.offset_rev (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:offset_rev: ", p), err)
		}
	}
	return err
}

func (p *_SpecIntervalSerial) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "key_intervals", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:key_intervals: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._key_intervals)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._key_intervals {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:key_intervals: ", p), err)
	}
	return err
}

func (p *_SpecIntervalSerial) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "values", thrift.LIST, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:values: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._values)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._values {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:values: ", p), err)
	}
	return err
}

func (p *_SpecIntervalSerial) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_ts_start() {
		if err := oprot.WriteFieldBegin(ctx, "ts_start", thrift.STRUCT, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:ts_start: ", p), err)
		}
		if err := p._ts_start.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._ts_start), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:ts_start: ", p), err)
		}
	}
	return err
}

func (p *_SpecIntervalSerial) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_ts_finish() {
		if err := oprot.WriteFieldBegin(ctx, "ts_finish", thrift.STRUCT, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:ts_finish: ", p), err)
		}
		if err := p._ts_finish.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._ts_finish), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:ts_finish: ", p), err)
		}
	}
	return err
}

func (p *_SpecIntervalSerial) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_flags() {
		if err := oprot.WriteFieldBegin(ctx, "flags", thrift.STRUCT, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:flags: ", p), err)
		}
		if err := p._flags.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._flags), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:flags: ", p), err)
		}
	}
	return err
}

func (p *_SpecIntervalSerial) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_options() {
		if err := oprot.WriteFieldBegin(ctx, "options", thrift.I32, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:options: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p._options)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.options (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:options: ", p), err)
		}
	}
	return err
}

func (p *_SpecIntervalSerial) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_updating() {
		if err := oprot.WriteFieldBegin(ctx, "updating", thrift.STRUCT, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:updating: ", p), err)
		}
		if err := p._updating.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._updating), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:updating: ", p), err)
		}
	}
	return err
}

func (p *_SpecIntervalSerial) Equals(other *_SpecIntervalSerial) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p._range_begin) != len(other._range_begin) { return false }
	for i, _tgt := range p._range_begin {
		_src51 := other._range_begin[i]
		if bytes.Compare(_tgt, _src51) != 0 { return false }
	}
	if len(p._range_end) != len(other._range_end) { return false }
	for i, _tgt := range p._range_end {
		_src52 := other._range_end[i]
		if bytes.Compare(_tgt, _src52) != 0 { return false }
	}
	if len(p._offset_key) != len(other._offset_key) { return false }
	for i, _tgt := range p._offset_key {
		_src53 := other._offset_key[i]
		if bytes.Compare(_tgt, _src53) != 0 { return false }
	}
	if p._offset_rev != other._offset_rev {
		if p._offset_rev == nil || other._offset_rev == nil {
			return false
		}
		if (*p._offset_rev) != (*other._offset_rev) { return false }
	}
	if len(p._key_intervals) != len(other._key_intervals) { return false }
	for i, _tgt := range p._key_intervals {
		_src54 := other._key_intervals[i]
		if !_tgt.Equals(_src54) { return false }
	}
	if len(p._values) != len(other._values) { return false }
	for i, _tgt := range p._values {
		_src55 := other._values[i]
		if !_tgt.Equals(_src55) { return false }
	}
	if !p._ts_start.Equals(other._ts_start) { return false }
	if !p._ts_finish.Equals(other._ts_finish) { return false }
	if !p._flags.Equals(other._flags) { return false }
	if p._options != other._options {
		if p._options == nil || other._options == nil {
			return false
		}
		if (*p._options) != (*other._options) { return false }
	}
	if !p._updating.Equals(other._updating) { return false }
	return true
}

func (p *_SpecIntervalSerial) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_SpecIntervalSerial(%+v)", *p)
}

func (p *_SpecIntervalSerial) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._SpecIntervalSerial",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_SpecIntervalSerial)(nil)

func (p *_SpecIntervalSerial) Validate() error {
	return nil
}

// The Column Specifications, the Cells-Intervals(SpecIntervalPlain/s) specification for a PLAIN Type column
// 
// Attributes:
//  - _cid: The Column ID
//  - _intervals: The Cells Interval in a list-container
// 
type _SpecColumnPlain struct {
	_cid int64 `thrift:"cid,1" db:"cid" json:"cid"`
	_intervals []*_SpecIntervalPlain `thrift:"intervals,2" db:"intervals" json:"intervals"`
}

func New_SpecColumnPlain() *_SpecColumnPlain {
	return &_SpecColumnPlain{}
}



func (p *_SpecColumnPlain) Get_cid() int64 {
	return p._cid
}



func (p *_SpecColumnPlain) Get_intervals() []*_SpecIntervalPlain {
	return p._intervals
}

func (p *_SpecColumnPlain) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_SpecColumnPlain) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._cid = v
	}
	return nil
}

func (p *_SpecColumnPlain) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*_SpecIntervalPlain, 0, size)
	p._intervals = tSlice
	for i := 0; i < size; i++ {
		__elem56 := &_SpecIntervalPlain{}
		if err := __elem56.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem56), err)
		}
		p._intervals = append(p._intervals, _elem56)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SpecColumnPlain) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SpecColumnPlain"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_SpecColumnPlain) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "cid", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cid: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._cid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cid: ", p), err)
	}
	return err
}

func (p *_SpecColumnPlain) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "intervals", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:intervals: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._intervals)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._intervals {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:intervals: ", p), err)
	}
	return err
}

func (p *_SpecColumnPlain) Equals(other *_SpecColumnPlain) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._cid != other._cid { return false }
	if len(p._intervals) != len(other._intervals) { return false }
	for i, _tgt := range p._intervals {
		_src57 := other._intervals[i]
		if !_tgt.Equals(_src57) { return false }
	}
	return true
}

func (p *_SpecColumnPlain) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_SpecColumnPlain(%+v)", *p)
}

func (p *_SpecColumnPlain) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._SpecColumnPlain",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_SpecColumnPlain)(nil)

func (p *_SpecColumnPlain) Validate() error {
	return nil
}

// The Column Specifications, the Cells-Intervals(SpecIntervalCounter/s) specification for a COUNTER Type column
// 
// Attributes:
//  - _cid: The Column ID
//  - _intervals: The Cells Interval in a list-container
// 
type _SpecColumnCounter struct {
	_cid int64 `thrift:"cid,1" db:"cid" json:"cid"`
	_intervals []*_SpecIntervalCounter `thrift:"intervals,2" db:"intervals" json:"intervals"`
}

func New_SpecColumnCounter() *_SpecColumnCounter {
	return &_SpecColumnCounter{}
}



func (p *_SpecColumnCounter) Get_cid() int64 {
	return p._cid
}



func (p *_SpecColumnCounter) Get_intervals() []*_SpecIntervalCounter {
	return p._intervals
}

func (p *_SpecColumnCounter) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_SpecColumnCounter) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._cid = v
	}
	return nil
}

func (p *_SpecColumnCounter) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*_SpecIntervalCounter, 0, size)
	p._intervals = tSlice
	for i := 0; i < size; i++ {
		__elem58 := &_SpecIntervalCounter{}
		if err := __elem58.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem58), err)
		}
		p._intervals = append(p._intervals, _elem58)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SpecColumnCounter) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SpecColumnCounter"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_SpecColumnCounter) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "cid", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cid: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._cid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cid: ", p), err)
	}
	return err
}

func (p *_SpecColumnCounter) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "intervals", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:intervals: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._intervals)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._intervals {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:intervals: ", p), err)
	}
	return err
}

func (p *_SpecColumnCounter) Equals(other *_SpecColumnCounter) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._cid != other._cid { return false }
	if len(p._intervals) != len(other._intervals) { return false }
	for i, _tgt := range p._intervals {
		_src59 := other._intervals[i]
		if !_tgt.Equals(_src59) { return false }
	}
	return true
}

func (p *_SpecColumnCounter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_SpecColumnCounter(%+v)", *p)
}

func (p *_SpecColumnCounter) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._SpecColumnCounter",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_SpecColumnCounter)(nil)

func (p *_SpecColumnCounter) Validate() error {
	return nil
}

// The Column Specifications, the Cells-Intervals(SpecIntervalSerial/s) specification for a SERIAL Type Column
// 
// Attributes:
//  - _cid: The Column ID
//  - _intervals: The Serial Cells Interval in a list-container
// 
type _SpecColumnSerial struct {
	_cid int64 `thrift:"cid,1" db:"cid" json:"cid"`
	_intervals []*_SpecIntervalSerial `thrift:"intervals,2" db:"intervals" json:"intervals"`
}

func New_SpecColumnSerial() *_SpecColumnSerial {
	return &_SpecColumnSerial{}
}



func (p *_SpecColumnSerial) Get_cid() int64 {
	return p._cid
}



func (p *_SpecColumnSerial) Get_intervals() []*_SpecIntervalSerial {
	return p._intervals
}

func (p *_SpecColumnSerial) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_SpecColumnSerial) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._cid = v
	}
	return nil
}

func (p *_SpecColumnSerial) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*_SpecIntervalSerial, 0, size)
	p._intervals = tSlice
	for i := 0; i < size; i++ {
		__elem60 := &_SpecIntervalSerial{}
		if err := __elem60.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem60), err)
		}
		p._intervals = append(p._intervals, _elem60)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SpecColumnSerial) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SpecColumnSerial"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_SpecColumnSerial) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "cid", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cid: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._cid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cid: ", p), err)
	}
	return err
}

func (p *_SpecColumnSerial) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "intervals", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:intervals: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._intervals)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._intervals {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:intervals: ", p), err)
	}
	return err
}

func (p *_SpecColumnSerial) Equals(other *_SpecColumnSerial) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._cid != other._cid { return false }
	if len(p._intervals) != len(other._intervals) { return false }
	for i, _tgt := range p._intervals {
		_src61 := other._intervals[i]
		if !_tgt.Equals(_src61) { return false }
	}
	return true
}

func (p *_SpecColumnSerial) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_SpecColumnSerial(%+v)", *p)
}

func (p *_SpecColumnSerial) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._SpecColumnSerial",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_SpecColumnSerial)(nil)

func (p *_SpecColumnSerial) Validate() error {
	return nil
}

// The Scan Specifications, the Columns-Intervals(SpecColumn/s) with global-scope Flags
// 
// Attributes:
//  - _columns_plain: The Plain Column Intervals(SpecColumnPlain) in a list-container
//  - _columns_counter: The Counter Column Intervals(SpecColumnCounter) in a list-container
//  - _columns_serial: The Serial Column Intervals(SpecColumnSerial) in a list-container
//  - _flags: The Global Flags Specification
// 
type _SpecScan struct {
	_columns_plain []*_SpecColumnPlain `thrift:"columns_plain,1" db:"columns_plain" json:"columns_plain"`
	_columns_counter []*_SpecColumnCounter `thrift:"columns_counter,2" db:"columns_counter" json:"columns_counter"`
	_columns_serial []*_SpecColumnSerial `thrift:"columns_serial,3" db:"columns_serial" json:"columns_serial"`
	_flags *_SpecFlags `thrift:"flags,4" db:"flags" json:"flags,omitempty"`
}

func New_SpecScan() *_SpecScan {
	return &_SpecScan{}
}



func (p *_SpecScan) Get_columns_plain() []*_SpecColumnPlain {
	return p._columns_plain
}



func (p *_SpecScan) Get_columns_counter() []*_SpecColumnCounter {
	return p._columns_counter
}



func (p *_SpecScan) Get_columns_serial() []*_SpecColumnSerial {
	return p._columns_serial
}

var _SpecScan__flags_DEFAULT *_SpecFlags

func (p *_SpecScan) Get_flags() *_SpecFlags {
	if !p.IsSet_flags() {
		return _SpecScan__flags_DEFAULT
	}
	return p._flags
}

func (p *_SpecScan) IsSet_flags() bool {
	return p._flags != nil
}

func (p *_SpecScan) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_SpecScan) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*_SpecColumnPlain, 0, size)
	p._columns_plain = tSlice
	for i := 0; i < size; i++ {
		__elem62 := &_SpecColumnPlain{}
		if err := __elem62.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem62), err)
		}
		p._columns_plain = append(p._columns_plain, _elem62)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SpecScan) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*_SpecColumnCounter, 0, size)
	p._columns_counter = tSlice
	for i := 0; i < size; i++ {
		__elem63 := &_SpecColumnCounter{}
		if err := __elem63.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem63), err)
		}
		p._columns_counter = append(p._columns_counter, _elem63)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SpecScan) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*_SpecColumnSerial, 0, size)
	p._columns_serial = tSlice
	for i := 0; i < size; i++ {
		__elem64 := &_SpecColumnSerial{}
		if err := __elem64.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem64), err)
		}
		p._columns_serial = append(p._columns_serial, _elem64)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_SpecScan) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	p._flags = &_SpecFlags{}
	if err := p._flags.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._flags), err)
	}
	return nil
}

func (p *_SpecScan) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SpecScan"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_SpecScan) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "columns_plain", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:columns_plain: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._columns_plain)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._columns_plain {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:columns_plain: ", p), err)
	}
	return err
}

func (p *_SpecScan) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "columns_counter", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:columns_counter: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._columns_counter)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._columns_counter {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:columns_counter: ", p), err)
	}
	return err
}

func (p *_SpecScan) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "columns_serial", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:columns_serial: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._columns_serial)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._columns_serial {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:columns_serial: ", p), err)
	}
	return err
}

func (p *_SpecScan) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_flags() {
		if err := oprot.WriteFieldBegin(ctx, "flags", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:flags: ", p), err)
		}
		if err := p._flags.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._flags), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:flags: ", p), err)
		}
	}
	return err
}

func (p *_SpecScan) Equals(other *_SpecScan) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p._columns_plain) != len(other._columns_plain) { return false }
	for i, _tgt := range p._columns_plain {
		_src65 := other._columns_plain[i]
		if !_tgt.Equals(_src65) { return false }
	}
	if len(p._columns_counter) != len(other._columns_counter) { return false }
	for i, _tgt := range p._columns_counter {
		_src66 := other._columns_counter[i]
		if !_tgt.Equals(_src66) { return false }
	}
	if len(p._columns_serial) != len(other._columns_serial) { return false }
	for i, _tgt := range p._columns_serial {
		_src67 := other._columns_serial[i]
		if !_tgt.Equals(_src67) { return false }
	}
	if !p._flags.Equals(other._flags) { return false }
	return true
}

func (p *_SpecScan) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_SpecScan(%+v)", *p)
}

func (p *_SpecScan) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._SpecScan",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_SpecScan)(nil)

func (p *_SpecScan) Validate() error {
	return nil
}

// The Cell data for using with Update of PLAIN Column Type
// 
// Attributes:
//  - _f: The Cell Flag
//  - _k: The Cell Key
//  - _ts: The Cell Timestamp in nanoseconds
//  - _ts_desc: The Cell Version is in timestamp descending
//  - _v: The Cell Value
//  - _encoder: Optionally the Cell Value Encoding Type: ZLIB/SNAPPY/ZSTD
// 
type _UCellPlain struct {
	_f _Flag `thrift:"f,1" db:"f" json:"f"`
	_k _Key `thrift:"k,2" db:"k" json:"k"`
	_ts *int64 `thrift:"ts,3" db:"ts" json:"ts,omitempty"`
	_ts_desc *bool `thrift:"ts_desc,4" db:"ts_desc" json:"ts_desc,omitempty"`
	_v []byte `thrift:"v,5" db:"v" json:"v"`
	_encoder *_EncodingType `thrift:"encoder,6" db:"encoder" json:"encoder,omitempty"`
}

func New_UCellPlain() *_UCellPlain {
	return &_UCellPlain{}
}



func (p *_UCellPlain) Get_f() _Flag {
	return p._f
}



func (p *_UCellPlain) Get_k() _Key {
	return p._k
}

var _UCellPlain__ts_DEFAULT int64

func (p *_UCellPlain) Get_ts() int64 {
	if !p.IsSet_ts() {
		return _UCellPlain__ts_DEFAULT
	}
	return *p._ts
}

var _UCellPlain__ts_desc_DEFAULT bool

func (p *_UCellPlain) Get_ts_desc() bool {
	if !p.IsSet_ts_desc() {
		return _UCellPlain__ts_desc_DEFAULT
	}
	return *p._ts_desc
}



func (p *_UCellPlain) Get_v() []byte {
	return p._v
}

var _UCellPlain__encoder_DEFAULT _EncodingType

func (p *_UCellPlain) Get_encoder() _EncodingType {
	if !p.IsSet_encoder() {
		return _UCellPlain__encoder_DEFAULT
	}
	return *p._encoder
}

func (p *_UCellPlain) IsSet_ts() bool {
	return p._ts != nil
}

func (p *_UCellPlain) IsSet_ts_desc() bool {
	return p._ts_desc != nil
}

func (p *_UCellPlain) IsSet_encoder() bool {
	return p._encoder != nil
}

func (p *_UCellPlain) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_UCellPlain) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := _Flag(v)
		p._f = temp
	}
	return nil
}

func (p *_UCellPlain) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_Key, 0, size)
	p._k = tSlice
	for i := 0; i < size; i++ {
		var _elem68 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__elem68 = v
		}
		p._k = append(p._k, _elem68)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_UCellPlain) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p._ts = &v
	}
	return nil
}

func (p *_UCellPlain) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p._ts_desc = &v
	}
	return nil
}

func (p *_UCellPlain) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p._v = v
	}
	return nil
}

func (p *_UCellPlain) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := _EncodingType(v)
		p._encoder = &temp
	}
	return nil
}

func (p *_UCellPlain) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UCellPlain"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
		if err := p.writeField6(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_UCellPlain) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "f", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:f: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p._f)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.f (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:f: ", p), err)
	}
	return err
}

func (p *_UCellPlain) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "k", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:k: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p._k)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._k {
		if err := oprot.WriteBinary(ctx, v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:k: ", p), err)
	}
	return err
}

func (p *_UCellPlain) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_ts() {
		if err := oprot.WriteFieldBegin(ctx, "ts", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ts: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p._ts)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ts (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ts: ", p), err)
		}
	}
	return err
}

func (p *_UCellPlain) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_ts_desc() {
		if err := oprot.WriteFieldBegin(ctx, "ts_desc", thrift.BOOL, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ts_desc: ", p), err)
		}
		if err := oprot.WriteBool(ctx, bool(*p._ts_desc)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ts_desc (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ts_desc: ", p), err)
		}
	}
	return err
}

func (p *_UCellPlain) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:v: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p._v); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.v (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:v: ", p), err)
	}
	return err
}

func (p *_UCellPlain) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_encoder() {
		if err := oprot.WriteFieldBegin(ctx, "encoder", thrift.I32, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:encoder: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p._encoder)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.encoder (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:encoder: ", p), err)
		}
	}
	return err
}

func (p *_UCellPlain) Equals(other *_UCellPlain) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._f != other._f { return false }
	if len(p._k) != len(other._k) { return false }
	for i, _tgt := range p._k {
		_src69 := other._k[i]
		if bytes.Compare(_tgt, _src69) != 0 { return false }
	}
	if p._ts != other._ts {
		if p._ts == nil || other._ts == nil {
			return false
		}
		if (*p._ts) != (*other._ts) { return false }
	}
	if p._ts_desc != other._ts_desc {
		if p._ts_desc == nil || other._ts_desc == nil {
			return false
		}
		if (*p._ts_desc) != (*other._ts_desc) { return false }
	}
	if bytes.Compare(p._v, other._v) != 0 { return false }
	if p._encoder != other._encoder {
		if p._encoder == nil || other._encoder == nil {
			return false
		}
		if (*p._encoder) != (*other._encoder) { return false }
	}
	return true
}

func (p *_UCellPlain) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_UCellPlain(%+v)", *p)
}

func (p *_UCellPlain) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._UCellPlain",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_UCellPlain)(nil)

func (p *_UCellPlain) Validate() error {
	return nil
}

// The Cell data for using with Update of COUNTER Column Type
// 
// Attributes:
//  - _f: The Cell Flag
//  - _k: The Cell Key
//  - _ts: The Cell Timestamp in nanoseconds
//  - _ts_desc: The Cell Version is in timestamp descending
//  - _op: The Cell Counter Operation
//  - _v: The Cell Counter Value
// 
type _UCellCounter struct {
	_f _Flag `thrift:"f,1" db:"f" json:"f"`
	_k _Key `thrift:"k,2" db:"k" json:"k"`
	_ts *int64 `thrift:"ts,3" db:"ts" json:"ts,omitempty"`
	_ts_desc *bool `thrift:"ts_desc,4" db:"ts_desc" json:"ts_desc,omitempty"`
	_op int8 `thrift:"op,5" db:"op" json:"op"`
	_v int64 `thrift:"v,6" db:"v" json:"v"`
}

func New_UCellCounter() *_UCellCounter {
	return &_UCellCounter{}
}



func (p *_UCellCounter) Get_f() _Flag {
	return p._f
}



func (p *_UCellCounter) Get_k() _Key {
	return p._k
}

var _UCellCounter__ts_DEFAULT int64

func (p *_UCellCounter) Get_ts() int64 {
	if !p.IsSet_ts() {
		return _UCellCounter__ts_DEFAULT
	}
	return *p._ts
}

var _UCellCounter__ts_desc_DEFAULT bool

func (p *_UCellCounter) Get_ts_desc() bool {
	if !p.IsSet_ts_desc() {
		return _UCellCounter__ts_desc_DEFAULT
	}
	return *p._ts_desc
}



func (p *_UCellCounter) Get_op() int8 {
	return p._op
}



func (p *_UCellCounter) Get_v() int64 {
	return p._v
}

func (p *_UCellCounter) IsSet_ts() bool {
	return p._ts != nil
}

func (p *_UCellCounter) IsSet_ts_desc() bool {
	return p._ts_desc != nil
}

func (p *_UCellCounter) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_UCellCounter) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := _Flag(v)
		p._f = temp
	}
	return nil
}

func (p *_UCellCounter) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_Key, 0, size)
	p._k = tSlice
	for i := 0; i < size; i++ {
		var _elem70 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__elem70 = v
		}
		p._k = append(p._k, _elem70)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_UCellCounter) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p._ts = &v
	}
	return nil
}

func (p *_UCellCounter) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p._ts_desc = &v
	}
	return nil
}

func (p *_UCellCounter) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := int8(v)
		p._op = temp
	}
	return nil
}

func (p *_UCellCounter) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p._v = v
	}
	return nil
}

func (p *_UCellCounter) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UCellCounter"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
		if err := p.writeField6(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_UCellCounter) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "f", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:f: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p._f)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.f (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:f: ", p), err)
	}
	return err
}

func (p *_UCellCounter) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "k", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:k: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p._k)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._k {
		if err := oprot.WriteBinary(ctx, v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:k: ", p), err)
	}
	return err
}

func (p *_UCellCounter) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_ts() {
		if err := oprot.WriteFieldBegin(ctx, "ts", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ts: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p._ts)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ts (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ts: ", p), err)
		}
	}
	return err
}

func (p *_UCellCounter) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_ts_desc() {
		if err := oprot.WriteFieldBegin(ctx, "ts_desc", thrift.BOOL, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ts_desc: ", p), err)
		}
		if err := oprot.WriteBool(ctx, bool(*p._ts_desc)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ts_desc (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ts_desc: ", p), err)
		}
	}
	return err
}

func (p *_UCellCounter) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "op", thrift.BYTE, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:op: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p._op)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.op (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:op: ", p), err)
	}
	return err
}

func (p *_UCellCounter) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:v: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._v)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.v (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:v: ", p), err)
	}
	return err
}

func (p *_UCellCounter) Equals(other *_UCellCounter) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._f != other._f { return false }
	if len(p._k) != len(other._k) { return false }
	for i, _tgt := range p._k {
		_src71 := other._k[i]
		if bytes.Compare(_tgt, _src71) != 0 { return false }
	}
	if p._ts != other._ts {
		if p._ts == nil || other._ts == nil {
			return false
		}
		if (*p._ts) != (*other._ts) { return false }
	}
	if p._ts_desc != other._ts_desc {
		if p._ts_desc == nil || other._ts_desc == nil {
			return false
		}
		if (*p._ts_desc) != (*other._ts_desc) { return false }
	}
	if p._op != other._op { return false }
	if p._v != other._v { return false }
	return true
}

func (p *_UCellCounter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_UCellCounter(%+v)", *p)
}

func (p *_UCellCounter) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._UCellCounter",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_UCellCounter)(nil)

func (p *_UCellCounter) Validate() error {
	return nil
}

// The Serial Value Cell field
// 
// Attributes:
//  - _field_id: The Field ID, a single ID can have any/all the field types
//  - _v_int64: The INT64 type field
//  - _v_double: The DOUBLE type field
//  - _v_bytes: The BYTES type field
//  - _v_key: The Cell KEY type field
//  - _v_li: The LIST INT64 type field
//  - _v_lb: The LIST BYTES type field
// 
type _CellValueSerial struct {
	_field_id int32 `thrift:"field_id,1" db:"field_id" json:"field_id"`
	_v_int64 *int64 `thrift:"v_int64,2" db:"v_int64" json:"v_int64,omitempty"`
	_v_double *float64 `thrift:"v_double,3" db:"v_double" json:"v_double,omitempty"`
	_v_bytes []byte `thrift:"v_bytes,4" db:"v_bytes" json:"v_bytes,omitempty"`
	_v_key _Key `thrift:"v_key,5" db:"v_key" json:"v_key,omitempty"`
	_v_li []int64 `thrift:"v_li,6" db:"v_li" json:"v_li,omitempty"`
	_v_lb [][]byte `thrift:"v_lb,7" db:"v_lb" json:"v_lb,omitempty"`
}

func New_CellValueSerial() *_CellValueSerial {
	return &_CellValueSerial{}
}



func (p *_CellValueSerial) Get_field_id() int32 {
	return p._field_id
}

var _CellValueSerial__v_int64_DEFAULT int64

func (p *_CellValueSerial) Get_v_int64() int64 {
	if !p.IsSet_v_int64() {
		return _CellValueSerial__v_int64_DEFAULT
	}
	return *p._v_int64
}

var _CellValueSerial__v_double_DEFAULT float64

func (p *_CellValueSerial) Get_v_double() float64 {
	if !p.IsSet_v_double() {
		return _CellValueSerial__v_double_DEFAULT
	}
	return *p._v_double
}

var _CellValueSerial__v_bytes_DEFAULT []byte


func (p *_CellValueSerial) Get_v_bytes() []byte {
	return p._v_bytes
}

var _CellValueSerial__v_key_DEFAULT _Key


func (p *_CellValueSerial) Get_v_key() _Key {
	return p._v_key
}

var _CellValueSerial__v_li_DEFAULT []int64


func (p *_CellValueSerial) Get_v_li() []int64 {
	return p._v_li
}

var _CellValueSerial__v_lb_DEFAULT [][]byte


func (p *_CellValueSerial) Get_v_lb() [][]byte {
	return p._v_lb
}

func (p *_CellValueSerial) IsSet_v_int64() bool {
	return p._v_int64 != nil
}

func (p *_CellValueSerial) IsSet_v_double() bool {
	return p._v_double != nil
}

func (p *_CellValueSerial) IsSet_v_bytes() bool {
	return p._v_bytes != nil
}

func (p *_CellValueSerial) IsSet_v_key() bool {
	return p._v_key != nil
}

func (p *_CellValueSerial) IsSet_v_li() bool {
	return p._v_li != nil
}

func (p *_CellValueSerial) IsSet_v_lb() bool {
	return p._v_lb != nil
}

func (p *_CellValueSerial) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_CellValueSerial) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._field_id = v
	}
	return nil
}

func (p *_CellValueSerial) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p._v_int64 = &v
	}
	return nil
}

func (p *_CellValueSerial) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p._v_double = &v
	}
	return nil
}

func (p *_CellValueSerial) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p._v_bytes = v
	}
	return nil
}

func (p *_CellValueSerial) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_Key, 0, size)
	p._v_key = tSlice
	for i := 0; i < size; i++ {
		var _elem72 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__elem72 = v
		}
		p._v_key = append(p._v_key, _elem72)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_CellValueSerial) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p._v_li = tSlice
	for i := 0; i < size; i++ {
		var _elem73 int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__elem73 = v
		}
		p._v_li = append(p._v_li, _elem73)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_CellValueSerial) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p._v_lb = tSlice
	for i := 0; i < size; i++ {
		var _elem74 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__elem74 = v
		}
		p._v_lb = append(p._v_lb, _elem74)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_CellValueSerial) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CellValueSerial"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
		if err := p.writeField6(ctx, oprot); err != nil { return err }
		if err := p.writeField7(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_CellValueSerial) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "field_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:field_id: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p._field_id)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.field_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:field_id: ", p), err)
	}
	return err
}

func (p *_CellValueSerial) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_v_int64() {
		if err := oprot.WriteFieldBegin(ctx, "v_int64", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:v_int64: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p._v_int64)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.v_int64 (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:v_int64: ", p), err)
		}
	}
	return err
}

func (p *_CellValueSerial) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_v_double() {
		if err := oprot.WriteFieldBegin(ctx, "v_double", thrift.DOUBLE, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:v_double: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p._v_double)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.v_double (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:v_double: ", p), err)
		}
	}
	return err
}

func (p *_CellValueSerial) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_v_bytes() {
		if err := oprot.WriteFieldBegin(ctx, "v_bytes", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:v_bytes: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p._v_bytes); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.v_bytes (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:v_bytes: ", p), err)
		}
	}
	return err
}

func (p *_CellValueSerial) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_v_key() {
		if err := oprot.WriteFieldBegin(ctx, "v_key", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:v_key: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p._v_key)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p._v_key {
			if err := oprot.WriteBinary(ctx, v); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:v_key: ", p), err)
		}
	}
	return err
}

func (p *_CellValueSerial) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_v_li() {
		if err := oprot.WriteFieldBegin(ctx, "v_li", thrift.LIST, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:v_li: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.I64, len(p._v_li)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p._v_li {
			if err := oprot.WriteI64(ctx, int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:v_li: ", p), err)
		}
	}
	return err
}

func (p *_CellValueSerial) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_v_lb() {
		if err := oprot.WriteFieldBegin(ctx, "v_lb", thrift.LIST, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:v_lb: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p._v_lb)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p._v_lb {
			if err := oprot.WriteBinary(ctx, v); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:v_lb: ", p), err)
		}
	}
	return err
}

func (p *_CellValueSerial) Equals(other *_CellValueSerial) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._field_id != other._field_id { return false }
	if p._v_int64 != other._v_int64 {
		if p._v_int64 == nil || other._v_int64 == nil {
			return false
		}
		if (*p._v_int64) != (*other._v_int64) { return false }
	}
	if p._v_double != other._v_double {
		if p._v_double == nil || other._v_double == nil {
			return false
		}
		if (*p._v_double) != (*other._v_double) { return false }
	}
	if bytes.Compare(p._v_bytes, other._v_bytes) != 0 { return false }
	if len(p._v_key) != len(other._v_key) { return false }
	for i, _tgt := range p._v_key {
		_src75 := other._v_key[i]
		if bytes.Compare(_tgt, _src75) != 0 { return false }
	}
	if len(p._v_li) != len(other._v_li) { return false }
	for i, _tgt := range p._v_li {
		_src76 := other._v_li[i]
		if _tgt != _src76 { return false }
	}
	if len(p._v_lb) != len(other._v_lb) { return false }
	for i, _tgt := range p._v_lb {
		_src77 := other._v_lb[i]
		if bytes.Compare(_tgt, _src77) != 0 { return false }
	}
	return true
}

func (p *_CellValueSerial) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_CellValueSerial(%+v)", *p)
}

func (p *_CellValueSerial) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._CellValueSerial",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_CellValueSerial)(nil)

func (p *_CellValueSerial) Validate() error {
	return nil
}

// Serial INT64 Field Update
// 
// Attributes:
//  - _ctrl
//  - _op
//  - _pos
//  - _comp
//  - _v
// 
type _FU_INT64 struct {
	_ctrl int8 `thrift:"ctrl,1" db:"ctrl" json:"ctrl"`
	_op _FU_MATH_OP `thrift:"op,2" db:"op" json:"op"`
	_pos *int32 `thrift:"pos,3" db:"pos" json:"pos,omitempty"`
	_comp *_Comp `thrift:"comp,4" db:"comp" json:"comp,omitempty"`
	_v int64 `thrift:"v,5" db:"v" json:"v"`
}

func New_FU_INT64() *_FU_INT64 {
	return &_FU_INT64{
		_op: 0,
	}
}



func (p *_FU_INT64) Get_ctrl() int8 {
	return p._ctrl
}



func (p *_FU_INT64) Get_op() _FU_MATH_OP {
	return p._op
}

var _FU_INT64__pos_DEFAULT int32

func (p *_FU_INT64) Get_pos() int32 {
	if !p.IsSet_pos() {
		return _FU_INT64__pos_DEFAULT
	}
	return *p._pos
}

var _FU_INT64__comp_DEFAULT _Comp

func (p *_FU_INT64) Get_comp() _Comp {
	if !p.IsSet_comp() {
		return _FU_INT64__comp_DEFAULT
	}
	return *p._comp
}



func (p *_FU_INT64) Get_v() int64 {
	return p._v
}

func (p *_FU_INT64) IsSet_pos() bool {
	return p._pos != nil
}

func (p *_FU_INT64) IsSet_comp() bool {
	return p._comp != nil
}

func (p *_FU_INT64) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_FU_INT64) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p._ctrl = temp
	}
	return nil
}

func (p *_FU_INT64) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := _FU_MATH_OP(v)
		p._op = temp
	}
	return nil
}

func (p *_FU_INT64) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p._pos = &v
	}
	return nil
}

func (p *_FU_INT64) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := _Comp(v)
		p._comp = &temp
	}
	return nil
}

func (p *_FU_INT64) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p._v = v
	}
	return nil
}

func (p *_FU_INT64) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "FU_INT64"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_FU_INT64) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ctrl", thrift.BYTE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ctrl: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p._ctrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ctrl (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ctrl: ", p), err)
	}
	return err
}

func (p *_FU_INT64) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "op", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:op: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p._op)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.op (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:op: ", p), err)
	}
	return err
}

func (p *_FU_INT64) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_pos() {
		if err := oprot.WriteFieldBegin(ctx, "pos", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pos: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p._pos)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pos (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pos: ", p), err)
		}
	}
	return err
}

func (p *_FU_INT64) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_comp() {
		if err := oprot.WriteFieldBegin(ctx, "comp", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:comp: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p._comp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.comp (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:comp: ", p), err)
		}
	}
	return err
}

func (p *_FU_INT64) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:v: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._v)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.v (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:v: ", p), err)
	}
	return err
}

func (p *_FU_INT64) Equals(other *_FU_INT64) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._ctrl != other._ctrl { return false }
	if p._op != other._op { return false }
	if p._pos != other._pos {
		if p._pos == nil || other._pos == nil {
			return false
		}
		if (*p._pos) != (*other._pos) { return false }
	}
	if p._comp != other._comp {
		if p._comp == nil || other._comp == nil {
			return false
		}
		if (*p._comp) != (*other._comp) { return false }
	}
	if p._v != other._v { return false }
	return true
}

func (p *_FU_INT64) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_FU_INT64(%+v)", *p)
}

func (p *_FU_INT64) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._FU_INT64",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_FU_INT64)(nil)

func (p *_FU_INT64) Validate() error {
	return nil
}

// Serial DOUBLE Field Update
// 
// Attributes:
//  - _ctrl
//  - _op
//  - _pos
//  - _comp
//  - _v
// 
type _FU_DOUBLE struct {
	_ctrl int8 `thrift:"ctrl,1" db:"ctrl" json:"ctrl"`
	_op _FU_MATH_OP `thrift:"op,2" db:"op" json:"op"`
	_pos *int32 `thrift:"pos,3" db:"pos" json:"pos,omitempty"`
	_comp *_Comp `thrift:"comp,4" db:"comp" json:"comp,omitempty"`
	_v float64 `thrift:"v,5" db:"v" json:"v"`
}

func New_FU_DOUBLE() *_FU_DOUBLE {
	return &_FU_DOUBLE{
		_op: 0,
	}
}



func (p *_FU_DOUBLE) Get_ctrl() int8 {
	return p._ctrl
}



func (p *_FU_DOUBLE) Get_op() _FU_MATH_OP {
	return p._op
}

var _FU_DOUBLE__pos_DEFAULT int32

func (p *_FU_DOUBLE) Get_pos() int32 {
	if !p.IsSet_pos() {
		return _FU_DOUBLE__pos_DEFAULT
	}
	return *p._pos
}

var _FU_DOUBLE__comp_DEFAULT _Comp

func (p *_FU_DOUBLE) Get_comp() _Comp {
	if !p.IsSet_comp() {
		return _FU_DOUBLE__comp_DEFAULT
	}
	return *p._comp
}



func (p *_FU_DOUBLE) Get_v() float64 {
	return p._v
}

func (p *_FU_DOUBLE) IsSet_pos() bool {
	return p._pos != nil
}

func (p *_FU_DOUBLE) IsSet_comp() bool {
	return p._comp != nil
}

func (p *_FU_DOUBLE) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_FU_DOUBLE) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p._ctrl = temp
	}
	return nil
}

func (p *_FU_DOUBLE) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := _FU_MATH_OP(v)
		p._op = temp
	}
	return nil
}

func (p *_FU_DOUBLE) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p._pos = &v
	}
	return nil
}

func (p *_FU_DOUBLE) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := _Comp(v)
		p._comp = &temp
	}
	return nil
}

func (p *_FU_DOUBLE) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p._v = v
	}
	return nil
}

func (p *_FU_DOUBLE) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "FU_DOUBLE"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_FU_DOUBLE) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ctrl", thrift.BYTE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ctrl: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p._ctrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ctrl (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ctrl: ", p), err)
	}
	return err
}

func (p *_FU_DOUBLE) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "op", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:op: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p._op)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.op (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:op: ", p), err)
	}
	return err
}

func (p *_FU_DOUBLE) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_pos() {
		if err := oprot.WriteFieldBegin(ctx, "pos", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pos: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p._pos)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pos (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pos: ", p), err)
		}
	}
	return err
}

func (p *_FU_DOUBLE) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_comp() {
		if err := oprot.WriteFieldBegin(ctx, "comp", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:comp: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p._comp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.comp (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:comp: ", p), err)
		}
	}
	return err
}

func (p *_FU_DOUBLE) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v", thrift.DOUBLE, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:v: ", p), err)
	}
	if err := oprot.WriteDouble(ctx, float64(p._v)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.v (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:v: ", p), err)
	}
	return err
}

func (p *_FU_DOUBLE) Equals(other *_FU_DOUBLE) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._ctrl != other._ctrl { return false }
	if p._op != other._op { return false }
	if p._pos != other._pos {
		if p._pos == nil || other._pos == nil {
			return false
		}
		if (*p._pos) != (*other._pos) { return false }
	}
	if p._comp != other._comp {
		if p._comp == nil || other._comp == nil {
			return false
		}
		if (*p._comp) != (*other._comp) { return false }
	}
	if p._v != other._v { return false }
	return true
}

func (p *_FU_DOUBLE) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_FU_DOUBLE(%+v)", *p)
}

func (p *_FU_DOUBLE) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._FU_DOUBLE",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_FU_DOUBLE)(nil)

func (p *_FU_DOUBLE) Validate() error {
	return nil
}

// Serial BYTES Field Update
// 
// Attributes:
//  - _ctrl
//  - _op
//  - _pos
//  - _comp
//  - _v
// 
type _FU_BYTES struct {
	_ctrl int8 `thrift:"ctrl,1" db:"ctrl" json:"ctrl"`
	_op _FU_LIST_OP `thrift:"op,2" db:"op" json:"op"`
	_pos *int32 `thrift:"pos,3" db:"pos" json:"pos,omitempty"`
	_comp *_Comp `thrift:"comp,4" db:"comp" json:"comp,omitempty"`
	_v []byte `thrift:"v,5" db:"v" json:"v"`
}

func New_FU_BYTES() *_FU_BYTES {
	return &_FU_BYTES{
		_op: 0,
	}
}



func (p *_FU_BYTES) Get_ctrl() int8 {
	return p._ctrl
}



func (p *_FU_BYTES) Get_op() _FU_LIST_OP {
	return p._op
}

var _FU_BYTES__pos_DEFAULT int32

func (p *_FU_BYTES) Get_pos() int32 {
	if !p.IsSet_pos() {
		return _FU_BYTES__pos_DEFAULT
	}
	return *p._pos
}

var _FU_BYTES__comp_DEFAULT _Comp

func (p *_FU_BYTES) Get_comp() _Comp {
	if !p.IsSet_comp() {
		return _FU_BYTES__comp_DEFAULT
	}
	return *p._comp
}



func (p *_FU_BYTES) Get_v() []byte {
	return p._v
}

func (p *_FU_BYTES) IsSet_pos() bool {
	return p._pos != nil
}

func (p *_FU_BYTES) IsSet_comp() bool {
	return p._comp != nil
}

func (p *_FU_BYTES) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_FU_BYTES) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p._ctrl = temp
	}
	return nil
}

func (p *_FU_BYTES) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := _FU_LIST_OP(v)
		p._op = temp
	}
	return nil
}

func (p *_FU_BYTES) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p._pos = &v
	}
	return nil
}

func (p *_FU_BYTES) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := _Comp(v)
		p._comp = &temp
	}
	return nil
}

func (p *_FU_BYTES) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p._v = v
	}
	return nil
}

func (p *_FU_BYTES) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "FU_BYTES"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_FU_BYTES) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ctrl", thrift.BYTE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ctrl: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p._ctrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ctrl (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ctrl: ", p), err)
	}
	return err
}

func (p *_FU_BYTES) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "op", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:op: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p._op)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.op (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:op: ", p), err)
	}
	return err
}

func (p *_FU_BYTES) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_pos() {
		if err := oprot.WriteFieldBegin(ctx, "pos", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pos: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p._pos)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pos (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pos: ", p), err)
		}
	}
	return err
}

func (p *_FU_BYTES) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_comp() {
		if err := oprot.WriteFieldBegin(ctx, "comp", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:comp: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p._comp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.comp (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:comp: ", p), err)
		}
	}
	return err
}

func (p *_FU_BYTES) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:v: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p._v); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.v (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:v: ", p), err)
	}
	return err
}

func (p *_FU_BYTES) Equals(other *_FU_BYTES) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._ctrl != other._ctrl { return false }
	if p._op != other._op { return false }
	if p._pos != other._pos {
		if p._pos == nil || other._pos == nil {
			return false
		}
		if (*p._pos) != (*other._pos) { return false }
	}
	if p._comp != other._comp {
		if p._comp == nil || other._comp == nil {
			return false
		}
		if (*p._comp) != (*other._comp) { return false }
	}
	if bytes.Compare(p._v, other._v) != 0 { return false }
	return true
}

func (p *_FU_BYTES) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_FU_BYTES(%+v)", *p)
}

func (p *_FU_BYTES) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._FU_BYTES",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_FU_BYTES)(nil)

func (p *_FU_BYTES) Validate() error {
	return nil
}

// Serial LIST_INT64 Field Update
// 
// Attributes:
//  - _ctrl
//  - _op
//  - _pos
//  - _v
// 
type _FU_LI struct {
	_ctrl int8 `thrift:"ctrl,1" db:"ctrl" json:"ctrl"`
	_op _FU_LIST_OP `thrift:"op,2" db:"op" json:"op"`
	_pos *int32 `thrift:"pos,3" db:"pos" json:"pos,omitempty"`
	_v []*_FU_INT64 `thrift:"v,4" db:"v" json:"v"`
}

func New_FU_LI() *_FU_LI {
	return &_FU_LI{
		_op: 0,
	}
}



func (p *_FU_LI) Get_ctrl() int8 {
	return p._ctrl
}



func (p *_FU_LI) Get_op() _FU_LIST_OP {
	return p._op
}

var _FU_LI__pos_DEFAULT int32

func (p *_FU_LI) Get_pos() int32 {
	if !p.IsSet_pos() {
		return _FU_LI__pos_DEFAULT
	}
	return *p._pos
}



func (p *_FU_LI) Get_v() []*_FU_INT64 {
	return p._v
}

func (p *_FU_LI) IsSet_pos() bool {
	return p._pos != nil
}

func (p *_FU_LI) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_FU_LI) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p._ctrl = temp
	}
	return nil
}

func (p *_FU_LI) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := _FU_LIST_OP(v)
		p._op = temp
	}
	return nil
}

func (p *_FU_LI) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p._pos = &v
	}
	return nil
}

func (p *_FU_LI) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*_FU_INT64, 0, size)
	p._v = tSlice
	for i := 0; i < size; i++ {
		__elem78 := &_FU_INT64{
			_op: 0,
		}
		if err := __elem78.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem78), err)
		}
		p._v = append(p._v, _elem78)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_FU_LI) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "FU_LI"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_FU_LI) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ctrl", thrift.BYTE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ctrl: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p._ctrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ctrl (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ctrl: ", p), err)
	}
	return err
}

func (p *_FU_LI) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "op", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:op: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p._op)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.op (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:op: ", p), err)
	}
	return err
}

func (p *_FU_LI) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_pos() {
		if err := oprot.WriteFieldBegin(ctx, "pos", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pos: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p._pos)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pos (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pos: ", p), err)
		}
	}
	return err
}

func (p *_FU_LI) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:v: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._v)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._v {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:v: ", p), err)
	}
	return err
}

func (p *_FU_LI) Equals(other *_FU_LI) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._ctrl != other._ctrl { return false }
	if p._op != other._op { return false }
	if p._pos != other._pos {
		if p._pos == nil || other._pos == nil {
			return false
		}
		if (*p._pos) != (*other._pos) { return false }
	}
	if len(p._v) != len(other._v) { return false }
	for i, _tgt := range p._v {
		_src79 := other._v[i]
		if !_tgt.Equals(_src79) { return false }
	}
	return true
}

func (p *_FU_LI) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_FU_LI(%+v)", *p)
}

func (p *_FU_LI) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._FU_LI",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_FU_LI)(nil)

func (p *_FU_LI) Validate() error {
	return nil
}

// Serial LIST_BYTES Field Update
// 
// Attributes:
//  - _ctrl
//  - _op
//  - _pos
//  - _v
// 
type _FU_LB struct {
	_ctrl int8 `thrift:"ctrl,1" db:"ctrl" json:"ctrl"`
	_op _FU_LIST_OP `thrift:"op,2" db:"op" json:"op"`
	_pos *int32 `thrift:"pos,3" db:"pos" json:"pos,omitempty"`
	_v []*_FU_BYTES `thrift:"v,4" db:"v" json:"v"`
}

func New_FU_LB() *_FU_LB {
	return &_FU_LB{
		_op: 0,
	}
}



func (p *_FU_LB) Get_ctrl() int8 {
	return p._ctrl
}



func (p *_FU_LB) Get_op() _FU_LIST_OP {
	return p._op
}

var _FU_LB__pos_DEFAULT int32

func (p *_FU_LB) Get_pos() int32 {
	if !p.IsSet_pos() {
		return _FU_LB__pos_DEFAULT
	}
	return *p._pos
}



func (p *_FU_LB) Get_v() []*_FU_BYTES {
	return p._v
}

func (p *_FU_LB) IsSet_pos() bool {
	return p._pos != nil
}

func (p *_FU_LB) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_FU_LB) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p._ctrl = temp
	}
	return nil
}

func (p *_FU_LB) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := _FU_LIST_OP(v)
		p._op = temp
	}
	return nil
}

func (p *_FU_LB) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p._pos = &v
	}
	return nil
}

func (p *_FU_LB) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*_FU_BYTES, 0, size)
	p._v = tSlice
	for i := 0; i < size; i++ {
		__elem80 := &_FU_BYTES{
			_op: 0,
		}
		if err := __elem80.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem80), err)
		}
		p._v = append(p._v, _elem80)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_FU_LB) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "FU_LB"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_FU_LB) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ctrl", thrift.BYTE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ctrl: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p._ctrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ctrl (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ctrl: ", p), err)
	}
	return err
}

func (p *_FU_LB) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "op", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:op: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p._op)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.op (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:op: ", p), err)
	}
	return err
}

func (p *_FU_LB) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_pos() {
		if err := oprot.WriteFieldBegin(ctx, "pos", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pos: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p._pos)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pos (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pos: ", p), err)
		}
	}
	return err
}

func (p *_FU_LB) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:v: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._v)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._v {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:v: ", p), err)
	}
	return err
}

func (p *_FU_LB) Equals(other *_FU_LB) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._ctrl != other._ctrl { return false }
	if p._op != other._op { return false }
	if p._pos != other._pos {
		if p._pos == nil || other._pos == nil {
			return false
		}
		if (*p._pos) != (*other._pos) { return false }
	}
	if len(p._v) != len(other._v) { return false }
	for i, _tgt := range p._v {
		_src81 := other._v[i]
		if !_tgt.Equals(_src81) { return false }
	}
	return true
}

func (p *_FU_LB) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_FU_LB(%+v)", *p)
}

func (p *_FU_LB) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._FU_LB",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_FU_LB)(nil)

func (p *_FU_LB) Validate() error {
	return nil
}

// The Serial Values Cell field with Update Operation
// 
// Attributes:
//  - _field_id: The Field ID, a single ID can have any/all the field types
//  - _v_int64: The INT64 type update-field
//  - _v_double: The DOUBLE type update-field
//  - _v_bytes: The BYTES type update-field
//  - _v_key: The Cell KEY type update-field
//  - _v_li: The LIST INT64 type update-field
//  - _v_lb: The LIST BYTES type update-field
// 
type _CellValueSerialOp struct {
	_field_id int32 `thrift:"field_id,1" db:"field_id" json:"field_id"`
	_v_int64 *_FU_INT64 `thrift:"v_int64,2" db:"v_int64" json:"v_int64,omitempty"`
	_v_double *_FU_DOUBLE `thrift:"v_double,3" db:"v_double" json:"v_double,omitempty"`
	_v_bytes *_FU_BYTES `thrift:"v_bytes,4" db:"v_bytes" json:"v_bytes,omitempty"`
	_v_key _Key `thrift:"v_key,5" db:"v_key" json:"v_key,omitempty"`
	_v_li *_FU_LI `thrift:"v_li,6" db:"v_li" json:"v_li,omitempty"`
	_v_lb *_FU_LB `thrift:"v_lb,7" db:"v_lb" json:"v_lb,omitempty"`
}

func New_CellValueSerialOp() *_CellValueSerialOp {
	return &_CellValueSerialOp{}
}



func (p *_CellValueSerialOp) Get_field_id() int32 {
	return p._field_id
}

var _CellValueSerialOp__v_int64_DEFAULT *_FU_INT64

func (p *_CellValueSerialOp) Get_v_int64() *_FU_INT64 {
	if !p.IsSet_v_int64() {
		return _CellValueSerialOp__v_int64_DEFAULT
	}
	return p._v_int64
}

var _CellValueSerialOp__v_double_DEFAULT *_FU_DOUBLE

func (p *_CellValueSerialOp) Get_v_double() *_FU_DOUBLE {
	if !p.IsSet_v_double() {
		return _CellValueSerialOp__v_double_DEFAULT
	}
	return p._v_double
}

var _CellValueSerialOp__v_bytes_DEFAULT *_FU_BYTES

func (p *_CellValueSerialOp) Get_v_bytes() *_FU_BYTES {
	if !p.IsSet_v_bytes() {
		return _CellValueSerialOp__v_bytes_DEFAULT
	}
	return p._v_bytes
}

var _CellValueSerialOp__v_key_DEFAULT _Key


func (p *_CellValueSerialOp) Get_v_key() _Key {
	return p._v_key
}

var _CellValueSerialOp__v_li_DEFAULT *_FU_LI

func (p *_CellValueSerialOp) Get_v_li() *_FU_LI {
	if !p.IsSet_v_li() {
		return _CellValueSerialOp__v_li_DEFAULT
	}
	return p._v_li
}

var _CellValueSerialOp__v_lb_DEFAULT *_FU_LB

func (p *_CellValueSerialOp) Get_v_lb() *_FU_LB {
	if !p.IsSet_v_lb() {
		return _CellValueSerialOp__v_lb_DEFAULT
	}
	return p._v_lb
}

func (p *_CellValueSerialOp) IsSet_v_int64() bool {
	return p._v_int64 != nil
}

func (p *_CellValueSerialOp) IsSet_v_double() bool {
	return p._v_double != nil
}

func (p *_CellValueSerialOp) IsSet_v_bytes() bool {
	return p._v_bytes != nil
}

func (p *_CellValueSerialOp) IsSet_v_key() bool {
	return p._v_key != nil
}

func (p *_CellValueSerialOp) IsSet_v_li() bool {
	return p._v_li != nil
}

func (p *_CellValueSerialOp) IsSet_v_lb() bool {
	return p._v_lb != nil
}

func (p *_CellValueSerialOp) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_CellValueSerialOp) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._field_id = v
	}
	return nil
}

func (p *_CellValueSerialOp) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p._v_int64 = &_FU_INT64{
		_op: 0,
	}
	if err := p._v_int64.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._v_int64), err)
	}
	return nil
}

func (p *_CellValueSerialOp) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p._v_double = &_FU_DOUBLE{
		_op: 0,
	}
	if err := p._v_double.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._v_double), err)
	}
	return nil
}

func (p *_CellValueSerialOp) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	p._v_bytes = &_FU_BYTES{
		_op: 0,
	}
	if err := p._v_bytes.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._v_bytes), err)
	}
	return nil
}

func (p *_CellValueSerialOp) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_Key, 0, size)
	p._v_key = tSlice
	for i := 0; i < size; i++ {
		var _elem82 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__elem82 = v
		}
		p._v_key = append(p._v_key, _elem82)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_CellValueSerialOp) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	p._v_li = &_FU_LI{
		_op: 0,
	}
	if err := p._v_li.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._v_li), err)
	}
	return nil
}

func (p *_CellValueSerialOp) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	p._v_lb = &_FU_LB{
		_op: 0,
	}
	if err := p._v_lb.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._v_lb), err)
	}
	return nil
}

func (p *_CellValueSerialOp) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CellValueSerialOp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
		if err := p.writeField6(ctx, oprot); err != nil { return err }
		if err := p.writeField7(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_CellValueSerialOp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "field_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:field_id: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p._field_id)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.field_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:field_id: ", p), err)
	}
	return err
}

func (p *_CellValueSerialOp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_v_int64() {
		if err := oprot.WriteFieldBegin(ctx, "v_int64", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:v_int64: ", p), err)
		}
		if err := p._v_int64.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._v_int64), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:v_int64: ", p), err)
		}
	}
	return err
}

func (p *_CellValueSerialOp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_v_double() {
		if err := oprot.WriteFieldBegin(ctx, "v_double", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:v_double: ", p), err)
		}
		if err := p._v_double.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._v_double), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:v_double: ", p), err)
		}
	}
	return err
}

func (p *_CellValueSerialOp) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_v_bytes() {
		if err := oprot.WriteFieldBegin(ctx, "v_bytes", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:v_bytes: ", p), err)
		}
		if err := p._v_bytes.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._v_bytes), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:v_bytes: ", p), err)
		}
	}
	return err
}

func (p *_CellValueSerialOp) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_v_key() {
		if err := oprot.WriteFieldBegin(ctx, "v_key", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:v_key: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p._v_key)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p._v_key {
			if err := oprot.WriteBinary(ctx, v); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:v_key: ", p), err)
		}
	}
	return err
}

func (p *_CellValueSerialOp) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_v_li() {
		if err := oprot.WriteFieldBegin(ctx, "v_li", thrift.STRUCT, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:v_li: ", p), err)
		}
		if err := p._v_li.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._v_li), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:v_li: ", p), err)
		}
	}
	return err
}

func (p *_CellValueSerialOp) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_v_lb() {
		if err := oprot.WriteFieldBegin(ctx, "v_lb", thrift.STRUCT, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:v_lb: ", p), err)
		}
		if err := p._v_lb.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._v_lb), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:v_lb: ", p), err)
		}
	}
	return err
}

func (p *_CellValueSerialOp) Equals(other *_CellValueSerialOp) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._field_id != other._field_id { return false }
	if !p._v_int64.Equals(other._v_int64) { return false }
	if !p._v_double.Equals(other._v_double) { return false }
	if !p._v_bytes.Equals(other._v_bytes) { return false }
	if len(p._v_key) != len(other._v_key) { return false }
	for i, _tgt := range p._v_key {
		_src83 := other._v_key[i]
		if bytes.Compare(_tgt, _src83) != 0 { return false }
	}
	if !p._v_li.Equals(other._v_li) { return false }
	if !p._v_lb.Equals(other._v_lb) { return false }
	return true
}

func (p *_CellValueSerialOp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_CellValueSerialOp(%+v)", *p)
}

func (p *_CellValueSerialOp) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._CellValueSerialOp",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_CellValueSerialOp)(nil)

func (p *_CellValueSerialOp) Validate() error {
	return nil
}

// The Cell data for using with Update of SERIAL Column Type
// 
// Attributes:
//  - _f: The Cell Flag
//  - _k: The Cell Key
//  - _ts: The Cell Timestamp in nanoseconds
//  - _ts_desc: The Cell Version is in timestamp descending
//  - _v: The Serial Cell Value fields
//  - _encoder: Optionally the Cell Value Encoding Type: ZLIB/SNAPPY/ZSTD
// 
type _UCellSerial struct {
	_f _Flag `thrift:"f,1" db:"f" json:"f"`
	_k _Key `thrift:"k,2" db:"k" json:"k"`
	_ts *int64 `thrift:"ts,3" db:"ts" json:"ts,omitempty"`
	_ts_desc *bool `thrift:"ts_desc,4" db:"ts_desc" json:"ts_desc,omitempty"`
	_v _CellValuesSerial `thrift:"v,5" db:"v" json:"v"`
	_encoder *_EncodingType `thrift:"encoder,6" db:"encoder" json:"encoder,omitempty"`
}

func New_UCellSerial() *_UCellSerial {
	return &_UCellSerial{}
}



func (p *_UCellSerial) Get_f() _Flag {
	return p._f
}



func (p *_UCellSerial) Get_k() _Key {
	return p._k
}

var _UCellSerial__ts_DEFAULT int64

func (p *_UCellSerial) Get_ts() int64 {
	if !p.IsSet_ts() {
		return _UCellSerial__ts_DEFAULT
	}
	return *p._ts
}

var _UCellSerial__ts_desc_DEFAULT bool

func (p *_UCellSerial) Get_ts_desc() bool {
	if !p.IsSet_ts_desc() {
		return _UCellSerial__ts_desc_DEFAULT
	}
	return *p._ts_desc
}



func (p *_UCellSerial) Get_v() _CellValuesSerial {
	return p._v
}

var _UCellSerial__encoder_DEFAULT _EncodingType

func (p *_UCellSerial) Get_encoder() _EncodingType {
	if !p.IsSet_encoder() {
		return _UCellSerial__encoder_DEFAULT
	}
	return *p._encoder
}

func (p *_UCellSerial) IsSet_ts() bool {
	return p._ts != nil
}

func (p *_UCellSerial) IsSet_ts_desc() bool {
	return p._ts_desc != nil
}

func (p *_UCellSerial) IsSet_encoder() bool {
	return p._encoder != nil
}

func (p *_UCellSerial) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_UCellSerial) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := _Flag(v)
		p._f = temp
	}
	return nil
}

func (p *_UCellSerial) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_Key, 0, size)
	p._k = tSlice
	for i := 0; i < size; i++ {
		var _elem84 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__elem84 = v
		}
		p._k = append(p._k, _elem84)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_UCellSerial) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p._ts = &v
	}
	return nil
}

func (p *_UCellSerial) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p._ts_desc = &v
	}
	return nil
}

func (p *_UCellSerial) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_CellValuesSerial, 0, size)
	p._v = tSlice
	for i := 0; i < size; i++ {
		__elem85 := &_CellValueSerial{}
		if err := __elem85.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem85), err)
		}
		p._v = append(p._v, _elem85)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_UCellSerial) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := _EncodingType(v)
		p._encoder = &temp
	}
	return nil
}

func (p *_UCellSerial) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UCellSerial"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
		if err := p.writeField6(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_UCellSerial) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "f", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:f: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p._f)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.f (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:f: ", p), err)
	}
	return err
}

func (p *_UCellSerial) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "k", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:k: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p._k)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._k {
		if err := oprot.WriteBinary(ctx, v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:k: ", p), err)
	}
	return err
}

func (p *_UCellSerial) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_ts() {
		if err := oprot.WriteFieldBegin(ctx, "ts", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ts: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p._ts)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ts (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ts: ", p), err)
		}
	}
	return err
}

func (p *_UCellSerial) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_ts_desc() {
		if err := oprot.WriteFieldBegin(ctx, "ts_desc", thrift.BOOL, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ts_desc: ", p), err)
		}
		if err := oprot.WriteBool(ctx, bool(*p._ts_desc)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ts_desc (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ts_desc: ", p), err)
		}
	}
	return err
}

func (p *_UCellSerial) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:v: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._v)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._v {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:v: ", p), err)
	}
	return err
}

func (p *_UCellSerial) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_encoder() {
		if err := oprot.WriteFieldBegin(ctx, "encoder", thrift.I32, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:encoder: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p._encoder)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.encoder (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:encoder: ", p), err)
		}
	}
	return err
}

func (p *_UCellSerial) Equals(other *_UCellSerial) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._f != other._f { return false }
	if len(p._k) != len(other._k) { return false }
	for i, _tgt := range p._k {
		_src86 := other._k[i]
		if bytes.Compare(_tgt, _src86) != 0 { return false }
	}
	if p._ts != other._ts {
		if p._ts == nil || other._ts == nil {
			return false
		}
		if (*p._ts) != (*other._ts) { return false }
	}
	if p._ts_desc != other._ts_desc {
		if p._ts_desc == nil || other._ts_desc == nil {
			return false
		}
		if (*p._ts_desc) != (*other._ts_desc) { return false }
	}
	if len(p._v) != len(other._v) { return false }
	for i, _tgt := range p._v {
		_src87 := other._v[i]
		if !_tgt.Equals(_src87) { return false }
	}
	if p._encoder != other._encoder {
		if p._encoder == nil || other._encoder == nil {
			return false
		}
		if (*p._encoder) != (*other._encoder) { return false }
	}
	return true
}

func (p *_UCellSerial) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_UCellSerial(%+v)", *p)
}

func (p *_UCellSerial) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._UCellSerial",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_UCellSerial)(nil)

func (p *_UCellSerial) Validate() error {
	return nil
}

// The Cell for results list of scan
// 
// Attributes:
//  - _c: The Column Name
//  - _k: The Cell Key
//  - _ts: The Cell Timestamp
//  - _v: The Cell Value
// 
type _CellPlain struct {
	_c string `thrift:"c,1" db:"c" json:"c"`
	_k _Key `thrift:"k,2" db:"k" json:"k"`
	_ts int64 `thrift:"ts,3" db:"ts" json:"ts"`
	_v []byte `thrift:"v,4" db:"v" json:"v"`
}

func New_CellPlain() *_CellPlain {
	return &_CellPlain{}
}



func (p *_CellPlain) Get_c() string {
	return p._c
}



func (p *_CellPlain) Get_k() _Key {
	return p._k
}



func (p *_CellPlain) Get_ts() int64 {
	return p._ts
}



func (p *_CellPlain) Get_v() []byte {
	return p._v
}

func (p *_CellPlain) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_CellPlain) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._c = v
	}
	return nil
}

func (p *_CellPlain) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_Key, 0, size)
	p._k = tSlice
	for i := 0; i < size; i++ {
		var _elem88 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__elem88 = v
		}
		p._k = append(p._k, _elem88)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_CellPlain) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p._ts = v
	}
	return nil
}

func (p *_CellPlain) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p._v = v
	}
	return nil
}

func (p *_CellPlain) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CellPlain"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_CellPlain) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "c", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:c: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p._c)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.c (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:c: ", p), err)
	}
	return err
}

func (p *_CellPlain) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "k", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:k: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p._k)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._k {
		if err := oprot.WriteBinary(ctx, v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:k: ", p), err)
	}
	return err
}

func (p *_CellPlain) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ts", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ts: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._ts)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ts (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ts: ", p), err)
	}
	return err
}

func (p *_CellPlain) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:v: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p._v); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.v (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:v: ", p), err)
	}
	return err
}

func (p *_CellPlain) Equals(other *_CellPlain) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._c != other._c { return false }
	if len(p._k) != len(other._k) { return false }
	for i, _tgt := range p._k {
		_src89 := other._k[i]
		if bytes.Compare(_tgt, _src89) != 0 { return false }
	}
	if p._ts != other._ts { return false }
	if bytes.Compare(p._v, other._v) != 0 { return false }
	return true
}

func (p *_CellPlain) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_CellPlain(%+v)", *p)
}

func (p *_CellPlain) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._CellPlain",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_CellPlain)(nil)

func (p *_CellPlain) Validate() error {
	return nil
}

// The Counter Cell for results list of scan
// 
// Attributes:
//  - _c: The Column Name
//  - _k: The Cell Key
//  - _ts: The Cell Timestamp
//  - _v: The Cell Counter Value
//  - _eq: The Counter EQ since ts
// 
type _CellCounter struct {
	_c string `thrift:"c,1" db:"c" json:"c"`
	_k _Key `thrift:"k,2" db:"k" json:"k"`
	_ts int64 `thrift:"ts,3" db:"ts" json:"ts"`
	_v int64 `thrift:"v,4" db:"v" json:"v"`
	_eq *int64 `thrift:"eq,5" db:"eq" json:"eq,omitempty"`
}

func New_CellCounter() *_CellCounter {
	return &_CellCounter{}
}



func (p *_CellCounter) Get_c() string {
	return p._c
}



func (p *_CellCounter) Get_k() _Key {
	return p._k
}



func (p *_CellCounter) Get_ts() int64 {
	return p._ts
}



func (p *_CellCounter) Get_v() int64 {
	return p._v
}

var _CellCounter__eq_DEFAULT int64

func (p *_CellCounter) Get_eq() int64 {
	if !p.IsSet_eq() {
		return _CellCounter__eq_DEFAULT
	}
	return *p._eq
}

func (p *_CellCounter) IsSet_eq() bool {
	return p._eq != nil
}

func (p *_CellCounter) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_CellCounter) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._c = v
	}
	return nil
}

func (p *_CellCounter) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_Key, 0, size)
	p._k = tSlice
	for i := 0; i < size; i++ {
		var _elem90 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__elem90 = v
		}
		p._k = append(p._k, _elem90)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_CellCounter) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p._ts = v
	}
	return nil
}

func (p *_CellCounter) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p._v = v
	}
	return nil
}

func (p *_CellCounter) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p._eq = &v
	}
	return nil
}

func (p *_CellCounter) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CellCounter"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_CellCounter) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "c", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:c: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p._c)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.c (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:c: ", p), err)
	}
	return err
}

func (p *_CellCounter) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "k", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:k: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p._k)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._k {
		if err := oprot.WriteBinary(ctx, v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:k: ", p), err)
	}
	return err
}

func (p *_CellCounter) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ts", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ts: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._ts)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ts (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ts: ", p), err)
	}
	return err
}

func (p *_CellCounter) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:v: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._v)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.v (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:v: ", p), err)
	}
	return err
}

func (p *_CellCounter) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_eq() {
		if err := oprot.WriteFieldBegin(ctx, "eq", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:eq: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p._eq)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.eq (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:eq: ", p), err)
		}
	}
	return err
}

func (p *_CellCounter) Equals(other *_CellCounter) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._c != other._c { return false }
	if len(p._k) != len(other._k) { return false }
	for i, _tgt := range p._k {
		_src91 := other._k[i]
		if bytes.Compare(_tgt, _src91) != 0 { return false }
	}
	if p._ts != other._ts { return false }
	if p._v != other._v { return false }
	if p._eq != other._eq {
		if p._eq == nil || other._eq == nil {
			return false
		}
		if (*p._eq) != (*other._eq) { return false }
	}
	return true
}

func (p *_CellCounter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_CellCounter(%+v)", *p)
}

func (p *_CellCounter) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._CellCounter",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_CellCounter)(nil)

func (p *_CellCounter) Validate() error {
	return nil
}

// The Serial Cell for results list of scan
// 
// Attributes:
//  - _c: The Column Name
//  - _k: The Cell Key
//  - _ts: The Cell Timestamp
//  - _v: The Cell Serial Value
// 
type _CellSerial struct {
	_c string `thrift:"c,1" db:"c" json:"c"`
	_k _Key `thrift:"k,2" db:"k" json:"k"`
	_ts int64 `thrift:"ts,3" db:"ts" json:"ts"`
	_v _CellValuesSerial `thrift:"v,4" db:"v" json:"v"`
}

func New_CellSerial() *_CellSerial {
	return &_CellSerial{}
}



func (p *_CellSerial) Get_c() string {
	return p._c
}



func (p *_CellSerial) Get_k() _Key {
	return p._k
}



func (p *_CellSerial) Get_ts() int64 {
	return p._ts
}



func (p *_CellSerial) Get_v() _CellValuesSerial {
	return p._v
}

func (p *_CellSerial) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_CellSerial) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._c = v
	}
	return nil
}

func (p *_CellSerial) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_Key, 0, size)
	p._k = tSlice
	for i := 0; i < size; i++ {
		var _elem92 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__elem92 = v
		}
		p._k = append(p._k, _elem92)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_CellSerial) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p._ts = v
	}
	return nil
}

func (p *_CellSerial) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_CellValuesSerial, 0, size)
	p._v = tSlice
	for i := 0; i < size; i++ {
		__elem93 := &_CellValueSerial{}
		if err := __elem93.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem93), err)
		}
		p._v = append(p._v, _elem93)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_CellSerial) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CellSerial"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_CellSerial) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "c", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:c: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p._c)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.c (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:c: ", p), err)
	}
	return err
}

func (p *_CellSerial) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "k", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:k: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p._k)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._k {
		if err := oprot.WriteBinary(ctx, v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:k: ", p), err)
	}
	return err
}

func (p *_CellSerial) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ts", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ts: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._ts)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ts (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ts: ", p), err)
	}
	return err
}

func (p *_CellSerial) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:v: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._v)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._v {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:v: ", p), err)
	}
	return err
}

func (p *_CellSerial) Equals(other *_CellSerial) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._c != other._c { return false }
	if len(p._k) != len(other._k) { return false }
	for i, _tgt := range p._k {
		_src94 := other._k[i]
		if bytes.Compare(_tgt, _src94) != 0 { return false }
	}
	if p._ts != other._ts { return false }
	if len(p._v) != len(other._v) { return false }
	for i, _tgt := range p._v {
		_src95 := other._v[i]
		if !_tgt.Equals(_src95) { return false }
	}
	return true
}

func (p *_CellSerial) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_CellSerial(%+v)", *p)
}

func (p *_CellSerial) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._CellSerial",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_CellSerial)(nil)

func (p *_CellSerial) Validate() error {
	return nil
}

// The Cells for results list of scan
// 
// Attributes:
//  - _plain_cells: The Cells, defined as Cell items in a list-container
//  - _counter_cells: The Cells, defined as Cell items in a list-container
//  - _serial_cells: The Serial Cells, defined as CellSerial items in a list-container
// 
type _Cells struct {
	_plain_cells _CellsPlain `thrift:"plain_cells,1" db:"plain_cells" json:"plain_cells"`
	_counter_cells _CellsCounter `thrift:"counter_cells,2" db:"counter_cells" json:"counter_cells"`
	_serial_cells _CellsSerial `thrift:"serial_cells,3" db:"serial_cells" json:"serial_cells"`
}

func New_Cells() *_Cells {
	return &_Cells{}
}



func (p *_Cells) Get_plain_cells() _CellsPlain {
	return p._plain_cells
}



func (p *_Cells) Get_counter_cells() _CellsCounter {
	return p._counter_cells
}



func (p *_Cells) Get_serial_cells() _CellsSerial {
	return p._serial_cells
}

func (p *_Cells) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Cells) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_CellsPlain, 0, size)
	p._plain_cells = tSlice
	for i := 0; i < size; i++ {
		__elem96 := &_CellPlain{}
		if err := __elem96.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem96), err)
		}
		p._plain_cells = append(p._plain_cells, _elem96)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_Cells) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_CellsCounter, 0, size)
	p._counter_cells = tSlice
	for i := 0; i < size; i++ {
		__elem97 := &_CellCounter{}
		if err := __elem97.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem97), err)
		}
		p._counter_cells = append(p._counter_cells, _elem97)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_Cells) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_CellsSerial, 0, size)
	p._serial_cells = tSlice
	for i := 0; i < size; i++ {
		__elem98 := &_CellSerial{}
		if err := __elem98.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem98), err)
		}
		p._serial_cells = append(p._serial_cells, _elem98)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_Cells) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Cells"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Cells) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "plain_cells", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:plain_cells: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._plain_cells)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._plain_cells {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:plain_cells: ", p), err)
	}
	return err
}

func (p *_Cells) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "counter_cells", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:counter_cells: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._counter_cells)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._counter_cells {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:counter_cells: ", p), err)
	}
	return err
}

func (p *_Cells) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "serial_cells", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serial_cells: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._serial_cells)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._serial_cells {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serial_cells: ", p), err)
	}
	return err
}

func (p *_Cells) Equals(other *_Cells) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p._plain_cells) != len(other._plain_cells) { return false }
	for i, _tgt := range p._plain_cells {
		_src99 := other._plain_cells[i]
		if !_tgt.Equals(_src99) { return false }
	}
	if len(p._counter_cells) != len(other._counter_cells) { return false }
	for i, _tgt := range p._counter_cells {
		_src100 := other._counter_cells[i]
		if !_tgt.Equals(_src100) { return false }
	}
	if len(p._serial_cells) != len(other._serial_cells) { return false }
	for i, _tgt := range p._serial_cells {
		_src101 := other._serial_cells[i]
		if !_tgt.Equals(_src101) { return false }
	}
	return true
}

func (p *_Cells) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Cells(%+v)", *p)
}

func (p *_Cells) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Cells",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Cells)(nil)

func (p *_Cells) Validate() error {
	return nil
}

// The Plain column type Cell for results on Columns of scan
// 
// Attributes:
//  - _k: The Cell Key
//  - _ts: The Cell Timestamp
//  - _v: The Cell Value
// 
type _CCellPlain struct {
	_k _Key `thrift:"k,1" db:"k" json:"k"`
	_ts int64 `thrift:"ts,2" db:"ts" json:"ts"`
	_v []byte `thrift:"v,3" db:"v" json:"v"`
}

func New_CCellPlain() *_CCellPlain {
	return &_CCellPlain{}
}



func (p *_CCellPlain) Get_k() _Key {
	return p._k
}



func (p *_CCellPlain) Get_ts() int64 {
	return p._ts
}



func (p *_CCellPlain) Get_v() []byte {
	return p._v
}

func (p *_CCellPlain) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_CCellPlain) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_Key, 0, size)
	p._k = tSlice
	for i := 0; i < size; i++ {
		var _elem102 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__elem102 = v
		}
		p._k = append(p._k, _elem102)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_CCellPlain) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p._ts = v
	}
	return nil
}

func (p *_CCellPlain) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p._v = v
	}
	return nil
}

func (p *_CCellPlain) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CCellPlain"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_CCellPlain) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "k", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:k: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p._k)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._k {
		if err := oprot.WriteBinary(ctx, v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:k: ", p), err)
	}
	return err
}

func (p *_CCellPlain) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ts", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ts: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._ts)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ts (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ts: ", p), err)
	}
	return err
}

func (p *_CCellPlain) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:v: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p._v); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.v (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:v: ", p), err)
	}
	return err
}

func (p *_CCellPlain) Equals(other *_CCellPlain) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p._k) != len(other._k) { return false }
	for i, _tgt := range p._k {
		_src103 := other._k[i]
		if bytes.Compare(_tgt, _src103) != 0 { return false }
	}
	if p._ts != other._ts { return false }
	if bytes.Compare(p._v, other._v) != 0 { return false }
	return true
}

func (p *_CCellPlain) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_CCellPlain(%+v)", *p)
}

func (p *_CCellPlain) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._CCellPlain",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_CCellPlain)(nil)

func (p *_CCellPlain) Validate() error {
	return nil
}

// The Counter column type Cell for results on Columns of scan
// 
// Attributes:
//  - _k: The Cell Key
//  - _ts: The Cell Timestamp
//  - _v: The Cell Counter Value
//  - _eq: The Counter EQ since ts
// 
type _CCellCounter struct {
	_k _Key `thrift:"k,1" db:"k" json:"k"`
	_ts int64 `thrift:"ts,2" db:"ts" json:"ts"`
	_v int64 `thrift:"v,3" db:"v" json:"v"`
	_eq *int64 `thrift:"eq,4" db:"eq" json:"eq,omitempty"`
}

func New_CCellCounter() *_CCellCounter {
	return &_CCellCounter{}
}



func (p *_CCellCounter) Get_k() _Key {
	return p._k
}



func (p *_CCellCounter) Get_ts() int64 {
	return p._ts
}



func (p *_CCellCounter) Get_v() int64 {
	return p._v
}

var _CCellCounter__eq_DEFAULT int64

func (p *_CCellCounter) Get_eq() int64 {
	if !p.IsSet_eq() {
		return _CCellCounter__eq_DEFAULT
	}
	return *p._eq
}

func (p *_CCellCounter) IsSet_eq() bool {
	return p._eq != nil
}

func (p *_CCellCounter) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_CCellCounter) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_Key, 0, size)
	p._k = tSlice
	for i := 0; i < size; i++ {
		var _elem104 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__elem104 = v
		}
		p._k = append(p._k, _elem104)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_CCellCounter) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p._ts = v
	}
	return nil
}

func (p *_CCellCounter) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p._v = v
	}
	return nil
}

func (p *_CCellCounter) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p._eq = &v
	}
	return nil
}

func (p *_CCellCounter) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CCellCounter"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_CCellCounter) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "k", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:k: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p._k)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._k {
		if err := oprot.WriteBinary(ctx, v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:k: ", p), err)
	}
	return err
}

func (p *_CCellCounter) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ts", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ts: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._ts)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ts (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ts: ", p), err)
	}
	return err
}

func (p *_CCellCounter) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:v: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._v)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.v (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:v: ", p), err)
	}
	return err
}

func (p *_CCellCounter) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_eq() {
		if err := oprot.WriteFieldBegin(ctx, "eq", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:eq: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p._eq)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.eq (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:eq: ", p), err)
		}
	}
	return err
}

func (p *_CCellCounter) Equals(other *_CCellCounter) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p._k) != len(other._k) { return false }
	for i, _tgt := range p._k {
		_src105 := other._k[i]
		if bytes.Compare(_tgt, _src105) != 0 { return false }
	}
	if p._ts != other._ts { return false }
	if p._v != other._v { return false }
	if p._eq != other._eq {
		if p._eq == nil || other._eq == nil {
			return false
		}
		if (*p._eq) != (*other._eq) { return false }
	}
	return true
}

func (p *_CCellCounter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_CCellCounter(%+v)", *p)
}

func (p *_CCellCounter) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._CCellCounter",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_CCellCounter)(nil)

func (p *_CCellCounter) Validate() error {
	return nil
}

// The Serial column type Cell for results on Columns of scan
// 
// Attributes:
//  - _k: The Cell Key
//  - _ts: The Cell Timestamp
//  - _v: The Cell Serial Value
// 
type _CCellSerial struct {
	_k _Key `thrift:"k,1" db:"k" json:"k"`
	_ts int64 `thrift:"ts,2" db:"ts" json:"ts"`
	_v _CellValuesSerial `thrift:"v,3" db:"v" json:"v"`
}

func New_CCellSerial() *_CCellSerial {
	return &_CCellSerial{}
}



func (p *_CCellSerial) Get_k() _Key {
	return p._k
}



func (p *_CCellSerial) Get_ts() int64 {
	return p._ts
}



func (p *_CCellSerial) Get_v() _CellValuesSerial {
	return p._v
}

func (p *_CCellSerial) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_CCellSerial) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_Key, 0, size)
	p._k = tSlice
	for i := 0; i < size; i++ {
		var _elem106 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__elem106 = v
		}
		p._k = append(p._k, _elem106)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_CCellSerial) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p._ts = v
	}
	return nil
}

func (p *_CCellSerial) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_CellValuesSerial, 0, size)
	p._v = tSlice
	for i := 0; i < size; i++ {
		__elem107 := &_CellValueSerial{}
		if err := __elem107.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem107), err)
		}
		p._v = append(p._v, _elem107)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_CCellSerial) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CCellSerial"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_CCellSerial) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "k", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:k: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p._k)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._k {
		if err := oprot.WriteBinary(ctx, v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:k: ", p), err)
	}
	return err
}

func (p *_CCellSerial) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ts", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ts: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._ts)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ts (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ts: ", p), err)
	}
	return err
}

func (p *_CCellSerial) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:v: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._v)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._v {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:v: ", p), err)
	}
	return err
}

func (p *_CCellSerial) Equals(other *_CCellSerial) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p._k) != len(other._k) { return false }
	for i, _tgt := range p._k {
		_src108 := other._k[i]
		if bytes.Compare(_tgt, _src108) != 0 { return false }
	}
	if p._ts != other._ts { return false }
	if len(p._v) != len(other._v) { return false }
	for i, _tgt := range p._v {
		_src109 := other._v[i]
		if !_tgt.Equals(_src109) { return false }
	}
	return true
}

func (p *_CCellSerial) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_CCellSerial(%+v)", *p)
}

func (p *_CCellSerial) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._CCellSerial",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_CCellSerial)(nil)

func (p *_CCellSerial) Validate() error {
	return nil
}

// The Column Cells for results on Columns of scan
// 
// Attributes:
//  - _plain_cells: The Plain type Cells, defined as CCellPlain items in a list-container
//  - _counter_cells: The Counter type Cells, defined as CCellCounter items in a list-container
//  - _serial_cells: The Serial type Cells, defined as CCellSerial items in a list-container
// 
type _cCells struct {
	_plain_cells []*_CCellPlain `thrift:"plain_cells,1" db:"plain_cells" json:"plain_cells"`
	_counter_cells []*_CCellCounter `thrift:"counter_cells,2" db:"counter_cells" json:"counter_cells"`
	_serial_cells []*_CCellSerial `thrift:"serial_cells,3" db:"serial_cells" json:"serial_cells"`
}

func New_cCells() *_cCells {
	return &_cCells{}
}



func (p *_cCells) Get_plain_cells() []*_CCellPlain {
	return p._plain_cells
}



func (p *_cCells) Get_counter_cells() []*_CCellCounter {
	return p._counter_cells
}



func (p *_cCells) Get_serial_cells() []*_CCellSerial {
	return p._serial_cells
}

func (p *_cCells) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_cCells) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*_CCellPlain, 0, size)
	p._plain_cells = tSlice
	for i := 0; i < size; i++ {
		__elem110 := &_CCellPlain{}
		if err := __elem110.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem110), err)
		}
		p._plain_cells = append(p._plain_cells, _elem110)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_cCells) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*_CCellCounter, 0, size)
	p._counter_cells = tSlice
	for i := 0; i < size; i++ {
		__elem111 := &_CCellCounter{}
		if err := __elem111.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem111), err)
		}
		p._counter_cells = append(p._counter_cells, _elem111)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_cCells) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*_CCellSerial, 0, size)
	p._serial_cells = tSlice
	for i := 0; i < size; i++ {
		__elem112 := &_CCellSerial{}
		if err := __elem112.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem112), err)
		}
		p._serial_cells = append(p._serial_cells, _elem112)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_cCells) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "cCells"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_cCells) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "plain_cells", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:plain_cells: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._plain_cells)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._plain_cells {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:plain_cells: ", p), err)
	}
	return err
}

func (p *_cCells) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "counter_cells", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:counter_cells: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._counter_cells)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._counter_cells {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:counter_cells: ", p), err)
	}
	return err
}

func (p *_cCells) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "serial_cells", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serial_cells: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._serial_cells)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._serial_cells {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serial_cells: ", p), err)
	}
	return err
}

func (p *_cCells) Equals(other *_cCells) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p._plain_cells) != len(other._plain_cells) { return false }
	for i, _tgt := range p._plain_cells {
		_src113 := other._plain_cells[i]
		if !_tgt.Equals(_src113) { return false }
	}
	if len(p._counter_cells) != len(other._counter_cells) { return false }
	for i, _tgt := range p._counter_cells {
		_src114 := other._counter_cells[i]
		if !_tgt.Equals(_src114) { return false }
	}
	if len(p._serial_cells) != len(other._serial_cells) { return false }
	for i, _tgt := range p._serial_cells {
		_src115 := other._serial_cells[i]
		if !_tgt.Equals(_src115) { return false }
	}
	return true
}

func (p *_cCells) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_cCells(%+v)", *p)
}

func (p *_cCells) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._cCells",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_cCells)(nil)

func (p *_cCells) Validate() error {
	return nil
}

// The Plain column type Key Cell for results on Key of scan
// 
// Attributes:
//  - _c: The Column Name
//  - _ts: The Cell Timestamp
//  - _v: The Cell Value
// 
type _KCellPlain struct {
	_c string `thrift:"c,1" db:"c" json:"c"`
	_ts int64 `thrift:"ts,2" db:"ts" json:"ts"`
	_v []byte `thrift:"v,3" db:"v" json:"v"`
}

func New_KCellPlain() *_KCellPlain {
	return &_KCellPlain{}
}



func (p *_KCellPlain) Get_c() string {
	return p._c
}



func (p *_KCellPlain) Get_ts() int64 {
	return p._ts
}



func (p *_KCellPlain) Get_v() []byte {
	return p._v
}

func (p *_KCellPlain) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_KCellPlain) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._c = v
	}
	return nil
}

func (p *_KCellPlain) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p._ts = v
	}
	return nil
}

func (p *_KCellPlain) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p._v = v
	}
	return nil
}

func (p *_KCellPlain) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "KCellPlain"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_KCellPlain) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "c", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:c: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p._c)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.c (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:c: ", p), err)
	}
	return err
}

func (p *_KCellPlain) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ts", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ts: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._ts)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ts (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ts: ", p), err)
	}
	return err
}

func (p *_KCellPlain) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:v: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p._v); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.v (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:v: ", p), err)
	}
	return err
}

func (p *_KCellPlain) Equals(other *_KCellPlain) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._c != other._c { return false }
	if p._ts != other._ts { return false }
	if bytes.Compare(p._v, other._v) != 0 { return false }
	return true
}

func (p *_KCellPlain) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_KCellPlain(%+v)", *p)
}

func (p *_KCellPlain) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._KCellPlain",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_KCellPlain)(nil)

func (p *_KCellPlain) Validate() error {
	return nil
}

// The Counter column type Key Cell for results on Key of scan
// 
// Attributes:
//  - _c: The Column Name
//  - _ts: The Cell Timestamp
//  - _v: The Cell Counter Value
//  - _eq: The Counter EQ since ts
// 
type _KCellCounter struct {
	_c string `thrift:"c,1" db:"c" json:"c"`
	_ts int64 `thrift:"ts,2" db:"ts" json:"ts"`
	_v int64 `thrift:"v,3" db:"v" json:"v"`
	_eq *int64 `thrift:"eq,4" db:"eq" json:"eq,omitempty"`
}

func New_KCellCounter() *_KCellCounter {
	return &_KCellCounter{}
}



func (p *_KCellCounter) Get_c() string {
	return p._c
}



func (p *_KCellCounter) Get_ts() int64 {
	return p._ts
}



func (p *_KCellCounter) Get_v() int64 {
	return p._v
}

var _KCellCounter__eq_DEFAULT int64

func (p *_KCellCounter) Get_eq() int64 {
	if !p.IsSet_eq() {
		return _KCellCounter__eq_DEFAULT
	}
	return *p._eq
}

func (p *_KCellCounter) IsSet_eq() bool {
	return p._eq != nil
}

func (p *_KCellCounter) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_KCellCounter) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._c = v
	}
	return nil
}

func (p *_KCellCounter) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p._ts = v
	}
	return nil
}

func (p *_KCellCounter) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p._v = v
	}
	return nil
}

func (p *_KCellCounter) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p._eq = &v
	}
	return nil
}

func (p *_KCellCounter) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "KCellCounter"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_KCellCounter) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "c", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:c: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p._c)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.c (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:c: ", p), err)
	}
	return err
}

func (p *_KCellCounter) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ts", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ts: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._ts)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ts (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ts: ", p), err)
	}
	return err
}

func (p *_KCellCounter) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:v: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._v)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.v (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:v: ", p), err)
	}
	return err
}

func (p *_KCellCounter) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_eq() {
		if err := oprot.WriteFieldBegin(ctx, "eq", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:eq: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p._eq)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.eq (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:eq: ", p), err)
		}
	}
	return err
}

func (p *_KCellCounter) Equals(other *_KCellCounter) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._c != other._c { return false }
	if p._ts != other._ts { return false }
	if p._v != other._v { return false }
	if p._eq != other._eq {
		if p._eq == nil || other._eq == nil {
			return false
		}
		if (*p._eq) != (*other._eq) { return false }
	}
	return true
}

func (p *_KCellCounter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_KCellCounter(%+v)", *p)
}

func (p *_KCellCounter) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._KCellCounter",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_KCellCounter)(nil)

func (p *_KCellCounter) Validate() error {
	return nil
}

// The Serial column type Key Cell for results on Key of scan
// 
// Attributes:
//  - _c: The Column Name
//  - _ts: The Cell Timestamp
//  - _v: The Cell Serial Value
// 
type _KCellSerial struct {
	_c string `thrift:"c,1" db:"c" json:"c"`
	_ts int64 `thrift:"ts,2" db:"ts" json:"ts"`
	_v _CellValuesSerial `thrift:"v,3" db:"v" json:"v"`
}

func New_KCellSerial() *_KCellSerial {
	return &_KCellSerial{}
}



func (p *_KCellSerial) Get_c() string {
	return p._c
}



func (p *_KCellSerial) Get_ts() int64 {
	return p._ts
}



func (p *_KCellSerial) Get_v() _CellValuesSerial {
	return p._v
}

func (p *_KCellSerial) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_KCellSerial) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._c = v
	}
	return nil
}

func (p *_KCellSerial) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p._ts = v
	}
	return nil
}

func (p *_KCellSerial) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_CellValuesSerial, 0, size)
	p._v = tSlice
	for i := 0; i < size; i++ {
		__elem116 := &_CellValueSerial{}
		if err := __elem116.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem116), err)
		}
		p._v = append(p._v, _elem116)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_KCellSerial) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "KCellSerial"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_KCellSerial) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "c", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:c: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p._c)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.c (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:c: ", p), err)
	}
	return err
}

func (p *_KCellSerial) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ts", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ts: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._ts)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ts (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ts: ", p), err)
	}
	return err
}

func (p *_KCellSerial) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:v: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._v)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._v {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:v: ", p), err)
	}
	return err
}

func (p *_KCellSerial) Equals(other *_KCellSerial) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._c != other._c { return false }
	if p._ts != other._ts { return false }
	if len(p._v) != len(other._v) { return false }
	for i, _tgt := range p._v {
		_src117 := other._v[i]
		if !_tgt.Equals(_src117) { return false }
	}
	return true
}

func (p *_KCellSerial) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_KCellSerial(%+v)", *p)
}

func (p *_KCellSerial) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._KCellSerial",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_KCellSerial)(nil)

func (p *_KCellSerial) Validate() error {
	return nil
}

// The Key Cells for results on Key of scan
// 
// Attributes:
//  - _k: The Cell Key
//  - _plain_cells: The Plain type Key Cells, defined as KCellPlain items in a list-container
//  - _counter_cells: The Counter type Key Cells, defined as KCellCounter items in a list-container
//  - _serial_cells: The Serial type Key Cells, defined as KCellSerial items in a list-container
// 
type _kCells struct {
	_k _Key `thrift:"k,1" db:"k" json:"k"`
	_plain_cells []*_KCellPlain `thrift:"plain_cells,2" db:"plain_cells" json:"plain_cells"`
	_counter_cells []*_KCellCounter `thrift:"counter_cells,3" db:"counter_cells" json:"counter_cells"`
	_serial_cells []*_KCellSerial `thrift:"serial_cells,4" db:"serial_cells" json:"serial_cells"`
}

func New_kCells() *_kCells {
	return &_kCells{}
}



func (p *_kCells) Get_k() _Key {
	return p._k
}



func (p *_kCells) Get_plain_cells() []*_KCellPlain {
	return p._plain_cells
}



func (p *_kCells) Get_counter_cells() []*_KCellCounter {
	return p._counter_cells
}



func (p *_kCells) Get_serial_cells() []*_KCellSerial {
	return p._serial_cells
}

func (p *_kCells) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_kCells) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_Key, 0, size)
	p._k = tSlice
	for i := 0; i < size; i++ {
		var _elem118 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__elem118 = v
		}
		p._k = append(p._k, _elem118)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_kCells) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*_KCellPlain, 0, size)
	p._plain_cells = tSlice
	for i := 0; i < size; i++ {
		__elem119 := &_KCellPlain{}
		if err := __elem119.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem119), err)
		}
		p._plain_cells = append(p._plain_cells, _elem119)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_kCells) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*_KCellCounter, 0, size)
	p._counter_cells = tSlice
	for i := 0; i < size; i++ {
		__elem120 := &_KCellCounter{}
		if err := __elem120.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem120), err)
		}
		p._counter_cells = append(p._counter_cells, _elem120)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_kCells) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*_KCellSerial, 0, size)
	p._serial_cells = tSlice
	for i := 0; i < size; i++ {
		__elem121 := &_KCellSerial{}
		if err := __elem121.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem121), err)
		}
		p._serial_cells = append(p._serial_cells, _elem121)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_kCells) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "kCells"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_kCells) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "k", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:k: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p._k)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._k {
		if err := oprot.WriteBinary(ctx, v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:k: ", p), err)
	}
	return err
}

func (p *_kCells) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "plain_cells", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:plain_cells: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._plain_cells)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._plain_cells {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:plain_cells: ", p), err)
	}
	return err
}

func (p *_kCells) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "counter_cells", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:counter_cells: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._counter_cells)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._counter_cells {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:counter_cells: ", p), err)
	}
	return err
}

func (p *_kCells) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "serial_cells", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:serial_cells: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._serial_cells)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._serial_cells {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:serial_cells: ", p), err)
	}
	return err
}

func (p *_kCells) Equals(other *_kCells) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p._k) != len(other._k) { return false }
	for i, _tgt := range p._k {
		_src122 := other._k[i]
		if bytes.Compare(_tgt, _src122) != 0 { return false }
	}
	if len(p._plain_cells) != len(other._plain_cells) { return false }
	for i, _tgt := range p._plain_cells {
		_src123 := other._plain_cells[i]
		if !_tgt.Equals(_src123) { return false }
	}
	if len(p._counter_cells) != len(other._counter_cells) { return false }
	for i, _tgt := range p._counter_cells {
		_src124 := other._counter_cells[i]
		if !_tgt.Equals(_src124) { return false }
	}
	if len(p._serial_cells) != len(other._serial_cells) { return false }
	for i, _tgt := range p._serial_cells {
		_src125 := other._serial_cells[i]
		if !_tgt.Equals(_src125) { return false }
	}
	return true
}

func (p *_kCells) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_kCells(%+v)", *p)
}

func (p *_kCells) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._kCells",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_kCells)(nil)

func (p *_kCells) Validate() error {
	return nil
}

// The Plain column type Fraction Cell for results on Fraction of scan
// 
// Attributes:
//  - _c: The Column Name
//  - _ts: The Cell Timestamp
//  - _v: The Cell Value
// 
type _FCellPlain struct {
	_c string `thrift:"c,1" db:"c" json:"c"`
	_ts int64 `thrift:"ts,2" db:"ts" json:"ts"`
	_v []byte `thrift:"v,3" db:"v" json:"v"`
}

func New_FCellPlain() *_FCellPlain {
	return &_FCellPlain{}
}



func (p *_FCellPlain) Get_c() string {
	return p._c
}



func (p *_FCellPlain) Get_ts() int64 {
	return p._ts
}



func (p *_FCellPlain) Get_v() []byte {
	return p._v
}

func (p *_FCellPlain) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_FCellPlain) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._c = v
	}
	return nil
}

func (p *_FCellPlain) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p._ts = v
	}
	return nil
}

func (p *_FCellPlain) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p._v = v
	}
	return nil
}

func (p *_FCellPlain) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "FCellPlain"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_FCellPlain) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "c", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:c: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p._c)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.c (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:c: ", p), err)
	}
	return err
}

func (p *_FCellPlain) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ts", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ts: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._ts)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ts (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ts: ", p), err)
	}
	return err
}

func (p *_FCellPlain) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:v: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p._v); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.v (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:v: ", p), err)
	}
	return err
}

func (p *_FCellPlain) Equals(other *_FCellPlain) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._c != other._c { return false }
	if p._ts != other._ts { return false }
	if bytes.Compare(p._v, other._v) != 0 { return false }
	return true
}

func (p *_FCellPlain) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_FCellPlain(%+v)", *p)
}

func (p *_FCellPlain) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._FCellPlain",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_FCellPlain)(nil)

func (p *_FCellPlain) Validate() error {
	return nil
}

// The Counter column type Fraction Cell for results on Fraction of scan
// 
// Attributes:
//  - _c: The Column Name
//  - _ts: The Cell Timestamp
//  - _v: The Cell Counter Value
//  - _eq: The Counter EQ since ts
// 
type _FCellCounter struct {
	_c string `thrift:"c,1" db:"c" json:"c"`
	_ts int64 `thrift:"ts,2" db:"ts" json:"ts"`
	_v int64 `thrift:"v,3" db:"v" json:"v"`
	_eq *int64 `thrift:"eq,4" db:"eq" json:"eq,omitempty"`
}

func New_FCellCounter() *_FCellCounter {
	return &_FCellCounter{}
}



func (p *_FCellCounter) Get_c() string {
	return p._c
}



func (p *_FCellCounter) Get_ts() int64 {
	return p._ts
}



func (p *_FCellCounter) Get_v() int64 {
	return p._v
}

var _FCellCounter__eq_DEFAULT int64

func (p *_FCellCounter) Get_eq() int64 {
	if !p.IsSet_eq() {
		return _FCellCounter__eq_DEFAULT
	}
	return *p._eq
}

func (p *_FCellCounter) IsSet_eq() bool {
	return p._eq != nil
}

func (p *_FCellCounter) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_FCellCounter) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._c = v
	}
	return nil
}

func (p *_FCellCounter) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p._ts = v
	}
	return nil
}

func (p *_FCellCounter) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p._v = v
	}
	return nil
}

func (p *_FCellCounter) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p._eq = &v
	}
	return nil
}

func (p *_FCellCounter) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "FCellCounter"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_FCellCounter) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "c", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:c: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p._c)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.c (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:c: ", p), err)
	}
	return err
}

func (p *_FCellCounter) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ts", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ts: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._ts)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ts (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ts: ", p), err)
	}
	return err
}

func (p *_FCellCounter) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:v: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._v)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.v (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:v: ", p), err)
	}
	return err
}

func (p *_FCellCounter) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_eq() {
		if err := oprot.WriteFieldBegin(ctx, "eq", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:eq: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p._eq)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.eq (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:eq: ", p), err)
		}
	}
	return err
}

func (p *_FCellCounter) Equals(other *_FCellCounter) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._c != other._c { return false }
	if p._ts != other._ts { return false }
	if p._v != other._v { return false }
	if p._eq != other._eq {
		if p._eq == nil || other._eq == nil {
			return false
		}
		if (*p._eq) != (*other._eq) { return false }
	}
	return true
}

func (p *_FCellCounter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_FCellCounter(%+v)", *p)
}

func (p *_FCellCounter) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._FCellCounter",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_FCellCounter)(nil)

func (p *_FCellCounter) Validate() error {
	return nil
}

// The Serial column type Fraction Cell for results on Fraction of scan
// 
// Attributes:
//  - _c: The Column Name
//  - _ts: The Cell Timestamp
//  - _v: The Cell Serial Value
// 
type _FCellSerial struct {
	_c string `thrift:"c,1" db:"c" json:"c"`
	_ts int64 `thrift:"ts,2" db:"ts" json:"ts"`
	_v _CellValuesSerial `thrift:"v,3" db:"v" json:"v"`
}

func New_FCellSerial() *_FCellSerial {
	return &_FCellSerial{}
}



func (p *_FCellSerial) Get_c() string {
	return p._c
}



func (p *_FCellSerial) Get_ts() int64 {
	return p._ts
}



func (p *_FCellSerial) Get_v() _CellValuesSerial {
	return p._v
}

func (p *_FCellSerial) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_FCellSerial) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._c = v
	}
	return nil
}

func (p *_FCellSerial) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p._ts = v
	}
	return nil
}

func (p *_FCellSerial) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_CellValuesSerial, 0, size)
	p._v = tSlice
	for i := 0; i < size; i++ {
		__elem126 := &_CellValueSerial{}
		if err := __elem126.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem126), err)
		}
		p._v = append(p._v, _elem126)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_FCellSerial) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "FCellSerial"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_FCellSerial) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "c", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:c: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p._c)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.c (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:c: ", p), err)
	}
	return err
}

func (p *_FCellSerial) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ts", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ts: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._ts)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ts (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ts: ", p), err)
	}
	return err
}

func (p *_FCellSerial) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "v", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:v: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._v)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._v {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:v: ", p), err)
	}
	return err
}

func (p *_FCellSerial) Equals(other *_FCellSerial) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._c != other._c { return false }
	if p._ts != other._ts { return false }
	if len(p._v) != len(other._v) { return false }
	for i, _tgt := range p._v {
		_src127 := other._v[i]
		if !_tgt.Equals(_src127) { return false }
	}
	return true
}

func (p *_FCellSerial) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_FCellSerial(%+v)", *p)
}

func (p *_FCellSerial) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._FCellSerial",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_FCellSerial)(nil)

func (p *_FCellSerial) Validate() error {
	return nil
}

// The Fraction Cells for results on Fraction of scan
// 
// Attributes:
//  - _f: The Fraction Container for the Next Fractions Tree,  defined as FCells items in a map-container by current Fraction bytes
//  - _plain_cells: The current Fraction's Cells, defined as FCellPlain items in a list-container
//  - _counter_cells: The current Fraction's Cells, defined as FCellCounter items in a list-container
//  - _serial_cells: The current Fraction's Serial Cells, defined as FCellSerial items in a list-container
// 
type _FCells struct {
	_f map[string]*_FCells `thrift:"f,1" db:"f" json:"f"`
	_plain_cells []*_FCellPlain `thrift:"plain_cells,2" db:"plain_cells" json:"plain_cells"`
	_counter_cells []*_FCellCounter `thrift:"counter_cells,3" db:"counter_cells" json:"counter_cells"`
	_serial_cells []*_FCellSerial `thrift:"serial_cells,4" db:"serial_cells" json:"serial_cells"`
}

func New_FCells() *_FCells {
	return &_FCells{}
}



func (p *_FCells) Get_f() map[string]*_FCells {
	return p._f
}



func (p *_FCells) Get_plain_cells() []*_FCellPlain {
	return p._plain_cells
}



func (p *_FCells) Get_counter_cells() []*_FCellCounter {
	return p._counter_cells
}



func (p *_FCells) Get_serial_cells() []*_FCellSerial {
	return p._serial_cells
}

func (p *_FCells) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_FCells) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*_FCells, size)
	p._f = tMap
	for i := 0; i < size; i++ {
		var _key128 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__key128 = v
		}
		__val129 := &_FCells{}
		if err := __val129.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __val129), err)
		}
		p._f[_key128] = _val129
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *_FCells) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*_FCellPlain, 0, size)
	p._plain_cells = tSlice
	for i := 0; i < size; i++ {
		__elem130 := &_FCellPlain{}
		if err := __elem130.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem130), err)
		}
		p._plain_cells = append(p._plain_cells, _elem130)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_FCells) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*_FCellCounter, 0, size)
	p._counter_cells = tSlice
	for i := 0; i < size; i++ {
		__elem131 := &_FCellCounter{}
		if err := __elem131.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem131), err)
		}
		p._counter_cells = append(p._counter_cells, _elem131)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_FCells) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*_FCellSerial, 0, size)
	p._serial_cells = tSlice
	for i := 0; i < size; i++ {
		__elem132 := &_FCellSerial{}
		if err := __elem132.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem132), err)
		}
		p._serial_cells = append(p._serial_cells, _elem132)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_FCells) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "FCells"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_FCells) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "f", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:f: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p._f)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p._f {
		if err := oprot.WriteString(ctx, string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:f: ", p), err)
	}
	return err
}

func (p *_FCells) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "plain_cells", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:plain_cells: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._plain_cells)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._plain_cells {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:plain_cells: ", p), err)
	}
	return err
}

func (p *_FCells) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "counter_cells", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:counter_cells: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._counter_cells)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._counter_cells {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:counter_cells: ", p), err)
	}
	return err
}

func (p *_FCells) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "serial_cells", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:serial_cells: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._serial_cells)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._serial_cells {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:serial_cells: ", p), err)
	}
	return err
}

func (p *_FCells) Equals(other *_FCells) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p._f) != len(other._f) { return false }
	for k, _tgt := range p._f {
		_src133 := other._f[k]
		if !_tgt.Equals(_src133) { return false }
	}
	if len(p._plain_cells) != len(other._plain_cells) { return false }
	for i, _tgt := range p._plain_cells {
		_src134 := other._plain_cells[i]
		if !_tgt.Equals(_src134) { return false }
	}
	if len(p._counter_cells) != len(other._counter_cells) { return false }
	for i, _tgt := range p._counter_cells {
		_src135 := other._counter_cells[i]
		if !_tgt.Equals(_src135) { return false }
	}
	if len(p._serial_cells) != len(other._serial_cells) { return false }
	for i, _tgt := range p._serial_cells {
		_src136 := other._serial_cells[i]
		if !_tgt.Equals(_src136) { return false }
	}
	return true
}

func (p *_FCells) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_FCells(%+v)", *p)
}

func (p *_FCells) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._FCells",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_FCells)(nil)

func (p *_FCells) Validate() error {
	return nil
}

// A Grouped Cells result for results of scan, determined by the request's CellsResult enum
// 
// Attributes:
//  - _cells: The Cells in a list, defined as Cell items in a list-container
//  - _ccells: The Columns Cells in a map-container, defined as cCells items by Column Name
//  - _kcells: The Keys Cells in a list, defined as kCells items in a list-container
//  - _fcells: The Fraction Cells in struct FCells
// 
type _CellsGroup struct {
	_cells *_Cells `thrift:"cells,1" db:"cells" json:"cells"`
	_ccells _CCells `thrift:"ccells,2" db:"ccells" json:"ccells"`
	_kcells _KCells `thrift:"kcells,3" db:"kcells" json:"kcells"`
	_fcells *_FCells `thrift:"fcells,4" db:"fcells" json:"fcells"`
}

func New_CellsGroup() *_CellsGroup {
	return &_CellsGroup{}
}

var _CellsGroup__cells_DEFAULT *_Cells

func (p *_CellsGroup) Get_cells() *_Cells {
	if !p.IsSet_cells() {
		return _CellsGroup__cells_DEFAULT
	}
	return p._cells
}



func (p *_CellsGroup) Get_ccells() _CCells {
	return p._ccells
}



func (p *_CellsGroup) Get_kcells() _KCells {
	return p._kcells
}

var _CellsGroup__fcells_DEFAULT *_FCells

func (p *_CellsGroup) Get_fcells() *_FCells {
	if !p.IsSet_fcells() {
		return _CellsGroup__fcells_DEFAULT
	}
	return p._fcells
}

func (p *_CellsGroup) IsSet_cells() bool {
	return p._cells != nil
}

func (p *_CellsGroup) IsSet_fcells() bool {
	return p._fcells != nil
}

func (p *_CellsGroup) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_CellsGroup) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._cells = &_Cells{}
	if err := p._cells.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._cells), err)
	}
	return nil
}

func (p *_CellsGroup) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(_CCells, size)
	p._ccells = tMap
	for i := 0; i < size; i++ {
		var _key137 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__key137 = v
		}
		__val138 := &_cCells{}
		if err := __val138.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __val138), err)
		}
		p._ccells[_key137] = _val138
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *_CellsGroup) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_KCells, 0, size)
	p._kcells = tSlice
	for i := 0; i < size; i++ {
		__elem139 := &_kCells{}
		if err := __elem139.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem139), err)
		}
		p._kcells = append(p._kcells, _elem139)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_CellsGroup) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	p._fcells = &_FCells{}
	if err := p._fcells.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._fcells), err)
	}
	return nil
}

func (p *_CellsGroup) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CellsGroup"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_CellsGroup) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "cells", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cells: ", p), err)
	}
	if err := p._cells.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._cells), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cells: ", p), err)
	}
	return err
}

func (p *_CellsGroup) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ccells", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ccells: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p._ccells)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p._ccells {
		if err := oprot.WriteString(ctx, string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ccells: ", p), err)
	}
	return err
}

func (p *_CellsGroup) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "kcells", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:kcells: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._kcells)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._kcells {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:kcells: ", p), err)
	}
	return err
}

func (p *_CellsGroup) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fcells", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fcells: ", p), err)
	}
	if err := p._fcells.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._fcells), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fcells: ", p), err)
	}
	return err
}

func (p *_CellsGroup) Equals(other *_CellsGroup) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p._cells.Equals(other._cells) { return false }
	if len(p._ccells) != len(other._ccells) { return false }
	for k, _tgt := range p._ccells {
		_src140 := other._ccells[k]
		if !_tgt.Equals(_src140) { return false }
	}
	if len(p._kcells) != len(other._kcells) { return false }
	for i, _tgt := range p._kcells {
		_src141 := other._kcells[i]
		if !_tgt.Equals(_src141) { return false }
	}
	if !p._fcells.Equals(other._fcells) { return false }
	return true
}

func (p *_CellsGroup) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_CellsGroup(%+v)", *p)
}

func (p *_CellsGroup) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._CellsGroup",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_CellsGroup)(nil)

func (p *_CellsGroup) Validate() error {
	return nil
}

// The Compact Result
// 
// Attributes:
//  - _cid: Column ID
//  - _err: Error
// 
type _CompactResult_ struct {
	_cid int64 `thrift:"cid,1" db:"cid" json:"cid"`
	_err int32 `thrift:"err,2" db:"err" json:"err"`
}

func New_CompactResult_() *_CompactResult_ {
	return &_CompactResult_{}
}



func (p *_CompactResult_) Get_cid() int64 {
	return p._cid
}



func (p *_CompactResult_) Get_err() int32 {
	return p._err
}

func (p *_CompactResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_CompactResult_) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._cid = v
	}
	return nil
}

func (p *_CompactResult_) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p._err = v
	}
	return nil
}

func (p *_CompactResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CompactResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_CompactResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "cid", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cid: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._cid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cid: ", p), err)
	}
	return err
}

func (p *_CompactResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "err", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:err: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p._err)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.err (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:err: ", p), err)
	}
	return err
}

func (p *_CompactResult_) Equals(other *_CompactResult_) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p._cid != other._cid { return false }
	if p._err != other._err { return false }
	return true
}

func (p *_CompactResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_CompactResult_(%+v)", *p)
}

func (p *_CompactResult_) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._CompactResult_",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_CompactResult_)(nil)

func (p *_CompactResult_) Validate() error {
	return nil
}

// The Result of 'exec_sql'
// 
// Attributes:
//  - _schemas: Set with result for 'list columns' query
//  - _cells: Set with result for 'select' query
//  - _compact: Set with result for 'compact columns' query
// 
type _Result_ struct {
	_schemas _Schemas `thrift:"schemas,1" db:"schemas" json:"schemas"`
	_cells *_Cells `thrift:"cells,2" db:"cells" json:"cells"`
	_compact _CompactResults `thrift:"compact,3" db:"compact" json:"compact"`
}

func New_Result_() *_Result_ {
	return &_Result_{}
}



func (p *_Result_) Get_schemas() _Schemas {
	return p._schemas
}

var _Result___cells_DEFAULT *_Cells

func (p *_Result_) Get_cells() *_Cells {
	if !p.IsSet_cells() {
		return _Result___cells_DEFAULT
	}
	return p._cells
}



func (p *_Result_) Get_compact() _CompactResults {
	return p._compact
}

func (p *_Result_) IsSet_cells() bool {
	return p._cells != nil
}

func (p *_Result_) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Result_) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_Schemas, 0, size)
	p._schemas = tSlice
	for i := 0; i < size; i++ {
		__elem142 := &_Schema{}
		if err := __elem142.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem142), err)
		}
		p._schemas = append(p._schemas, _elem142)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_Result_) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p._cells = &_Cells{}
	if err := p._cells.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._cells), err)
	}
	return nil
}

func (p *_Result_) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_CompactResults, 0, size)
	p._compact = tSlice
	for i := 0; i < size; i++ {
		__elem143 := &_CompactResult_{}
		if err := __elem143.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem143), err)
		}
		p._compact = append(p._compact, _elem143)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_Result_) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Result_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "schemas", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:schemas: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._schemas)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._schemas {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:schemas: ", p), err)
	}
	return err
}

func (p *_Result_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "cells", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cells: ", p), err)
	}
	if err := p._cells.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._cells), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cells: ", p), err)
	}
	return err
}

func (p *_Result_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "compact", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:compact: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._compact)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p._compact {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:compact: ", p), err)
	}
	return err
}

func (p *_Result_) Equals(other *_Result_) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p._schemas) != len(other._schemas) { return false }
	for i, _tgt := range p._schemas {
		_src144 := other._schemas[i]
		if !_tgt.Equals(_src144) { return false }
	}
	if !p._cells.Equals(other._cells) { return false }
	if len(p._compact) != len(other._compact) { return false }
	for i, _tgt := range p._compact {
		_src145 := other._compact[i]
		if !_tgt.Equals(_src145) { return false }
	}
	return true
}

func (p *_Result_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Result_(%+v)", *p)
}

func (p *_Result_) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Result_",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Result_)(nil)

func (p *_Result_) Validate() error {
	return nil
}

type _Service interface {	//The SWC-DB Thrift Service

	// The direct SQL method to Manage Column.
	// 
	// Parameters:
	//  - _sql: The SQL string to Execute
	// 
	_sql_mng_column(ctx context.Context, sql string) (_err error)
	// The direct SQL method to List Columns
	// 
	// Parameters:
	//  - _sql: The SQL string to Execute
	// 
	_sql_list_columns(ctx context.Context, sql string) (_r _Schemas, _err error)
	// The direct SQL method to Compact Columns
	// 
	// Parameters:
	//  - _sql: The SQL string to Execute
	// 
	_sql_compact_columns(ctx context.Context, sql string) (_r _CompactResults, _err error)
	// The direct SQL method to select cells with result in CellsPlain.
	// 
	// Parameters:
	//  - _sql: The SQL string to Execute
	// 
	_sql_select_plain(ctx context.Context, sql string) (_r _CellsPlain, _err error)
	// The direct SQL method to select cells with result in CellsCounter.
	// 
	// Parameters:
	//  - _sql: The SQL string to Execute
	// 
	_sql_select_counter(ctx context.Context, sql string) (_r _CellsCounter, _err error)
	// The direct SQL method to select cells with result in CellsSerial.
	// 
	// Parameters:
	//  - _sql: The SQL string to Execute
	// 
	_sql_select_serial(ctx context.Context, sql string) (_r _CellsSerial, _err error)
	// The direct SQL method to select cells with result in Cells List.
	// 
	// Parameters:
	//  - _sql: The SQL string to Execute
	// 
	_sql_select(ctx context.Context, sql string) (_r *_Cells, _err error)
	// The direct SQL method to select cells with result in Columns Cells map.
	// 
	// Parameters:
	//  - _sql: The SQL string to Execute
	// 
	_sql_select_rslt_on_column(ctx context.Context, sql string) (_r _CCells, _err error)
	// The direct SQL method to select cells with result in Key Cells list.
	// 
	// Parameters:
	//  - _sql: The SQL string to Execute
	// 
	_sql_select_rslt_on_key(ctx context.Context, sql string) (_r _KCells, _err error)
	// The direct SQL method to select cells with result in Fractons Cells.
	// 
	// Parameters:
	//  - _sql: The SQL string to Execute
	// 
	_sql_select_rslt_on_fraction(ctx context.Context, sql string) (_r *_FCells, _err error)
	// The SQL method to select cells with result set by the request's type of CellsResult.
	// 
	// Parameters:
	//  - _sql: The SQL string to Execute
	//  - _rslt: The Type of Cells Result for the response
	// 
	_sql_query(ctx context.Context, sql string, rslt _CellsResult_) (_r *_CellsGroup, _err error)
	// The direct SQL method to update cells optionally to work with updater-id.
	// 
	// Parameters:
	//  - _sql: The SQL string to Execute
	//  - _updater_id: The Updater ID to work with
	// 
	_sql_update(ctx context.Context, sql string, updater_id int64) (_err error)
	// The SQL method to execute any query.
	// 
	// Parameters:
	//  - _sql: The SQL string to Execute
	// 
	_exec_sql(ctx context.Context, sql string) (_r *_Result_, _err error)
	// The method to Create an Updater ID with buffering size in bytes.
	// 
	// Parameters:
	//  - _buffer_size: The buffer size of the Updater
	// 
	_updater_create(ctx context.Context, buffer_size int32) (_r int64, _err error)
	// The method to Close an Updater ID.
	// 
	// Parameters:
	//  - _id: The Updater ID to close
	// 
	_updater_close(ctx context.Context, id int64) (_err error)
	// The direct method to update cells with cell in Update-Columns-Cells-Plain,
	// optionally to work with updater-id.
	// 
	// Parameters:
	//  - _cells: The Cells to update
	//  - _updater_id: The Updater ID to use for write
	// 
	_update_plain(ctx context.Context, cells _UCCellsPlain, updater_id int64) (_err error)
	// The direct method to update cells with cell in Update-Columns-Cells-Counter,
	// optionally to work with updater-id.
	// 
	// Parameters:
	//  - _cells: The Counter Cells to update
	//  - _updater_id: The Updater ID to use for write
	// 
	_update_counter(ctx context.Context, cells _UCCellsCounter, updater_id int64) (_err error)
	// The direct method to update cells with cell in Update-Columns-Cells-Serial,
	// optionally to work with updater-id.
	// 
	// Parameters:
	//  - _cells: The Serial Cells to update
	//  - _updater_id: The Updater ID to use for write
	// 
	_update_serial(ctx context.Context, cells _UCCellsSerial, updater_id int64) (_err error)
	// The method is to update cells by several Column-Types,
	// optionally to work with updater-id.
	// 
	// Parameters:
	//  - _plain: The PLAIN Cells to update
	//  - _counter: The COUNTER Cells to update
	//  - _serial: The SERIAL Cells to update
	//  - _updater_id: The Updater ID to use for write
	// 
	_update_by_types(ctx context.Context, plain _UCCellsPlain, counter _UCCellsCounter, serial _UCCellsSerial, updater_id int64) (_err error)
	// The direct method to Manage Column
	// 
	// Parameters:
	//  - _func: The Action Function to use
	//  - _schema: The Schema for the Action
	// 
	_mng_column(ctx context.Context, func_a1 _SchemaFunc, schema *_Schema) (_err error)
	// The direct method to List Columns
	// 
	// Parameters:
	//  - _spec: The Schemas Specifications to match Schema for response
	// 
	_list_columns(ctx context.Context, spec *_SpecSchemas) (_r _Schemas, _err error)
	// The direct method to Compact Columns
	// 
	// Parameters:
	//  - _spec: The Schemas Specifications to match columns to Compact
	// 
	_compact_columns(ctx context.Context, spec *_SpecSchemas) (_r _CompactResults, _err error)
	// The direct method to select cells with result in Cells List.
	// 
	// Parameters:
	//  - _spec: The Scan Specifications for the scan
	// 
	_scan(ctx context.Context, spec *_SpecScan) (_r *_Cells, _err error)
	// The direct method to select cells with result in Columns Cells map.
	// 
	// Parameters:
	//  - _spec: The Scan Specifications for the scan
	// 
	_scan_rslt_on_column(ctx context.Context, spec *_SpecScan) (_r _CCells, _err error)
	// The direct method to select cells with result in Key Cells list.
	// 
	// Parameters:
	//  - _spec: The Scan Specifications for the scan
	// 
	_scan_rslt_on_key(ctx context.Context, spec *_SpecScan) (_r _KCells, _err error)
	// The direct method to select cells with result in Fractons Cells.
	// 
	// Parameters:
	//  - _spec: The Scan Specifications for the scan
	// 
	_scan_rslt_on_fraction(ctx context.Context, spec *_SpecScan) (_r *_FCells, _err error)
	// The method to select cells with result set by the request's type of CellsResult.
	// 
	// Parameters:
	//  - _spec: The Scan Specifications for the scan
	//  - _rslt: The Type of Cells Result for the response
	// 
	_scan_rslt_on(ctx context.Context, spec *_SpecScan, rslt _CellsResult_) (_r *_CellsGroup, _err error)
}

//The SWC-DB Thrift Service
type _ServiceClient struct {
	c thrift.TClient
	meta thrift.ResponseMeta
}

func New_ServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *_ServiceClient {
	return &_ServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func New_ServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *_ServiceClient {
	return &_ServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func New_ServiceClient(c thrift.TClient) *_ServiceClient {
	return &_ServiceClient{
		c: c,
	}
}

func (p *_ServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *_ServiceClient) LastResponseMeta_() thrift.ResponseMeta {
	return p.meta
}

func (p *_ServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
	p.meta = meta
}

// The direct SQL method to Manage Column.
// 
// Parameters:
//  - _sql: The SQL string to Execute
// 
func (p *_ServiceClient) _sql_mng_column(ctx context.Context, sql string) (_err error) {
	var _args146 _Service_sql_mng_column_args
	_args146._sql = sql
	var _result148 _Service_sql_mng_column_result
	var _meta147 thrift.ResponseMeta
	_meta147, _err = p.Client_().Call(ctx, "sql_mng_column", &_args146, &_result148)
	p.SetLastResponseMeta_(_meta147)
	if _err != nil {
		return
	}
	switch {
	case _result148._e!= nil:
		return _result148._e
	}

	return nil
}

// The direct SQL method to List Columns
// 
// Parameters:
//  - _sql: The SQL string to Execute
// 
func (p *_ServiceClient) _sql_list_columns(ctx context.Context, sql string) (_r _Schemas, _err error) {
	var _args149 _Service_sql_list_columns_args
	_args149._sql = sql
	var _result151 _Service_sql_list_columns_result
	var _meta150 thrift.ResponseMeta
	_meta150, _err = p.Client_().Call(ctx, "sql_list_columns", &_args149, &_result151)
	p.SetLastResponseMeta_(_meta150)
	if _err != nil {
		return
	}
	switch {
	case _result151._e!= nil:
		return _r, _result151._e
	}

	return _result151.GetSuccess(), nil
}

// The direct SQL method to Compact Columns
// 
// Parameters:
//  - _sql: The SQL string to Execute
// 
func (p *_ServiceClient) _sql_compact_columns(ctx context.Context, sql string) (_r _CompactResults, _err error) {
	var _args152 _Service_sql_compact_columns_args
	_args152._sql = sql
	var _result154 _Service_sql_compact_columns_result
	var _meta153 thrift.ResponseMeta
	_meta153, _err = p.Client_().Call(ctx, "sql_compact_columns", &_args152, &_result154)
	p.SetLastResponseMeta_(_meta153)
	if _err != nil {
		return
	}
	switch {
	case _result154._e!= nil:
		return _r, _result154._e
	}

	return _result154.GetSuccess(), nil
}

// The direct SQL method to select cells with result in CellsPlain.
// 
// Parameters:
//  - _sql: The SQL string to Execute
// 
func (p *_ServiceClient) _sql_select_plain(ctx context.Context, sql string) (_r _CellsPlain, _err error) {
	var _args155 _Service_sql_select_plain_args
	_args155._sql = sql
	var _result157 _Service_sql_select_plain_result
	var _meta156 thrift.ResponseMeta
	_meta156, _err = p.Client_().Call(ctx, "sql_select_plain", &_args155, &_result157)
	p.SetLastResponseMeta_(_meta156)
	if _err != nil {
		return
	}
	switch {
	case _result157._e!= nil:
		return _r, _result157._e
	}

	return _result157.GetSuccess(), nil
}

// The direct SQL method to select cells with result in CellsCounter.
// 
// Parameters:
//  - _sql: The SQL string to Execute
// 
func (p *_ServiceClient) _sql_select_counter(ctx context.Context, sql string) (_r _CellsCounter, _err error) {
	var _args158 _Service_sql_select_counter_args
	_args158._sql = sql
	var _result160 _Service_sql_select_counter_result
	var _meta159 thrift.ResponseMeta
	_meta159, _err = p.Client_().Call(ctx, "sql_select_counter", &_args158, &_result160)
	p.SetLastResponseMeta_(_meta159)
	if _err != nil {
		return
	}
	switch {
	case _result160._e!= nil:
		return _r, _result160._e
	}

	return _result160.GetSuccess(), nil
}

// The direct SQL method to select cells with result in CellsSerial.
// 
// Parameters:
//  - _sql: The SQL string to Execute
// 
func (p *_ServiceClient) _sql_select_serial(ctx context.Context, sql string) (_r _CellsSerial, _err error) {
	var _args161 _Service_sql_select_serial_args
	_args161._sql = sql
	var _result163 _Service_sql_select_serial_result
	var _meta162 thrift.ResponseMeta
	_meta162, _err = p.Client_().Call(ctx, "sql_select_serial", &_args161, &_result163)
	p.SetLastResponseMeta_(_meta162)
	if _err != nil {
		return
	}
	switch {
	case _result163._e!= nil:
		return _r, _result163._e
	}

	return _result163.GetSuccess(), nil
}

// The direct SQL method to select cells with result in Cells List.
// 
// Parameters:
//  - _sql: The SQL string to Execute
// 
func (p *_ServiceClient) _sql_select(ctx context.Context, sql string) (_r *_Cells, _err error) {
	var _args164 _Service_sql_select_args
	_args164._sql = sql
	var _result166 _Service_sql_select_result
	var _meta165 thrift.ResponseMeta
	_meta165, _err = p.Client_().Call(ctx, "sql_select", &_args164, &_result166)
	p.SetLastResponseMeta_(_meta165)
	if _err != nil {
		return
	}
	switch {
	case _result166._e!= nil:
		return _r, _result166._e
	}

	if _ret167 := _result166.GetSuccess(); _ret167 != nil {
		return _ret167, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "sql_select failed: unknown result")
}

// The direct SQL method to select cells with result in Columns Cells map.
// 
// Parameters:
//  - _sql: The SQL string to Execute
// 
func (p *_ServiceClient) _sql_select_rslt_on_column(ctx context.Context, sql string) (_r _CCells, _err error) {
	var _args168 _Service_sql_select_rslt_on_column_args
	_args168._sql = sql
	var _result170 _Service_sql_select_rslt_on_column_result
	var _meta169 thrift.ResponseMeta
	_meta169, _err = p.Client_().Call(ctx, "sql_select_rslt_on_column", &_args168, &_result170)
	p.SetLastResponseMeta_(_meta169)
	if _err != nil {
		return
	}
	switch {
	case _result170._e!= nil:
		return _r, _result170._e
	}

	return _result170.GetSuccess(), nil
}

// The direct SQL method to select cells with result in Key Cells list.
// 
// Parameters:
//  - _sql: The SQL string to Execute
// 
func (p *_ServiceClient) _sql_select_rslt_on_key(ctx context.Context, sql string) (_r _KCells, _err error) {
	var _args171 _Service_sql_select_rslt_on_key_args
	_args171._sql = sql
	var _result173 _Service_sql_select_rslt_on_key_result
	var _meta172 thrift.ResponseMeta
	_meta172, _err = p.Client_().Call(ctx, "sql_select_rslt_on_key", &_args171, &_result173)
	p.SetLastResponseMeta_(_meta172)
	if _err != nil {
		return
	}
	switch {
	case _result173._e!= nil:
		return _r, _result173._e
	}

	return _result173.GetSuccess(), nil
}

// The direct SQL method to select cells with result in Fractons Cells.
// 
// Parameters:
//  - _sql: The SQL string to Execute
// 
func (p *_ServiceClient) _sql_select_rslt_on_fraction(ctx context.Context, sql string) (_r *_FCells, _err error) {
	var _args174 _Service_sql_select_rslt_on_fraction_args
	_args174._sql = sql
	var _result176 _Service_sql_select_rslt_on_fraction_result
	var _meta175 thrift.ResponseMeta
	_meta175, _err = p.Client_().Call(ctx, "sql_select_rslt_on_fraction", &_args174, &_result176)
	p.SetLastResponseMeta_(_meta175)
	if _err != nil {
		return
	}
	switch {
	case _result176._e!= nil:
		return _r, _result176._e
	}

	if _ret177 := _result176.GetSuccess(); _ret177 != nil {
		return _ret177, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "sql_select_rslt_on_fraction failed: unknown result")
}

// The SQL method to select cells with result set by the request's type of CellsResult.
// 
// Parameters:
//  - _sql: The SQL string to Execute
//  - _rslt: The Type of Cells Result for the response
// 
func (p *_ServiceClient) _sql_query(ctx context.Context, sql string, rslt _CellsResult_) (_r *_CellsGroup, _err error) {
	var _args178 _Service_sql_query_args
	_args178._sql = sql
	_args178._rslt = rslt
	var _result180 _Service_sql_query_result
	var _meta179 thrift.ResponseMeta
	_meta179, _err = p.Client_().Call(ctx, "sql_query", &_args178, &_result180)
	p.SetLastResponseMeta_(_meta179)
	if _err != nil {
		return
	}
	switch {
	case _result180._e!= nil:
		return _r, _result180._e
	}

	if _ret181 := _result180.GetSuccess(); _ret181 != nil {
		return _ret181, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "sql_query failed: unknown result")
}

// The direct SQL method to update cells optionally to work with updater-id.
// 
// Parameters:
//  - _sql: The SQL string to Execute
//  - _updater_id: The Updater ID to work with
// 
func (p *_ServiceClient) _sql_update(ctx context.Context, sql string, updater_id int64) (_err error) {
	var _args182 _Service_sql_update_args
	_args182._sql = sql
	_args182._updater_id = updater_id
	var _result184 _Service_sql_update_result
	var _meta183 thrift.ResponseMeta
	_meta183, _err = p.Client_().Call(ctx, "sql_update", &_args182, &_result184)
	p.SetLastResponseMeta_(_meta183)
	if _err != nil {
		return
	}
	switch {
	case _result184._e!= nil:
		return _result184._e
	}

	return nil
}

// The SQL method to execute any query.
// 
// Parameters:
//  - _sql: The SQL string to Execute
// 
func (p *_ServiceClient) _exec_sql(ctx context.Context, sql string) (_r *_Result_, _err error) {
	var _args185 _Service_exec_sql_args
	_args185._sql = sql
	var _result187 _Service_exec_sql_result
	var _meta186 thrift.ResponseMeta
	_meta186, _err = p.Client_().Call(ctx, "exec_sql", &_args185, &_result187)
	p.SetLastResponseMeta_(_meta186)
	if _err != nil {
		return
	}
	switch {
	case _result187._e!= nil:
		return _r, _result187._e
	}

	if _ret188 := _result187.GetSuccess(); _ret188 != nil {
		return _ret188, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "exec_sql failed: unknown result")
}

// The method to Create an Updater ID with buffering size in bytes.
// 
// Parameters:
//  - _buffer_size: The buffer size of the Updater
// 
func (p *_ServiceClient) _updater_create(ctx context.Context, buffer_size int32) (_r int64, _err error) {
	var _args189 _Service_updater_create_args
	_args189._buffer_size = buffer_size
	var _result191 _Service_updater_create_result
	var _meta190 thrift.ResponseMeta
	_meta190, _err = p.Client_().Call(ctx, "updater_create", &_args189, &_result191)
	p.SetLastResponseMeta_(_meta190)
	if _err != nil {
		return
	}
	switch {
	case _result191._e!= nil:
		return _r, _result191._e
	}

	return _result191.GetSuccess(), nil
}

// The method to Close an Updater ID.
// 
// Parameters:
//  - _id: The Updater ID to close
// 
func (p *_ServiceClient) _updater_close(ctx context.Context, id int64) (_err error) {
	var _args192 _Service_updater_close_args
	_args192._id = id
	var _result194 _Service_updater_close_result
	var _meta193 thrift.ResponseMeta
	_meta193, _err = p.Client_().Call(ctx, "updater_close", &_args192, &_result194)
	p.SetLastResponseMeta_(_meta193)
	if _err != nil {
		return
	}
	switch {
	case _result194._e!= nil:
		return _result194._e
	}

	return nil
}

// The direct method to update cells with cell in Update-Columns-Cells-Plain,
// optionally to work with updater-id.
// 
// Parameters:
//  - _cells: The Cells to update
//  - _updater_id: The Updater ID to use for write
// 
func (p *_ServiceClient) _update_plain(ctx context.Context, cells _UCCellsPlain, updater_id int64) (_err error) {
	var _args195 _Service_update_plain_args
	_args195._cells = cells
	_args195._updater_id = updater_id
	var _result197 _Service_update_plain_result
	var _meta196 thrift.ResponseMeta
	_meta196, _err = p.Client_().Call(ctx, "update_plain", &_args195, &_result197)
	p.SetLastResponseMeta_(_meta196)
	if _err != nil {
		return
	}
	switch {
	case _result197._e!= nil:
		return _result197._e
	}

	return nil
}

// The direct method to update cells with cell in Update-Columns-Cells-Counter,
// optionally to work with updater-id.
// 
// Parameters:
//  - _cells: The Counter Cells to update
//  - _updater_id: The Updater ID to use for write
// 
func (p *_ServiceClient) _update_counter(ctx context.Context, cells _UCCellsCounter, updater_id int64) (_err error) {
	var _args198 _Service_update_counter_args
	_args198._cells = cells
	_args198._updater_id = updater_id
	var _result200 _Service_update_counter_result
	var _meta199 thrift.ResponseMeta
	_meta199, _err = p.Client_().Call(ctx, "update_counter", &_args198, &_result200)
	p.SetLastResponseMeta_(_meta199)
	if _err != nil {
		return
	}
	switch {
	case _result200._e!= nil:
		return _result200._e
	}

	return nil
}

// The direct method to update cells with cell in Update-Columns-Cells-Serial,
// optionally to work with updater-id.
// 
// Parameters:
//  - _cells: The Serial Cells to update
//  - _updater_id: The Updater ID to use for write
// 
func (p *_ServiceClient) _update_serial(ctx context.Context, cells _UCCellsSerial, updater_id int64) (_err error) {
	var _args201 _Service_update_serial_args
	_args201._cells = cells
	_args201._updater_id = updater_id
	var _result203 _Service_update_serial_result
	var _meta202 thrift.ResponseMeta
	_meta202, _err = p.Client_().Call(ctx, "update_serial", &_args201, &_result203)
	p.SetLastResponseMeta_(_meta202)
	if _err != nil {
		return
	}
	switch {
	case _result203._e!= nil:
		return _result203._e
	}

	return nil
}

// The method is to update cells by several Column-Types,
// optionally to work with updater-id.
// 
// Parameters:
//  - _plain: The PLAIN Cells to update
//  - _counter: The COUNTER Cells to update
//  - _serial: The SERIAL Cells to update
//  - _updater_id: The Updater ID to use for write
// 
func (p *_ServiceClient) _update_by_types(ctx context.Context, plain _UCCellsPlain, counter _UCCellsCounter, serial _UCCellsSerial, updater_id int64) (_err error) {
	var _args204 _Service_update_by_types_args
	_args204._plain = plain
	_args204._counter = counter
	_args204._serial = serial
	_args204._updater_id = updater_id
	var _result206 _Service_update_by_types_result
	var _meta205 thrift.ResponseMeta
	_meta205, _err = p.Client_().Call(ctx, "update_by_types", &_args204, &_result206)
	p.SetLastResponseMeta_(_meta205)
	if _err != nil {
		return
	}
	switch {
	case _result206._e!= nil:
		return _result206._e
	}

	return nil
}

// The direct method to Manage Column
// 
// Parameters:
//  - _func: The Action Function to use
//  - _schema: The Schema for the Action
// 
func (p *_ServiceClient) _mng_column(ctx context.Context, func_a1 _SchemaFunc, schema *_Schema) (_err error) {
	var _args207 _Service_mng_column_args
	_args207._func = func_a1
	_args207._schema = schema
	var _result209 _Service_mng_column_result
	var _meta208 thrift.ResponseMeta
	_meta208, _err = p.Client_().Call(ctx, "mng_column", &_args207, &_result209)
	p.SetLastResponseMeta_(_meta208)
	if _err != nil {
		return
	}
	switch {
	case _result209._e!= nil:
		return _result209._e
	}

	return nil
}

// The direct method to List Columns
// 
// Parameters:
//  - _spec: The Schemas Specifications to match Schema for response
// 
func (p *_ServiceClient) _list_columns(ctx context.Context, spec *_SpecSchemas) (_r _Schemas, _err error) {
	var _args210 _Service_list_columns_args
	_args210._spec = spec
	var _result212 _Service_list_columns_result
	var _meta211 thrift.ResponseMeta
	_meta211, _err = p.Client_().Call(ctx, "list_columns", &_args210, &_result212)
	p.SetLastResponseMeta_(_meta211)
	if _err != nil {
		return
	}
	switch {
	case _result212._e!= nil:
		return _r, _result212._e
	}

	return _result212.GetSuccess(), nil
}

// The direct method to Compact Columns
// 
// Parameters:
//  - _spec: The Schemas Specifications to match columns to Compact
// 
func (p *_ServiceClient) _compact_columns(ctx context.Context, spec *_SpecSchemas) (_r _CompactResults, _err error) {
	var _args213 _Service_compact_columns_args
	_args213._spec = spec
	var _result215 _Service_compact_columns_result
	var _meta214 thrift.ResponseMeta
	_meta214, _err = p.Client_().Call(ctx, "compact_columns", &_args213, &_result215)
	p.SetLastResponseMeta_(_meta214)
	if _err != nil {
		return
	}
	switch {
	case _result215._e!= nil:
		return _r, _result215._e
	}

	return _result215.GetSuccess(), nil
}

// The direct method to select cells with result in Cells List.
// 
// Parameters:
//  - _spec: The Scan Specifications for the scan
// 
func (p *_ServiceClient) _scan(ctx context.Context, spec *_SpecScan) (_r *_Cells, _err error) {
	var _args216 _Service_scan_args
	_args216._spec = spec
	var _result218 _Service_scan_result
	var _meta217 thrift.ResponseMeta
	_meta217, _err = p.Client_().Call(ctx, "scan", &_args216, &_result218)
	p.SetLastResponseMeta_(_meta217)
	if _err != nil {
		return
	}
	switch {
	case _result218._e!= nil:
		return _r, _result218._e
	}

	if _ret219 := _result218.GetSuccess(); _ret219 != nil {
		return _ret219, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "scan failed: unknown result")
}

// The direct method to select cells with result in Columns Cells map.
// 
// Parameters:
//  - _spec: The Scan Specifications for the scan
// 
func (p *_ServiceClient) _scan_rslt_on_column(ctx context.Context, spec *_SpecScan) (_r _CCells, _err error) {
	var _args220 _Service_scan_rslt_on_column_args
	_args220._spec = spec
	var _result222 _Service_scan_rslt_on_column_result
	var _meta221 thrift.ResponseMeta
	_meta221, _err = p.Client_().Call(ctx, "scan_rslt_on_column", &_args220, &_result222)
	p.SetLastResponseMeta_(_meta221)
	if _err != nil {
		return
	}
	switch {
	case _result222._e!= nil:
		return _r, _result222._e
	}

	return _result222.GetSuccess(), nil
}

// The direct method to select cells with result in Key Cells list.
// 
// Parameters:
//  - _spec: The Scan Specifications for the scan
// 
func (p *_ServiceClient) _scan_rslt_on_key(ctx context.Context, spec *_SpecScan) (_r _KCells, _err error) {
	var _args223 _Service_scan_rslt_on_key_args
	_args223._spec = spec
	var _result225 _Service_scan_rslt_on_key_result
	var _meta224 thrift.ResponseMeta
	_meta224, _err = p.Client_().Call(ctx, "scan_rslt_on_key", &_args223, &_result225)
	p.SetLastResponseMeta_(_meta224)
	if _err != nil {
		return
	}
	switch {
	case _result225._e!= nil:
		return _r, _result225._e
	}

	return _result225.GetSuccess(), nil
}

// The direct method to select cells with result in Fractons Cells.
// 
// Parameters:
//  - _spec: The Scan Specifications for the scan
// 
func (p *_ServiceClient) _scan_rslt_on_fraction(ctx context.Context, spec *_SpecScan) (_r *_FCells, _err error) {
	var _args226 _Service_scan_rslt_on_fraction_args
	_args226._spec = spec
	var _result228 _Service_scan_rslt_on_fraction_result
	var _meta227 thrift.ResponseMeta
	_meta227, _err = p.Client_().Call(ctx, "scan_rslt_on_fraction", &_args226, &_result228)
	p.SetLastResponseMeta_(_meta227)
	if _err != nil {
		return
	}
	switch {
	case _result228._e!= nil:
		return _r, _result228._e
	}

	if _ret229 := _result228.GetSuccess(); _ret229 != nil {
		return _ret229, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "scan_rslt_on_fraction failed: unknown result")
}

// The method to select cells with result set by the request's type of CellsResult.
// 
// Parameters:
//  - _spec: The Scan Specifications for the scan
//  - _rslt: The Type of Cells Result for the response
// 
func (p *_ServiceClient) _scan_rslt_on(ctx context.Context, spec *_SpecScan, rslt _CellsResult_) (_r *_CellsGroup, _err error) {
	var _args230 _Service_scan_rslt_on_args
	_args230._spec = spec
	_args230._rslt = rslt
	var _result232 _Service_scan_rslt_on_result
	var _meta231 thrift.ResponseMeta
	_meta231, _err = p.Client_().Call(ctx, "scan_rslt_on", &_args230, &_result232)
	p.SetLastResponseMeta_(_meta231)
	if _err != nil {
		return
	}
	switch {
	case _result232._e!= nil:
		return _r, _result232._e
	}

	if _ret233 := _result232.GetSuccess(); _ret233 != nil {
		return _ret233, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "scan_rslt_on failed: unknown result")
}

type _ServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler _Service
}

func (p *_ServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *_ServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *_ServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func New_ServiceProcessor(handler _Service) *_ServiceProcessor {

	self234 := &_ServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
	self234.processorMap["sql_mng_column"] = &_ServiceProcessor_sql_mng_column{handler:handler}
	self234.processorMap["sql_list_columns"] = &_ServiceProcessor_sql_list_columns{handler:handler}
	self234.processorMap["sql_compact_columns"] = &_ServiceProcessor_sql_compact_columns{handler:handler}
	self234.processorMap["sql_select_plain"] = &_ServiceProcessor_sql_select_plain{handler:handler}
	self234.processorMap["sql_select_counter"] = &_ServiceProcessor_sql_select_counter{handler:handler}
	self234.processorMap["sql_select_serial"] = &_ServiceProcessor_sql_select_serial{handler:handler}
	self234.processorMap["sql_select"] = &_ServiceProcessor_sql_select{handler:handler}
	self234.processorMap["sql_select_rslt_on_column"] = &_ServiceProcessor_sql_select_rslt_on_column{handler:handler}
	self234.processorMap["sql_select_rslt_on_key"] = &_ServiceProcessor_sql_select_rslt_on_key{handler:handler}
	self234.processorMap["sql_select_rslt_on_fraction"] = &_ServiceProcessor_sql_select_rslt_on_fraction{handler:handler}
	self234.processorMap["sql_query"] = &_ServiceProcessor_sql_query{handler:handler}
	self234.processorMap["sql_update"] = &_ServiceProcessor_sql_update{handler:handler}
	self234.processorMap["exec_sql"] = &_ServiceProcessor_exec_sql{handler:handler}
	self234.processorMap["updater_create"] = &_ServiceProcessor_updater_create{handler:handler}
	self234.processorMap["updater_close"] = &_ServiceProcessor_updater_close{handler:handler}
	self234.processorMap["update_plain"] = &_ServiceProcessor_update_plain{handler:handler}
	self234.processorMap["update_counter"] = &_ServiceProcessor_update_counter{handler:handler}
	self234.processorMap["update_serial"] = &_ServiceProcessor_update_serial{handler:handler}
	self234.processorMap["update_by_types"] = &_ServiceProcessor_update_by_types{handler:handler}
	self234.processorMap["mng_column"] = &_ServiceProcessor_mng_column{handler:handler}
	self234.processorMap["list_columns"] = &_ServiceProcessor_list_columns{handler:handler}
	self234.processorMap["compact_columns"] = &_ServiceProcessor_compact_columns{handler:handler}
	self234.processorMap["scan"] = &_ServiceProcessor_scan{handler:handler}
	self234.processorMap["scan_rslt_on_column"] = &_ServiceProcessor_scan_rslt_on_column{handler:handler}
	self234.processorMap["scan_rslt_on_key"] = &_ServiceProcessor_scan_rslt_on_key{handler:handler}
	self234.processorMap["scan_rslt_on_fraction"] = &_ServiceProcessor_scan_rslt_on_fraction{handler:handler}
	self234.processorMap["scan_rslt_on"] = &_ServiceProcessor_scan_rslt_on{handler:handler}
	return self234
}

func (p *_ServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
	if err2 != nil { return false, thrift.WrapTException(err2) }
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(ctx, thrift.STRUCT)
	iprot.ReadMessageEnd(ctx)
	x235 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
	oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
	x235.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return false, x235
}

type _ServiceProcessor_sql_mng_column struct {
	handler _Service
}

func (p *_ServiceProcessor_sql_mng_column) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err236 error
	args := _Service_sql_mng_column_args{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "sql_mng_column", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := _Service_sql_mng_column_result{}
	if err2 := p.handler._sql_mng_column(ctx, args._sql); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *_Exception:
			result._e = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err2)
			}
			if errors.Is(err2, context.Canceled) {
				if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
					return false, thrift.WrapTException(err)
				}
			}
			_exc237 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sql_mng_column: " + err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "sql_mng_column", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err236 = thrift.WrapTException(err2)
			}
			if err2 := _exc237.Write(ctx, oprot); _write_err236 == nil && err2 != nil {
				_write_err236 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err236 == nil && err2 != nil {
				_write_err236 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err236 == nil && err2 != nil {
				_write_err236 = thrift.WrapTException(err2)
			}
			if _write_err236 != nil {
				return false, thrift.WrapTException(_write_err236)
			}
			return true, err
		}
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "sql_mng_column", thrift.REPLY, seqId); err2 != nil {
		_write_err236 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err236 == nil && err2 != nil {
		_write_err236 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err236 == nil && err2 != nil {
		_write_err236 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err236 == nil && err2 != nil {
		_write_err236 = thrift.WrapTException(err2)
	}
	if _write_err236 != nil {
		return false, thrift.WrapTException(_write_err236)
	}
	return true, err
}

type _ServiceProcessor_sql_list_columns struct {
	handler _Service
}

func (p *_ServiceProcessor_sql_list_columns) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err238 error
	args := _Service_sql_list_columns_args{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "sql_list_columns", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := _Service_sql_list_columns_result{}
	if retval, err2 := p.handler._sql_list_columns(ctx, args._sql); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *_Exception:
			result._e = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err2)
			}
			if errors.Is(err2, context.Canceled) {
				if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
					return false, thrift.WrapTException(err)
				}
			}
			_exc239 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sql_list_columns: " + err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "sql_list_columns", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err238 = thrift.WrapTException(err2)
			}
			if err2 := _exc239.Write(ctx, oprot); _write_err238 == nil && err2 != nil {
				_write_err238 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err238 == nil && err2 != nil {
				_write_err238 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err238 == nil && err2 != nil {
				_write_err238 = thrift.WrapTException(err2)
			}
			if _write_err238 != nil {
				return false, thrift.WrapTException(_write_err238)
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "sql_list_columns", thrift.REPLY, seqId); err2 != nil {
		_write_err238 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err238 == nil && err2 != nil {
		_write_err238 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err238 == nil && err2 != nil {
		_write_err238 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err238 == nil && err2 != nil {
		_write_err238 = thrift.WrapTException(err2)
	}
	if _write_err238 != nil {
		return false, thrift.WrapTException(_write_err238)
	}
	return true, err
}

type _ServiceProcessor_sql_compact_columns struct {
	handler _Service
}

func (p *_ServiceProcessor_sql_compact_columns) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err240 error
	args := _Service_sql_compact_columns_args{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "sql_compact_columns", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := _Service_sql_compact_columns_result{}
	if retval, err2 := p.handler._sql_compact_columns(ctx, args._sql); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *_Exception:
			result._e = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err2)
			}
			if errors.Is(err2, context.Canceled) {
				if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
					return false, thrift.WrapTException(err)
				}
			}
			_exc241 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sql_compact_columns: " + err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "sql_compact_columns", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err240 = thrift.WrapTException(err2)
			}
			if err2 := _exc241.Write(ctx, oprot); _write_err240 == nil && err2 != nil {
				_write_err240 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err240 == nil && err2 != nil {
				_write_err240 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err240 == nil && err2 != nil {
				_write_err240 = thrift.WrapTException(err2)
			}
			if _write_err240 != nil {
				return false, thrift.WrapTException(_write_err240)
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "sql_compact_columns", thrift.REPLY, seqId); err2 != nil {
		_write_err240 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err240 == nil && err2 != nil {
		_write_err240 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err240 == nil && err2 != nil {
		_write_err240 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err240 == nil && err2 != nil {
		_write_err240 = thrift.WrapTException(err2)
	}
	if _write_err240 != nil {
		return false, thrift.WrapTException(_write_err240)
	}
	return true, err
}

type _ServiceProcessor_sql_select_plain struct {
	handler _Service
}

func (p *_ServiceProcessor_sql_select_plain) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err242 error
	args := _Service_sql_select_plain_args{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "sql_select_plain", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := _Service_sql_select_plain_result{}
	if retval, err2 := p.handler._sql_select_plain(ctx, args._sql); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *_Exception:
			result._e = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err2)
			}
			if errors.Is(err2, context.Canceled) {
				if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
					return false, thrift.WrapTException(err)
				}
			}
			_exc243 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sql_select_plain: " + err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "sql_select_plain", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err242 = thrift.WrapTException(err2)
			}
			if err2 := _exc243.Write(ctx, oprot); _write_err242 == nil && err2 != nil {
				_write_err242 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err242 == nil && err2 != nil {
				_write_err242 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err242 == nil && err2 != nil {
				_write_err242 = thrift.WrapTException(err2)
			}
			if _write_err242 != nil {
				return false, thrift.WrapTException(_write_err242)
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "sql_select_plain", thrift.REPLY, seqId); err2 != nil {
		_write_err242 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err242 == nil && err2 != nil {
		_write_err242 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err242 == nil && err2 != nil {
		_write_err242 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err242 == nil && err2 != nil {
		_write_err242 = thrift.WrapTException(err2)
	}
	if _write_err242 != nil {
		return false, thrift.WrapTException(_write_err242)
	}
	return true, err
}

type _ServiceProcessor_sql_select_counter struct {
	handler _Service
}

func (p *_ServiceProcessor_sql_select_counter) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err244 error
	args := _Service_sql_select_counter_args{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "sql_select_counter", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := _Service_sql_select_counter_result{}
	if retval, err2 := p.handler._sql_select_counter(ctx, args._sql); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *_Exception:
			result._e = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err2)
			}
			if errors.Is(err2, context.Canceled) {
				if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
					return false, thrift.WrapTException(err)
				}
			}
			_exc245 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sql_select_counter: " + err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "sql_select_counter", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err244 = thrift.WrapTException(err2)
			}
			if err2 := _exc245.Write(ctx, oprot); _write_err244 == nil && err2 != nil {
				_write_err244 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err244 == nil && err2 != nil {
				_write_err244 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err244 == nil && err2 != nil {
				_write_err244 = thrift.WrapTException(err2)
			}
			if _write_err244 != nil {
				return false, thrift.WrapTException(_write_err244)
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "sql_select_counter", thrift.REPLY, seqId); err2 != nil {
		_write_err244 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err244 == nil && err2 != nil {
		_write_err244 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err244 == nil && err2 != nil {
		_write_err244 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err244 == nil && err2 != nil {
		_write_err244 = thrift.WrapTException(err2)
	}
	if _write_err244 != nil {
		return false, thrift.WrapTException(_write_err244)
	}
	return true, err
}

type _ServiceProcessor_sql_select_serial struct {
	handler _Service
}

func (p *_ServiceProcessor_sql_select_serial) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err246 error
	args := _Service_sql_select_serial_args{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "sql_select_serial", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := _Service_sql_select_serial_result{}
	if retval, err2 := p.handler._sql_select_serial(ctx, args._sql); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *_Exception:
			result._e = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err2)
			}
			if errors.Is(err2, context.Canceled) {
				if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
					return false, thrift.WrapTException(err)
				}
			}
			_exc247 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sql_select_serial: " + err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "sql_select_serial", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err246 = thrift.WrapTException(err2)
			}
			if err2 := _exc247.Write(ctx, oprot); _write_err246 == nil && err2 != nil {
				_write_err246 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err246 == nil && err2 != nil {
				_write_err246 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err246 == nil && err2 != nil {
				_write_err246 = thrift.WrapTException(err2)
			}
			if _write_err246 != nil {
				return false, thrift.WrapTException(_write_err246)
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "sql_select_serial", thrift.REPLY, seqId); err2 != nil {
		_write_err246 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err246 == nil && err2 != nil {
		_write_err246 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err246 == nil && err2 != nil {
		_write_err246 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err246 == nil && err2 != nil {
		_write_err246 = thrift.WrapTException(err2)
	}
	if _write_err246 != nil {
		return false, thrift.WrapTException(_write_err246)
	}
	return true, err
}

type _ServiceProcessor_sql_select struct {
	handler _Service
}

func (p *_ServiceProcessor_sql_select) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err248 error
	args := _Service_sql_select_args{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "sql_select", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := _Service_sql_select_result{}
	if retval, err2 := p.handler._sql_select(ctx, args._sql); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *_Exception:
			result._e = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err2)
			}
			if errors.Is(err2, context.Canceled) {
				if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
					return false, thrift.WrapTException(err)
				}
			}
			_exc249 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sql_select: " + err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "sql_select", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err248 = thrift.WrapTException(err2)
			}
			if err2 := _exc249.Write(ctx, oprot); _write_err248 == nil && err2 != nil {
				_write_err248 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err248 == nil && err2 != nil {
				_write_err248 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err248 == nil && err2 != nil {
				_write_err248 = thrift.WrapTException(err2)
			}
			if _write_err248 != nil {
				return false, thrift.WrapTException(_write_err248)
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "sql_select", thrift.REPLY, seqId); err2 != nil {
		_write_err248 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err248 == nil && err2 != nil {
		_write_err248 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err248 == nil && err2 != nil {
		_write_err248 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err248 == nil && err2 != nil {
		_write_err248 = thrift.WrapTException(err2)
	}
	if _write_err248 != nil {
		return false, thrift.WrapTException(_write_err248)
	}
	return true, err
}

type _ServiceProcessor_sql_select_rslt_on_column struct {
	handler _Service
}

func (p *_ServiceProcessor_sql_select_rslt_on_column) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err250 error
	args := _Service_sql_select_rslt_on_column_args{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "sql_select_rslt_on_column", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := _Service_sql_select_rslt_on_column_result{}
	if retval, err2 := p.handler._sql_select_rslt_on_column(ctx, args._sql); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *_Exception:
			result._e = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err2)
			}
			if errors.Is(err2, context.Canceled) {
				if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
					return false, thrift.WrapTException(err)
				}
			}
			_exc251 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sql_select_rslt_on_column: " + err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "sql_select_rslt_on_column", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err250 = thrift.WrapTException(err2)
			}
			if err2 := _exc251.Write(ctx, oprot); _write_err250 == nil && err2 != nil {
				_write_err250 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err250 == nil && err2 != nil {
				_write_err250 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err250 == nil && err2 != nil {
				_write_err250 = thrift.WrapTException(err2)
			}
			if _write_err250 != nil {
				return false, thrift.WrapTException(_write_err250)
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "sql_select_rslt_on_column", thrift.REPLY, seqId); err2 != nil {
		_write_err250 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err250 == nil && err2 != nil {
		_write_err250 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err250 == nil && err2 != nil {
		_write_err250 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err250 == nil && err2 != nil {
		_write_err250 = thrift.WrapTException(err2)
	}
	if _write_err250 != nil {
		return false, thrift.WrapTException(_write_err250)
	}
	return true, err
}

type _ServiceProcessor_sql_select_rslt_on_key struct {
	handler _Service
}

func (p *_ServiceProcessor_sql_select_rslt_on_key) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err252 error
	args := _Service_sql_select_rslt_on_key_args{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "sql_select_rslt_on_key", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := _Service_sql_select_rslt_on_key_result{}
	if retval, err2 := p.handler._sql_select_rslt_on_key(ctx, args._sql); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *_Exception:
			result._e = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err2)
			}
			if errors.Is(err2, context.Canceled) {
				if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
					return false, thrift.WrapTException(err)
				}
			}
			_exc253 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sql_select_rslt_on_key: " + err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "sql_select_rslt_on_key", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err252 = thrift.WrapTException(err2)
			}
			if err2 := _exc253.Write(ctx, oprot); _write_err252 == nil && err2 != nil {
				_write_err252 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err252 == nil && err2 != nil {
				_write_err252 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err252 == nil && err2 != nil {
				_write_err252 = thrift.WrapTException(err2)
			}
			if _write_err252 != nil {
				return false, thrift.WrapTException(_write_err252)
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "sql_select_rslt_on_key", thrift.REPLY, seqId); err2 != nil {
		_write_err252 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err252 == nil && err2 != nil {
		_write_err252 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err252 == nil && err2 != nil {
		_write_err252 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err252 == nil && err2 != nil {
		_write_err252 = thrift.WrapTException(err2)
	}
	if _write_err252 != nil {
		return false, thrift.WrapTException(_write_err252)
	}
	return true, err
}

type _ServiceProcessor_sql_select_rslt_on_fraction struct {
	handler _Service
}

func (p *_ServiceProcessor_sql_select_rslt_on_fraction) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err254 error
	args := _Service_sql_select_rslt_on_fraction_args{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "sql_select_rslt_on_fraction", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := _Service_sql_select_rslt_on_fraction_result{}
	if retval, err2 := p.handler._sql_select_rslt_on_fraction(ctx, args._sql); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *_Exception:
			result._e = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err2)
			}
			if errors.Is(err2, context.Canceled) {
				if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
					return false, thrift.WrapTException(err)
				}
			}
			_exc255 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sql_select_rslt_on_fraction: " + err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "sql_select_rslt_on_fraction", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err254 = thrift.WrapTException(err2)
			}
			if err2 := _exc255.Write(ctx, oprot); _write_err254 == nil && err2 != nil {
				_write_err254 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err254 == nil && err2 != nil {
				_write_err254 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err254 == nil && err2 != nil {
				_write_err254 = thrift.WrapTException(err2)
			}
			if _write_err254 != nil {
				return false, thrift.WrapTException(_write_err254)
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "sql_select_rslt_on_fraction", thrift.REPLY, seqId); err2 != nil {
		_write_err254 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err254 == nil && err2 != nil {
		_write_err254 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err254 == nil && err2 != nil {
		_write_err254 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err254 == nil && err2 != nil {
		_write_err254 = thrift.WrapTException(err2)
	}
	if _write_err254 != nil {
		return false, thrift.WrapTException(_write_err254)
	}
	return true, err
}

type _ServiceProcessor_sql_query struct {
	handler _Service
}

func (p *_ServiceProcessor_sql_query) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err256 error
	args := _Service_sql_query_args{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "sql_query", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := _Service_sql_query_result{}
	if retval, err2 := p.handler._sql_query(ctx, args._sql, args._rslt); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *_Exception:
			result._e = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err2)
			}
			if errors.Is(err2, context.Canceled) {
				if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
					return false, thrift.WrapTException(err)
				}
			}
			_exc257 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sql_query: " + err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "sql_query", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err256 = thrift.WrapTException(err2)
			}
			if err2 := _exc257.Write(ctx, oprot); _write_err256 == nil && err2 != nil {
				_write_err256 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err256 == nil && err2 != nil {
				_write_err256 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err256 == nil && err2 != nil {
				_write_err256 = thrift.WrapTException(err2)
			}
			if _write_err256 != nil {
				return false, thrift.WrapTException(_write_err256)
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "sql_query", thrift.REPLY, seqId); err2 != nil {
		_write_err256 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err256 == nil && err2 != nil {
		_write_err256 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err256 == nil && err2 != nil {
		_write_err256 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err256 == nil && err2 != nil {
		_write_err256 = thrift.WrapTException(err2)
	}
	if _write_err256 != nil {
		return false, thrift.WrapTException(_write_err256)
	}
	return true, err
}

type _ServiceProcessor_sql_update struct {
	handler _Service
}

func (p *_ServiceProcessor_sql_update) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err258 error
	args := _Service_sql_update_args{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "sql_update", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := _Service_sql_update_result{}
	if err2 := p.handler._sql_update(ctx, args._sql, args._updater_id); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *_Exception:
			result._e = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err2)
			}
			if errors.Is(err2, context.Canceled) {
				if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
					return false, thrift.WrapTException(err)
				}
			}
			_exc259 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sql_update: " + err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "sql_update", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err258 = thrift.WrapTException(err2)
			}
			if err2 := _exc259.Write(ctx, oprot); _write_err258 == nil && err2 != nil {
				_write_err258 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err258 == nil && err2 != nil {
				_write_err258 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err258 == nil && err2 != nil {
				_write_err258 = thrift.WrapTException(err2)
			}
			if _write_err258 != nil {
				return false, thrift.WrapTException(_write_err258)
			}
			return true, err
		}
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "sql_update", thrift.REPLY, seqId); err2 != nil {
		_write_err258 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err258 == nil && err2 != nil {
		_write_err258 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err258 == nil && err2 != nil {
		_write_err258 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err258 == nil && err2 != nil {
		_write_err258 = thrift.WrapTException(err2)
	}
	if _write_err258 != nil {
		return false, thrift.WrapTException(_write_err258)
	}
	return true, err
}

type _ServiceProcessor_exec_sql struct {
	handler _Service
}

func (p *_ServiceProcessor_exec_sql) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err260 error
	args := _Service_exec_sql_args{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "exec_sql", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := _Service_exec_sql_result{}
	if retval, err2 := p.handler._exec_sql(ctx, args._sql); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *_Exception:
			result._e = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err2)
			}
			if errors.Is(err2, context.Canceled) {
				if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
					return false, thrift.WrapTException(err)
				}
			}
			_exc261 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing exec_sql: " + err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "exec_sql", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err260 = thrift.WrapTException(err2)
			}
			if err2 := _exc261.Write(ctx, oprot); _write_err260 == nil && err2 != nil {
				_write_err260 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err260 == nil && err2 != nil {
				_write_err260 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err260 == nil && err2 != nil {
				_write_err260 = thrift.WrapTException(err2)
			}
			if _write_err260 != nil {
				return false, thrift.WrapTException(_write_err260)
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "exec_sql", thrift.REPLY, seqId); err2 != nil {
		_write_err260 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err260 == nil && err2 != nil {
		_write_err260 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err260 == nil && err2 != nil {
		_write_err260 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err260 == nil && err2 != nil {
		_write_err260 = thrift.WrapTException(err2)
	}
	if _write_err260 != nil {
		return false, thrift.WrapTException(_write_err260)
	}
	return true, err
}

type _ServiceProcessor_updater_create struct {
	handler _Service
}

func (p *_ServiceProcessor_updater_create) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err262 error
	args := _Service_updater_create_args{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "updater_create", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := _Service_updater_create_result{}
	if retval, err2 := p.handler._updater_create(ctx, args._buffer_size); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *_Exception:
			result._e = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err2)
			}
			if errors.Is(err2, context.Canceled) {
				if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
					return false, thrift.WrapTException(err)
				}
			}
			_exc263 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updater_create: " + err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "updater_create", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err262 = thrift.WrapTException(err2)
			}
			if err2 := _exc263.Write(ctx, oprot); _write_err262 == nil && err2 != nil {
				_write_err262 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err262 == nil && err2 != nil {
				_write_err262 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err262 == nil && err2 != nil {
				_write_err262 = thrift.WrapTException(err2)
			}
			if _write_err262 != nil {
				return false, thrift.WrapTException(_write_err262)
			}
			return true, err
		}
	} else {
		result.Success = &retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "updater_create", thrift.REPLY, seqId); err2 != nil {
		_write_err262 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err262 == nil && err2 != nil {
		_write_err262 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err262 == nil && err2 != nil {
		_write_err262 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err262 == nil && err2 != nil {
		_write_err262 = thrift.WrapTException(err2)
	}
	if _write_err262 != nil {
		return false, thrift.WrapTException(_write_err262)
	}
	return true, err
}

type _ServiceProcessor_updater_close struct {
	handler _Service
}

func (p *_ServiceProcessor_updater_close) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err264 error
	args := _Service_updater_close_args{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "updater_close", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := _Service_updater_close_result{}
	if err2 := p.handler._updater_close(ctx, args._id); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *_Exception:
			result._e = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err2)
			}
			if errors.Is(err2, context.Canceled) {
				if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
					return false, thrift.WrapTException(err)
				}
			}
			_exc265 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updater_close: " + err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "updater_close", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err264 = thrift.WrapTException(err2)
			}
			if err2 := _exc265.Write(ctx, oprot); _write_err264 == nil && err2 != nil {
				_write_err264 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err264 == nil && err2 != nil {
				_write_err264 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err264 == nil && err2 != nil {
				_write_err264 = thrift.WrapTException(err2)
			}
			if _write_err264 != nil {
				return false, thrift.WrapTException(_write_err264)
			}
			return true, err
		}
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "updater_close", thrift.REPLY, seqId); err2 != nil {
		_write_err264 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err264 == nil && err2 != nil {
		_write_err264 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err264 == nil && err2 != nil {
		_write_err264 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err264 == nil && err2 != nil {
		_write_err264 = thrift.WrapTException(err2)
	}
	if _write_err264 != nil {
		return false, thrift.WrapTException(_write_err264)
	}
	return true, err
}

type _ServiceProcessor_update_plain struct {
	handler _Service
}

func (p *_ServiceProcessor_update_plain) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err266 error
	args := _Service_update_plain_args{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "update_plain", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := _Service_update_plain_result{}
	if err2 := p.handler._update_plain(ctx, args._cells, args._updater_id); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *_Exception:
			result._e = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err2)
			}
			if errors.Is(err2, context.Canceled) {
				if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
					return false, thrift.WrapTException(err)
				}
			}
			_exc267 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing update_plain: " + err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "update_plain", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err266 = thrift.WrapTException(err2)
			}
			if err2 := _exc267.Write(ctx, oprot); _write_err266 == nil && err2 != nil {
				_write_err266 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err266 == nil && err2 != nil {
				_write_err266 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err266 == nil && err2 != nil {
				_write_err266 = thrift.WrapTException(err2)
			}
			if _write_err266 != nil {
				return false, thrift.WrapTException(_write_err266)
			}
			return true, err
		}
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "update_plain", thrift.REPLY, seqId); err2 != nil {
		_write_err266 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err266 == nil && err2 != nil {
		_write_err266 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err266 == nil && err2 != nil {
		_write_err266 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err266 == nil && err2 != nil {
		_write_err266 = thrift.WrapTException(err2)
	}
	if _write_err266 != nil {
		return false, thrift.WrapTException(_write_err266)
	}
	return true, err
}

type _ServiceProcessor_update_counter struct {
	handler _Service
}

func (p *_ServiceProcessor_update_counter) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err268 error
	args := _Service_update_counter_args{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "update_counter", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := _Service_update_counter_result{}
	if err2 := p.handler._update_counter(ctx, args._cells, args._updater_id); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *_Exception:
			result._e = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err2)
			}
			if errors.Is(err2, context.Canceled) {
				if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
					return false, thrift.WrapTException(err)
				}
			}
			_exc269 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing update_counter: " + err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "update_counter", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err268 = thrift.WrapTException(err2)
			}
			if err2 := _exc269.Write(ctx, oprot); _write_err268 == nil && err2 != nil {
				_write_err268 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err268 == nil && err2 != nil {
				_write_err268 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err268 == nil && err2 != nil {
				_write_err268 = thrift.WrapTException(err2)
			}
			if _write_err268 != nil {
				return false, thrift.WrapTException(_write_err268)
			}
			return true, err
		}
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "update_counter", thrift.REPLY, seqId); err2 != nil {
		_write_err268 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err268 == nil && err2 != nil {
		_write_err268 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err268 == nil && err2 != nil {
		_write_err268 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err268 == nil && err2 != nil {
		_write_err268 = thrift.WrapTException(err2)
	}
	if _write_err268 != nil {
		return false, thrift.WrapTException(_write_err268)
	}
	return true, err
}

type _ServiceProcessor_update_serial struct {
	handler _Service
}

func (p *_ServiceProcessor_update_serial) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err270 error
	args := _Service_update_serial_args{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "update_serial", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := _Service_update_serial_result{}
	if err2 := p.handler._update_serial(ctx, args._cells, args._updater_id); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *_Exception:
			result._e = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err2)
			}
			if errors.Is(err2, context.Canceled) {
				if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
					return false, thrift.WrapTException(err)
				}
			}
			_exc271 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing update_serial: " + err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "update_serial", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err270 = thrift.WrapTException(err2)
			}
			if err2 := _exc271.Write(ctx, oprot); _write_err270 == nil && err2 != nil {
				_write_err270 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err270 == nil && err2 != nil {
				_write_err270 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err270 == nil && err2 != nil {
				_write_err270 = thrift.WrapTException(err2)
			}
			if _write_err270 != nil {
				return false, thrift.WrapTException(_write_err270)
			}
			return true, err
		}
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "update_serial", thrift.REPLY, seqId); err2 != nil {
		_write_err270 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err270 == nil && err2 != nil {
		_write_err270 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err270 == nil && err2 != nil {
		_write_err270 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err270 == nil && err2 != nil {
		_write_err270 = thrift.WrapTException(err2)
	}
	if _write_err270 != nil {
		return false, thrift.WrapTException(_write_err270)
	}
	return true, err
}

type _ServiceProcessor_update_by_types struct {
	handler _Service
}

func (p *_ServiceProcessor_update_by_types) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err272 error
	args := _Service_update_by_types_args{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "update_by_types", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := _Service_update_by_types_result{}
	if err2 := p.handler._update_by_types(ctx, args._plain, args._counter, args._serial, args._updater_id); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *_Exception:
			result._e = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err2)
			}
			if errors.Is(err2, context.Canceled) {
				if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
					return false, thrift.WrapTException(err)
				}
			}
			_exc273 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing update_by_types: " + err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "update_by_types", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err272 = thrift.WrapTException(err2)
			}
			if err2 := _exc273.Write(ctx, oprot); _write_err272 == nil && err2 != nil {
				_write_err272 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err272 == nil && err2 != nil {
				_write_err272 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err272 == nil && err2 != nil {
				_write_err272 = thrift.WrapTException(err2)
			}
			if _write_err272 != nil {
				return false, thrift.WrapTException(_write_err272)
			}
			return true, err
		}
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "update_by_types", thrift.REPLY, seqId); err2 != nil {
		_write_err272 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err272 == nil && err2 != nil {
		_write_err272 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err272 == nil && err2 != nil {
		_write_err272 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err272 == nil && err2 != nil {
		_write_err272 = thrift.WrapTException(err2)
	}
	if _write_err272 != nil {
		return false, thrift.WrapTException(_write_err272)
	}
	return true, err
}

type _ServiceProcessor_mng_column struct {
	handler _Service
}

func (p *_ServiceProcessor_mng_column) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err274 error
	args := _Service_mng_column_args{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "mng_column", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := _Service_mng_column_result{}
	if err2 := p.handler._mng_column(ctx, args._func, args._schema); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *_Exception:
			result._e = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err2)
			}
			if errors.Is(err2, context.Canceled) {
				if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
					return false, thrift.WrapTException(err)
				}
			}
			_exc275 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mng_column: " + err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "mng_column", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err274 = thrift.WrapTException(err2)
			}
			if err2 := _exc275.Write(ctx, oprot); _write_err274 == nil && err2 != nil {
				_write_err274 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err274 == nil && err2 != nil {
				_write_err274 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err274 == nil && err2 != nil {
				_write_err274 = thrift.WrapTException(err2)
			}
			if _write_err274 != nil {
				return false, thrift.WrapTException(_write_err274)
			}
			return true, err
		}
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "mng_column", thrift.REPLY, seqId); err2 != nil {
		_write_err274 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err274 == nil && err2 != nil {
		_write_err274 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err274 == nil && err2 != nil {
		_write_err274 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err274 == nil && err2 != nil {
		_write_err274 = thrift.WrapTException(err2)
	}
	if _write_err274 != nil {
		return false, thrift.WrapTException(_write_err274)
	}
	return true, err
}

type _ServiceProcessor_list_columns struct {
	handler _Service
}

func (p *_ServiceProcessor_list_columns) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err276 error
	args := _Service_list_columns_args{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "list_columns", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := _Service_list_columns_result{}
	if retval, err2 := p.handler._list_columns(ctx, args._spec); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *_Exception:
			result._e = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err2)
			}
			if errors.Is(err2, context.Canceled) {
				if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
					return false, thrift.WrapTException(err)
				}
			}
			_exc277 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_columns: " + err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "list_columns", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err276 = thrift.WrapTException(err2)
			}
			if err2 := _exc277.Write(ctx, oprot); _write_err276 == nil && err2 != nil {
				_write_err276 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err276 == nil && err2 != nil {
				_write_err276 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err276 == nil && err2 != nil {
				_write_err276 = thrift.WrapTException(err2)
			}
			if _write_err276 != nil {
				return false, thrift.WrapTException(_write_err276)
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "list_columns", thrift.REPLY, seqId); err2 != nil {
		_write_err276 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err276 == nil && err2 != nil {
		_write_err276 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err276 == nil && err2 != nil {
		_write_err276 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err276 == nil && err2 != nil {
		_write_err276 = thrift.WrapTException(err2)
	}
	if _write_err276 != nil {
		return false, thrift.WrapTException(_write_err276)
	}
	return true, err
}

type _ServiceProcessor_compact_columns struct {
	handler _Service
}

func (p *_ServiceProcessor_compact_columns) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err278 error
	args := _Service_compact_columns_args{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "compact_columns", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := _Service_compact_columns_result{}
	if retval, err2 := p.handler._compact_columns(ctx, args._spec); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *_Exception:
			result._e = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err2)
			}
			if errors.Is(err2, context.Canceled) {
				if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
					return false, thrift.WrapTException(err)
				}
			}
			_exc279 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing compact_columns: " + err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "compact_columns", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err278 = thrift.WrapTException(err2)
			}
			if err2 := _exc279.Write(ctx, oprot); _write_err278 == nil && err2 != nil {
				_write_err278 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err278 == nil && err2 != nil {
				_write_err278 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err278 == nil && err2 != nil {
				_write_err278 = thrift.WrapTException(err2)
			}
			if _write_err278 != nil {
				return false, thrift.WrapTException(_write_err278)
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "compact_columns", thrift.REPLY, seqId); err2 != nil {
		_write_err278 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err278 == nil && err2 != nil {
		_write_err278 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err278 == nil && err2 != nil {
		_write_err278 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err278 == nil && err2 != nil {
		_write_err278 = thrift.WrapTException(err2)
	}
	if _write_err278 != nil {
		return false, thrift.WrapTException(_write_err278)
	}
	return true, err
}

type _ServiceProcessor_scan struct {
	handler _Service
}

func (p *_ServiceProcessor_scan) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err280 error
	args := _Service_scan_args{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "scan", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := _Service_scan_result{}
	if retval, err2 := p.handler._scan(ctx, args._spec); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *_Exception:
			result._e = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err2)
			}
			if errors.Is(err2, context.Canceled) {
				if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
					return false, thrift.WrapTException(err)
				}
			}
			_exc281 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scan: " + err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "scan", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err280 = thrift.WrapTException(err2)
			}
			if err2 := _exc281.Write(ctx, oprot); _write_err280 == nil && err2 != nil {
				_write_err280 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err280 == nil && err2 != nil {
				_write_err280 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err280 == nil && err2 != nil {
				_write_err280 = thrift.WrapTException(err2)
			}
			if _write_err280 != nil {
				return false, thrift.WrapTException(_write_err280)
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "scan", thrift.REPLY, seqId); err2 != nil {
		_write_err280 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err280 == nil && err2 != nil {
		_write_err280 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err280 == nil && err2 != nil {
		_write_err280 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err280 == nil && err2 != nil {
		_write_err280 = thrift.WrapTException(err2)
	}
	if _write_err280 != nil {
		return false, thrift.WrapTException(_write_err280)
	}
	return true, err
}

type _ServiceProcessor_scan_rslt_on_column struct {
	handler _Service
}

func (p *_ServiceProcessor_scan_rslt_on_column) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err282 error
	args := _Service_scan_rslt_on_column_args{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "scan_rslt_on_column", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := _Service_scan_rslt_on_column_result{}
	if retval, err2 := p.handler._scan_rslt_on_column(ctx, args._spec); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *_Exception:
			result._e = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err2)
			}
			if errors.Is(err2, context.Canceled) {
				if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
					return false, thrift.WrapTException(err)
				}
			}
			_exc283 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scan_rslt_on_column: " + err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "scan_rslt_on_column", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err282 = thrift.WrapTException(err2)
			}
			if err2 := _exc283.Write(ctx, oprot); _write_err282 == nil && err2 != nil {
				_write_err282 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err282 == nil && err2 != nil {
				_write_err282 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err282 == nil && err2 != nil {
				_write_err282 = thrift.WrapTException(err2)
			}
			if _write_err282 != nil {
				return false, thrift.WrapTException(_write_err282)
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "scan_rslt_on_column", thrift.REPLY, seqId); err2 != nil {
		_write_err282 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err282 == nil && err2 != nil {
		_write_err282 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err282 == nil && err2 != nil {
		_write_err282 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err282 == nil && err2 != nil {
		_write_err282 = thrift.WrapTException(err2)
	}
	if _write_err282 != nil {
		return false, thrift.WrapTException(_write_err282)
	}
	return true, err
}

type _ServiceProcessor_scan_rslt_on_key struct {
	handler _Service
}

func (p *_ServiceProcessor_scan_rslt_on_key) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err284 error
	args := _Service_scan_rslt_on_key_args{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "scan_rslt_on_key", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := _Service_scan_rslt_on_key_result{}
	if retval, err2 := p.handler._scan_rslt_on_key(ctx, args._spec); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *_Exception:
			result._e = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err2)
			}
			if errors.Is(err2, context.Canceled) {
				if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
					return false, thrift.WrapTException(err)
				}
			}
			_exc285 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scan_rslt_on_key: " + err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "scan_rslt_on_key", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err284 = thrift.WrapTException(err2)
			}
			if err2 := _exc285.Write(ctx, oprot); _write_err284 == nil && err2 != nil {
				_write_err284 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err284 == nil && err2 != nil {
				_write_err284 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err284 == nil && err2 != nil {
				_write_err284 = thrift.WrapTException(err2)
			}
			if _write_err284 != nil {
				return false, thrift.WrapTException(_write_err284)
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "scan_rslt_on_key", thrift.REPLY, seqId); err2 != nil {
		_write_err284 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err284 == nil && err2 != nil {
		_write_err284 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err284 == nil && err2 != nil {
		_write_err284 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err284 == nil && err2 != nil {
		_write_err284 = thrift.WrapTException(err2)
	}
	if _write_err284 != nil {
		return false, thrift.WrapTException(_write_err284)
	}
	return true, err
}

type _ServiceProcessor_scan_rslt_on_fraction struct {
	handler _Service
}

func (p *_ServiceProcessor_scan_rslt_on_fraction) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err286 error
	args := _Service_scan_rslt_on_fraction_args{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "scan_rslt_on_fraction", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := _Service_scan_rslt_on_fraction_result{}
	if retval, err2 := p.handler._scan_rslt_on_fraction(ctx, args._spec); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *_Exception:
			result._e = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err2)
			}
			if errors.Is(err2, context.Canceled) {
				if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
					return false, thrift.WrapTException(err)
				}
			}
			_exc287 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scan_rslt_on_fraction: " + err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "scan_rslt_on_fraction", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err286 = thrift.WrapTException(err2)
			}
			if err2 := _exc287.Write(ctx, oprot); _write_err286 == nil && err2 != nil {
				_write_err286 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err286 == nil && err2 != nil {
				_write_err286 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err286 == nil && err2 != nil {
				_write_err286 = thrift.WrapTException(err2)
			}
			if _write_err286 != nil {
				return false, thrift.WrapTException(_write_err286)
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "scan_rslt_on_fraction", thrift.REPLY, seqId); err2 != nil {
		_write_err286 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err286 == nil && err2 != nil {
		_write_err286 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err286 == nil && err2 != nil {
		_write_err286 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err286 == nil && err2 != nil {
		_write_err286 = thrift.WrapTException(err2)
	}
	if _write_err286 != nil {
		return false, thrift.WrapTException(_write_err286)
	}
	return true, err
}

type _ServiceProcessor_scan_rslt_on struct {
	handler _Service
}

func (p *_ServiceProcessor_scan_rslt_on) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err288 error
	args := _Service_scan_rslt_on_args{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "scan_rslt_on", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := _Service_scan_rslt_on_result{}
	if retval, err2 := p.handler._scan_rslt_on(ctx, args._spec, args._rslt); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *_Exception:
			result._e = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err2)
			}
			if errors.Is(err2, context.Canceled) {
				if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
					return false, thrift.WrapTException(err)
				}
			}
			_exc289 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scan_rslt_on: " + err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "scan_rslt_on", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err288 = thrift.WrapTException(err2)
			}
			if err2 := _exc289.Write(ctx, oprot); _write_err288 == nil && err2 != nil {
				_write_err288 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err288 == nil && err2 != nil {
				_write_err288 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err288 == nil && err2 != nil {
				_write_err288 = thrift.WrapTException(err2)
			}
			if _write_err288 != nil {
				return false, thrift.WrapTException(_write_err288)
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "scan_rslt_on", thrift.REPLY, seqId); err2 != nil {
		_write_err288 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err288 == nil && err2 != nil {
		_write_err288 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err288 == nil && err2 != nil {
		_write_err288 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err288 == nil && err2 != nil {
		_write_err288 = thrift.WrapTException(err2)
	}
	if _write_err288 != nil {
		return false, thrift.WrapTException(_write_err288)
	}
	return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - _sql: The SQL string to Execute
// 
type _Service_sql_mng_column_args struct {
	_sql string `thrift:"sql,1" db:"sql" json:"sql"`
}

func New_Service_sql_mng_column_args() *_Service_sql_mng_column_args {
	return &_Service_sql_mng_column_args{}
}



func (p *_Service_sql_mng_column_args) Get_sql() string {
	return p._sql
}

func (p *_Service_sql_mng_column_args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_sql_mng_column_args) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._sql = v
	}
	return nil
}

func (p *_Service_sql_mng_column_args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sql_mng_column_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_sql_mng_column_args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "sql", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sql: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p._sql)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sql (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sql: ", p), err)
	}
	return err
}

func (p *_Service_sql_mng_column_args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_sql_mng_column_args(%+v)", *p)
}

func (p *_Service_sql_mng_column_args) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_sql_mng_column_args",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_sql_mng_column_args)(nil)

// Attributes:
//  - _e
// 
type _Service_sql_mng_column_result struct {
	_e *_Exception `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func New_Service_sql_mng_column_result() *_Service_sql_mng_column_result {
	return &_Service_sql_mng_column_result{}
}

var _Service_sql_mng_column_result__e_DEFAULT *_Exception

func (p *_Service_sql_mng_column_result) Get_e() *_Exception {
	if !p.IsSet_e() {
		return _Service_sql_mng_column_result__e_DEFAULT
	}
	return p._e
}

func (p *_Service_sql_mng_column_result) IsSet_e() bool {
	return p._e != nil
}

func (p *_Service_sql_mng_column_result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_sql_mng_column_result) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._e = &_Exception{}
	if err := p._e.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._e), err)
	}
	return nil
}

func (p *_Service_sql_mng_column_result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sql_mng_column_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_sql_mng_column_result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_e() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p._e.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._e), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *_Service_sql_mng_column_result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_sql_mng_column_result(%+v)", *p)
}

func (p *_Service_sql_mng_column_result) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_sql_mng_column_result",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_sql_mng_column_result)(nil)

// Attributes:
//  - _sql: The SQL string to Execute
// 
type _Service_sql_list_columns_args struct {
	_sql string `thrift:"sql,1" db:"sql" json:"sql"`
}

func New_Service_sql_list_columns_args() *_Service_sql_list_columns_args {
	return &_Service_sql_list_columns_args{}
}



func (p *_Service_sql_list_columns_args) Get_sql() string {
	return p._sql
}

func (p *_Service_sql_list_columns_args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_sql_list_columns_args) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._sql = v
	}
	return nil
}

func (p *_Service_sql_list_columns_args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sql_list_columns_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_sql_list_columns_args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "sql", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sql: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p._sql)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sql (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sql: ", p), err)
	}
	return err
}

func (p *_Service_sql_list_columns_args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_sql_list_columns_args(%+v)", *p)
}

func (p *_Service_sql_list_columns_args) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_sql_list_columns_args",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_sql_list_columns_args)(nil)

// Attributes:
//  - _success
//  - _e
// 
type _Service_sql_list_columns_result struct {
	_success _Schemas `thrift:"success,0" db:"success" json:"success,omitempty"`
	_e *_Exception `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func New_Service_sql_list_columns_result() *_Service_sql_list_columns_result {
	return &_Service_sql_list_columns_result{}
}

var _Service_sql_list_columns_result__success_DEFAULT _Schemas


func (p *_Service_sql_list_columns_result) Get_success() _Schemas {
	return p._success
}

var _Service_sql_list_columns_result__e_DEFAULT *_Exception

func (p *_Service_sql_list_columns_result) Get_e() *_Exception {
	if !p.IsSet_e() {
		return _Service_sql_list_columns_result__e_DEFAULT
	}
	return p._e
}

func (p *_Service_sql_list_columns_result) IsSet_success() bool {
	return p._success != nil
}

func (p *_Service_sql_list_columns_result) IsSet_e() bool {
	return p._e != nil
}

func (p *_Service_sql_list_columns_result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_sql_list_columns_result) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_Schemas, 0, size)
	p._success = tSlice
	for i := 0; i < size; i++ {
		__elem290 := &_Schema{}
		if err := __elem290.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem290), err)
		}
		p._success = append(p._success, _elem290)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_Service_sql_list_columns_result) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._e = &_Exception{}
	if err := p._e.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._e), err)
	}
	return nil
}

func (p *_Service_sql_list_columns_result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sql_list_columns_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_sql_list_columns_result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_success() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p._success {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *_Service_sql_list_columns_result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_e() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p._e.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._e), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *_Service_sql_list_columns_result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_sql_list_columns_result(%+v)", *p)
}

func (p *_Service_sql_list_columns_result) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_sql_list_columns_result",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_sql_list_columns_result)(nil)

// Attributes:
//  - _sql: The SQL string to Execute
// 
type _Service_sql_compact_columns_args struct {
	_sql string `thrift:"sql,1" db:"sql" json:"sql"`
}

func New_Service_sql_compact_columns_args() *_Service_sql_compact_columns_args {
	return &_Service_sql_compact_columns_args{}
}



func (p *_Service_sql_compact_columns_args) Get_sql() string {
	return p._sql
}

func (p *_Service_sql_compact_columns_args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_sql_compact_columns_args) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._sql = v
	}
	return nil
}

func (p *_Service_sql_compact_columns_args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sql_compact_columns_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_sql_compact_columns_args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "sql", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sql: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p._sql)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sql (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sql: ", p), err)
	}
	return err
}

func (p *_Service_sql_compact_columns_args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_sql_compact_columns_args(%+v)", *p)
}

func (p *_Service_sql_compact_columns_args) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_sql_compact_columns_args",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_sql_compact_columns_args)(nil)

// Attributes:
//  - _success
//  - _e
// 
type _Service_sql_compact_columns_result struct {
	_success _CompactResults `thrift:"success,0" db:"success" json:"success,omitempty"`
	_e *_Exception `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func New_Service_sql_compact_columns_result() *_Service_sql_compact_columns_result {
	return &_Service_sql_compact_columns_result{}
}

var _Service_sql_compact_columns_result__success_DEFAULT _CompactResults


func (p *_Service_sql_compact_columns_result) Get_success() _CompactResults {
	return p._success
}

var _Service_sql_compact_columns_result__e_DEFAULT *_Exception

func (p *_Service_sql_compact_columns_result) Get_e() *_Exception {
	if !p.IsSet_e() {
		return _Service_sql_compact_columns_result__e_DEFAULT
	}
	return p._e
}

func (p *_Service_sql_compact_columns_result) IsSet_success() bool {
	return p._success != nil
}

func (p *_Service_sql_compact_columns_result) IsSet_e() bool {
	return p._e != nil
}

func (p *_Service_sql_compact_columns_result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_sql_compact_columns_result) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_CompactResults, 0, size)
	p._success = tSlice
	for i := 0; i < size; i++ {
		__elem291 := &_CompactResult_{}
		if err := __elem291.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem291), err)
		}
		p._success = append(p._success, _elem291)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_Service_sql_compact_columns_result) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._e = &_Exception{}
	if err := p._e.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._e), err)
	}
	return nil
}

func (p *_Service_sql_compact_columns_result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sql_compact_columns_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_sql_compact_columns_result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_success() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p._success {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *_Service_sql_compact_columns_result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_e() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p._e.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._e), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *_Service_sql_compact_columns_result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_sql_compact_columns_result(%+v)", *p)
}

func (p *_Service_sql_compact_columns_result) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_sql_compact_columns_result",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_sql_compact_columns_result)(nil)

// Attributes:
//  - _sql: The SQL string to Execute
// 
type _Service_sql_select_plain_args struct {
	_sql string `thrift:"sql,1" db:"sql" json:"sql"`
}

func New_Service_sql_select_plain_args() *_Service_sql_select_plain_args {
	return &_Service_sql_select_plain_args{}
}



func (p *_Service_sql_select_plain_args) Get_sql() string {
	return p._sql
}

func (p *_Service_sql_select_plain_args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_sql_select_plain_args) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._sql = v
	}
	return nil
}

func (p *_Service_sql_select_plain_args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sql_select_plain_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_sql_select_plain_args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "sql", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sql: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p._sql)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sql (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sql: ", p), err)
	}
	return err
}

func (p *_Service_sql_select_plain_args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_sql_select_plain_args(%+v)", *p)
}

func (p *_Service_sql_select_plain_args) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_sql_select_plain_args",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_sql_select_plain_args)(nil)

// Attributes:
//  - _success
//  - _e
// 
type _Service_sql_select_plain_result struct {
	_success _CellsPlain `thrift:"success,0" db:"success" json:"success,omitempty"`
	_e *_Exception `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func New_Service_sql_select_plain_result() *_Service_sql_select_plain_result {
	return &_Service_sql_select_plain_result{}
}

var _Service_sql_select_plain_result__success_DEFAULT _CellsPlain


func (p *_Service_sql_select_plain_result) Get_success() _CellsPlain {
	return p._success
}

var _Service_sql_select_plain_result__e_DEFAULT *_Exception

func (p *_Service_sql_select_plain_result) Get_e() *_Exception {
	if !p.IsSet_e() {
		return _Service_sql_select_plain_result__e_DEFAULT
	}
	return p._e
}

func (p *_Service_sql_select_plain_result) IsSet_success() bool {
	return p._success != nil
}

func (p *_Service_sql_select_plain_result) IsSet_e() bool {
	return p._e != nil
}

func (p *_Service_sql_select_plain_result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_sql_select_plain_result) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_CellsPlain, 0, size)
	p._success = tSlice
	for i := 0; i < size; i++ {
		__elem292 := &_CellPlain{}
		if err := __elem292.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem292), err)
		}
		p._success = append(p._success, _elem292)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_Service_sql_select_plain_result) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._e = &_Exception{}
	if err := p._e.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._e), err)
	}
	return nil
}

func (p *_Service_sql_select_plain_result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sql_select_plain_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_sql_select_plain_result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_success() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p._success {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *_Service_sql_select_plain_result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_e() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p._e.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._e), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *_Service_sql_select_plain_result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_sql_select_plain_result(%+v)", *p)
}

func (p *_Service_sql_select_plain_result) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_sql_select_plain_result",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_sql_select_plain_result)(nil)

// Attributes:
//  - _sql: The SQL string to Execute
// 
type _Service_sql_select_counter_args struct {
	_sql string `thrift:"sql,1" db:"sql" json:"sql"`
}

func New_Service_sql_select_counter_args() *_Service_sql_select_counter_args {
	return &_Service_sql_select_counter_args{}
}



func (p *_Service_sql_select_counter_args) Get_sql() string {
	return p._sql
}

func (p *_Service_sql_select_counter_args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_sql_select_counter_args) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._sql = v
	}
	return nil
}

func (p *_Service_sql_select_counter_args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sql_select_counter_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_sql_select_counter_args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "sql", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sql: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p._sql)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sql (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sql: ", p), err)
	}
	return err
}

func (p *_Service_sql_select_counter_args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_sql_select_counter_args(%+v)", *p)
}

func (p *_Service_sql_select_counter_args) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_sql_select_counter_args",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_sql_select_counter_args)(nil)

// Attributes:
//  - _success
//  - _e
// 
type _Service_sql_select_counter_result struct {
	_success _CellsCounter `thrift:"success,0" db:"success" json:"success,omitempty"`
	_e *_Exception `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func New_Service_sql_select_counter_result() *_Service_sql_select_counter_result {
	return &_Service_sql_select_counter_result{}
}

var _Service_sql_select_counter_result__success_DEFAULT _CellsCounter


func (p *_Service_sql_select_counter_result) Get_success() _CellsCounter {
	return p._success
}

var _Service_sql_select_counter_result__e_DEFAULT *_Exception

func (p *_Service_sql_select_counter_result) Get_e() *_Exception {
	if !p.IsSet_e() {
		return _Service_sql_select_counter_result__e_DEFAULT
	}
	return p._e
}

func (p *_Service_sql_select_counter_result) IsSet_success() bool {
	return p._success != nil
}

func (p *_Service_sql_select_counter_result) IsSet_e() bool {
	return p._e != nil
}

func (p *_Service_sql_select_counter_result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_sql_select_counter_result) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_CellsCounter, 0, size)
	p._success = tSlice
	for i := 0; i < size; i++ {
		__elem293 := &_CellCounter{}
		if err := __elem293.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem293), err)
		}
		p._success = append(p._success, _elem293)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_Service_sql_select_counter_result) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._e = &_Exception{}
	if err := p._e.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._e), err)
	}
	return nil
}

func (p *_Service_sql_select_counter_result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sql_select_counter_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_sql_select_counter_result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_success() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p._success {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *_Service_sql_select_counter_result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_e() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p._e.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._e), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *_Service_sql_select_counter_result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_sql_select_counter_result(%+v)", *p)
}

func (p *_Service_sql_select_counter_result) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_sql_select_counter_result",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_sql_select_counter_result)(nil)

// Attributes:
//  - _sql: The SQL string to Execute
// 
type _Service_sql_select_serial_args struct {
	_sql string `thrift:"sql,1" db:"sql" json:"sql"`
}

func New_Service_sql_select_serial_args() *_Service_sql_select_serial_args {
	return &_Service_sql_select_serial_args{}
}



func (p *_Service_sql_select_serial_args) Get_sql() string {
	return p._sql
}

func (p *_Service_sql_select_serial_args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_sql_select_serial_args) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._sql = v
	}
	return nil
}

func (p *_Service_sql_select_serial_args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sql_select_serial_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_sql_select_serial_args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "sql", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sql: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p._sql)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sql (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sql: ", p), err)
	}
	return err
}

func (p *_Service_sql_select_serial_args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_sql_select_serial_args(%+v)", *p)
}

func (p *_Service_sql_select_serial_args) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_sql_select_serial_args",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_sql_select_serial_args)(nil)

// Attributes:
//  - _success
//  - _e
// 
type _Service_sql_select_serial_result struct {
	_success _CellsSerial `thrift:"success,0" db:"success" json:"success,omitempty"`
	_e *_Exception `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func New_Service_sql_select_serial_result() *_Service_sql_select_serial_result {
	return &_Service_sql_select_serial_result{}
}

var _Service_sql_select_serial_result__success_DEFAULT _CellsSerial


func (p *_Service_sql_select_serial_result) Get_success() _CellsSerial {
	return p._success
}

var _Service_sql_select_serial_result__e_DEFAULT *_Exception

func (p *_Service_sql_select_serial_result) Get_e() *_Exception {
	if !p.IsSet_e() {
		return _Service_sql_select_serial_result__e_DEFAULT
	}
	return p._e
}

func (p *_Service_sql_select_serial_result) IsSet_success() bool {
	return p._success != nil
}

func (p *_Service_sql_select_serial_result) IsSet_e() bool {
	return p._e != nil
}

func (p *_Service_sql_select_serial_result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_sql_select_serial_result) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_CellsSerial, 0, size)
	p._success = tSlice
	for i := 0; i < size; i++ {
		__elem294 := &_CellSerial{}
		if err := __elem294.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem294), err)
		}
		p._success = append(p._success, _elem294)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_Service_sql_select_serial_result) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._e = &_Exception{}
	if err := p._e.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._e), err)
	}
	return nil
}

func (p *_Service_sql_select_serial_result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sql_select_serial_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_sql_select_serial_result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_success() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p._success {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *_Service_sql_select_serial_result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_e() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p._e.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._e), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *_Service_sql_select_serial_result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_sql_select_serial_result(%+v)", *p)
}

func (p *_Service_sql_select_serial_result) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_sql_select_serial_result",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_sql_select_serial_result)(nil)

// Attributes:
//  - _sql: The SQL string to Execute
// 
type _Service_sql_select_args struct {
	_sql string `thrift:"sql,1" db:"sql" json:"sql"`
}

func New_Service_sql_select_args() *_Service_sql_select_args {
	return &_Service_sql_select_args{}
}



func (p *_Service_sql_select_args) Get_sql() string {
	return p._sql
}

func (p *_Service_sql_select_args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_sql_select_args) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._sql = v
	}
	return nil
}

func (p *_Service_sql_select_args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sql_select_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_sql_select_args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "sql", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sql: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p._sql)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sql (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sql: ", p), err)
	}
	return err
}

func (p *_Service_sql_select_args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_sql_select_args(%+v)", *p)
}

func (p *_Service_sql_select_args) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_sql_select_args",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_sql_select_args)(nil)

// Attributes:
//  - _success
//  - _e
// 
type _Service_sql_select_result struct {
	_success *_Cells `thrift:"success,0" db:"success" json:"success,omitempty"`
	_e *_Exception `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func New_Service_sql_select_result() *_Service_sql_select_result {
	return &_Service_sql_select_result{}
}

var _Service_sql_select_result__success_DEFAULT *_Cells

func (p *_Service_sql_select_result) Get_success() *_Cells {
	if !p.IsSet_success() {
		return _Service_sql_select_result__success_DEFAULT
	}
	return p._success
}

var _Service_sql_select_result__e_DEFAULT *_Exception

func (p *_Service_sql_select_result) Get_e() *_Exception {
	if !p.IsSet_e() {
		return _Service_sql_select_result__e_DEFAULT
	}
	return p._e
}

func (p *_Service_sql_select_result) IsSet_success() bool {
	return p._success != nil
}

func (p *_Service_sql_select_result) IsSet_e() bool {
	return p._e != nil
}

func (p *_Service_sql_select_result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_sql_select_result) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p._success = &_Cells{}
	if err := p._success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._success), err)
	}
	return nil
}

func (p *_Service_sql_select_result) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._e = &_Exception{}
	if err := p._e.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._e), err)
	}
	return nil
}

func (p *_Service_sql_select_result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sql_select_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_sql_select_result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_success() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p._success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *_Service_sql_select_result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_e() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p._e.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._e), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *_Service_sql_select_result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_sql_select_result(%+v)", *p)
}

func (p *_Service_sql_select_result) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_sql_select_result",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_sql_select_result)(nil)

// Attributes:
//  - _sql: The SQL string to Execute
// 
type _Service_sql_select_rslt_on_column_args struct {
	_sql string `thrift:"sql,1" db:"sql" json:"sql"`
}

func New_Service_sql_select_rslt_on_column_args() *_Service_sql_select_rslt_on_column_args {
	return &_Service_sql_select_rslt_on_column_args{}
}



func (p *_Service_sql_select_rslt_on_column_args) Get_sql() string {
	return p._sql
}

func (p *_Service_sql_select_rslt_on_column_args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_sql_select_rslt_on_column_args) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._sql = v
	}
	return nil
}

func (p *_Service_sql_select_rslt_on_column_args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sql_select_rslt_on_column_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_sql_select_rslt_on_column_args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "sql", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sql: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p._sql)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sql (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sql: ", p), err)
	}
	return err
}

func (p *_Service_sql_select_rslt_on_column_args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_sql_select_rslt_on_column_args(%+v)", *p)
}

func (p *_Service_sql_select_rslt_on_column_args) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_sql_select_rslt_on_column_args",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_sql_select_rslt_on_column_args)(nil)

// Attributes:
//  - _success
//  - _e
// 
type _Service_sql_select_rslt_on_column_result struct {
	_success _CCells `thrift:"success,0" db:"success" json:"success,omitempty"`
	_e *_Exception `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func New_Service_sql_select_rslt_on_column_result() *_Service_sql_select_rslt_on_column_result {
	return &_Service_sql_select_rslt_on_column_result{}
}

var _Service_sql_select_rslt_on_column_result__success_DEFAULT _CCells


func (p *_Service_sql_select_rslt_on_column_result) Get_success() _CCells {
	return p._success
}

var _Service_sql_select_rslt_on_column_result__e_DEFAULT *_Exception

func (p *_Service_sql_select_rslt_on_column_result) Get_e() *_Exception {
	if !p.IsSet_e() {
		return _Service_sql_select_rslt_on_column_result__e_DEFAULT
	}
	return p._e
}

func (p *_Service_sql_select_rslt_on_column_result) IsSet_success() bool {
	return p._success != nil
}

func (p *_Service_sql_select_rslt_on_column_result) IsSet_e() bool {
	return p._e != nil
}

func (p *_Service_sql_select_rslt_on_column_result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_sql_select_rslt_on_column_result) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(_CCells, size)
	p._success = tMap
	for i := 0; i < size; i++ {
		var _key295 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__key295 = v
		}
		__val296 := &_cCells{}
		if err := __val296.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __val296), err)
		}
		p._success[_key295] = _val296
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *_Service_sql_select_rslt_on_column_result) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._e = &_Exception{}
	if err := p._e.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._e), err)
	}
	return nil
}

func (p *_Service_sql_select_rslt_on_column_result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sql_select_rslt_on_column_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_sql_select_rslt_on_column_result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_success() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p._success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p._success {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *_Service_sql_select_rslt_on_column_result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_e() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p._e.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._e), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *_Service_sql_select_rslt_on_column_result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_sql_select_rslt_on_column_result(%+v)", *p)
}

func (p *_Service_sql_select_rslt_on_column_result) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_sql_select_rslt_on_column_result",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_sql_select_rslt_on_column_result)(nil)

// Attributes:
//  - _sql: The SQL string to Execute
// 
type _Service_sql_select_rslt_on_key_args struct {
	_sql string `thrift:"sql,1" db:"sql" json:"sql"`
}

func New_Service_sql_select_rslt_on_key_args() *_Service_sql_select_rslt_on_key_args {
	return &_Service_sql_select_rslt_on_key_args{}
}



func (p *_Service_sql_select_rslt_on_key_args) Get_sql() string {
	return p._sql
}

func (p *_Service_sql_select_rslt_on_key_args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_sql_select_rslt_on_key_args) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._sql = v
	}
	return nil
}

func (p *_Service_sql_select_rslt_on_key_args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sql_select_rslt_on_key_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_sql_select_rslt_on_key_args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "sql", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sql: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p._sql)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sql (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sql: ", p), err)
	}
	return err
}

func (p *_Service_sql_select_rslt_on_key_args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_sql_select_rslt_on_key_args(%+v)", *p)
}

func (p *_Service_sql_select_rslt_on_key_args) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_sql_select_rslt_on_key_args",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_sql_select_rslt_on_key_args)(nil)

// Attributes:
//  - _success
//  - _e
// 
type _Service_sql_select_rslt_on_key_result struct {
	_success _KCells `thrift:"success,0" db:"success" json:"success,omitempty"`
	_e *_Exception `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func New_Service_sql_select_rslt_on_key_result() *_Service_sql_select_rslt_on_key_result {
	return &_Service_sql_select_rslt_on_key_result{}
}

var _Service_sql_select_rslt_on_key_result__success_DEFAULT _KCells


func (p *_Service_sql_select_rslt_on_key_result) Get_success() _KCells {
	return p._success
}

var _Service_sql_select_rslt_on_key_result__e_DEFAULT *_Exception

func (p *_Service_sql_select_rslt_on_key_result) Get_e() *_Exception {
	if !p.IsSet_e() {
		return _Service_sql_select_rslt_on_key_result__e_DEFAULT
	}
	return p._e
}

func (p *_Service_sql_select_rslt_on_key_result) IsSet_success() bool {
	return p._success != nil
}

func (p *_Service_sql_select_rslt_on_key_result) IsSet_e() bool {
	return p._e != nil
}

func (p *_Service_sql_select_rslt_on_key_result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_sql_select_rslt_on_key_result) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_KCells, 0, size)
	p._success = tSlice
	for i := 0; i < size; i++ {
		__elem297 := &_kCells{}
		if err := __elem297.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem297), err)
		}
		p._success = append(p._success, _elem297)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_Service_sql_select_rslt_on_key_result) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._e = &_Exception{}
	if err := p._e.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._e), err)
	}
	return nil
}

func (p *_Service_sql_select_rslt_on_key_result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sql_select_rslt_on_key_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_sql_select_rslt_on_key_result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_success() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p._success {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *_Service_sql_select_rslt_on_key_result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_e() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p._e.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._e), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *_Service_sql_select_rslt_on_key_result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_sql_select_rslt_on_key_result(%+v)", *p)
}

func (p *_Service_sql_select_rslt_on_key_result) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_sql_select_rslt_on_key_result",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_sql_select_rslt_on_key_result)(nil)

// Attributes:
//  - _sql: The SQL string to Execute
// 
type _Service_sql_select_rslt_on_fraction_args struct {
	_sql string `thrift:"sql,1" db:"sql" json:"sql"`
}

func New_Service_sql_select_rslt_on_fraction_args() *_Service_sql_select_rslt_on_fraction_args {
	return &_Service_sql_select_rslt_on_fraction_args{}
}



func (p *_Service_sql_select_rslt_on_fraction_args) Get_sql() string {
	return p._sql
}

func (p *_Service_sql_select_rslt_on_fraction_args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_sql_select_rslt_on_fraction_args) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._sql = v
	}
	return nil
}

func (p *_Service_sql_select_rslt_on_fraction_args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sql_select_rslt_on_fraction_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_sql_select_rslt_on_fraction_args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "sql", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sql: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p._sql)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sql (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sql: ", p), err)
	}
	return err
}

func (p *_Service_sql_select_rslt_on_fraction_args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_sql_select_rslt_on_fraction_args(%+v)", *p)
}

func (p *_Service_sql_select_rslt_on_fraction_args) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_sql_select_rslt_on_fraction_args",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_sql_select_rslt_on_fraction_args)(nil)

// Attributes:
//  - _success
//  - _e
// 
type _Service_sql_select_rslt_on_fraction_result struct {
	_success *_FCells `thrift:"success,0" db:"success" json:"success,omitempty"`
	_e *_Exception `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func New_Service_sql_select_rslt_on_fraction_result() *_Service_sql_select_rslt_on_fraction_result {
	return &_Service_sql_select_rslt_on_fraction_result{}
}

var _Service_sql_select_rslt_on_fraction_result__success_DEFAULT *_FCells

func (p *_Service_sql_select_rslt_on_fraction_result) Get_success() *_FCells {
	if !p.IsSet_success() {
		return _Service_sql_select_rslt_on_fraction_result__success_DEFAULT
	}
	return p._success
}

var _Service_sql_select_rslt_on_fraction_result__e_DEFAULT *_Exception

func (p *_Service_sql_select_rslt_on_fraction_result) Get_e() *_Exception {
	if !p.IsSet_e() {
		return _Service_sql_select_rslt_on_fraction_result__e_DEFAULT
	}
	return p._e
}

func (p *_Service_sql_select_rslt_on_fraction_result) IsSet_success() bool {
	return p._success != nil
}

func (p *_Service_sql_select_rslt_on_fraction_result) IsSet_e() bool {
	return p._e != nil
}

func (p *_Service_sql_select_rslt_on_fraction_result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_sql_select_rslt_on_fraction_result) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p._success = &_FCells{}
	if err := p._success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._success), err)
	}
	return nil
}

func (p *_Service_sql_select_rslt_on_fraction_result) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._e = &_Exception{}
	if err := p._e.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._e), err)
	}
	return nil
}

func (p *_Service_sql_select_rslt_on_fraction_result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sql_select_rslt_on_fraction_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_sql_select_rslt_on_fraction_result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_success() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p._success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *_Service_sql_select_rslt_on_fraction_result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_e() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p._e.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._e), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *_Service_sql_select_rslt_on_fraction_result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_sql_select_rslt_on_fraction_result(%+v)", *p)
}

func (p *_Service_sql_select_rslt_on_fraction_result) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_sql_select_rslt_on_fraction_result",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_sql_select_rslt_on_fraction_result)(nil)

// Attributes:
//  - _sql: The SQL string to Execute
//  - _rslt: The Type of Cells Result for the response
// 
type _Service_sql_query_args struct {
	_sql string `thrift:"sql,1" db:"sql" json:"sql"`
	_rslt _CellsResult_ `thrift:"rslt,2" db:"rslt" json:"rslt"`
}

func New_Service_sql_query_args() *_Service_sql_query_args {
	return &_Service_sql_query_args{}
}



func (p *_Service_sql_query_args) Get_sql() string {
	return p._sql
}



func (p *_Service_sql_query_args) Get_rslt() _CellsResult_ {
	return p._rslt
}

func (p *_Service_sql_query_args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_sql_query_args) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._sql = v
	}
	return nil
}

func (p *_Service_sql_query_args) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := _CellsResult_(v)
		p._rslt = temp
	}
	return nil
}

func (p *_Service_sql_query_args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sql_query_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_sql_query_args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "sql", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sql: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p._sql)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sql (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sql: ", p), err)
	}
	return err
}

func (p *_Service_sql_query_args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "rslt", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rslt: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p._rslt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rslt (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rslt: ", p), err)
	}
	return err
}

func (p *_Service_sql_query_args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_sql_query_args(%+v)", *p)
}

func (p *_Service_sql_query_args) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_sql_query_args",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_sql_query_args)(nil)

// Attributes:
//  - _success
//  - _e
// 
type _Service_sql_query_result struct {
	_success *_CellsGroup `thrift:"success,0" db:"success" json:"success,omitempty"`
	_e *_Exception `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func New_Service_sql_query_result() *_Service_sql_query_result {
	return &_Service_sql_query_result{}
}

var _Service_sql_query_result__success_DEFAULT *_CellsGroup

func (p *_Service_sql_query_result) Get_success() *_CellsGroup {
	if !p.IsSet_success() {
		return _Service_sql_query_result__success_DEFAULT
	}
	return p._success
}

var _Service_sql_query_result__e_DEFAULT *_Exception

func (p *_Service_sql_query_result) Get_e() *_Exception {
	if !p.IsSet_e() {
		return _Service_sql_query_result__e_DEFAULT
	}
	return p._e
}

func (p *_Service_sql_query_result) IsSet_success() bool {
	return p._success != nil
}

func (p *_Service_sql_query_result) IsSet_e() bool {
	return p._e != nil
}

func (p *_Service_sql_query_result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_sql_query_result) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p._success = &_CellsGroup{}
	if err := p._success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._success), err)
	}
	return nil
}

func (p *_Service_sql_query_result) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._e = &_Exception{}
	if err := p._e.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._e), err)
	}
	return nil
}

func (p *_Service_sql_query_result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sql_query_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_sql_query_result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_success() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p._success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *_Service_sql_query_result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_e() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p._e.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._e), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *_Service_sql_query_result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_sql_query_result(%+v)", *p)
}

func (p *_Service_sql_query_result) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_sql_query_result",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_sql_query_result)(nil)

// Attributes:
//  - _sql: The SQL string to Execute
//  - _updater_id: The Updater ID to work with
// 
type _Service_sql_update_args struct {
	_sql string `thrift:"sql,1" db:"sql" json:"sql"`
	_updater_id int64 `thrift:"updater_id,2" db:"updater_id" json:"updater_id"`
}

func New_Service_sql_update_args() *_Service_sql_update_args {
	return &_Service_sql_update_args{}
}



func (p *_Service_sql_update_args) Get_sql() string {
	return p._sql
}



func (p *_Service_sql_update_args) Get_updater_id() int64 {
	return p._updater_id
}

func (p *_Service_sql_update_args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_sql_update_args) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._sql = v
	}
	return nil
}

func (p *_Service_sql_update_args) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p._updater_id = v
	}
	return nil
}

func (p *_Service_sql_update_args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sql_update_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_sql_update_args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "sql", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sql: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p._sql)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sql (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sql: ", p), err)
	}
	return err
}

func (p *_Service_sql_update_args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "updater_id", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:updater_id: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._updater_id)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.updater_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:updater_id: ", p), err)
	}
	return err
}

func (p *_Service_sql_update_args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_sql_update_args(%+v)", *p)
}

func (p *_Service_sql_update_args) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_sql_update_args",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_sql_update_args)(nil)

// Attributes:
//  - _e
// 
type _Service_sql_update_result struct {
	_e *_Exception `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func New_Service_sql_update_result() *_Service_sql_update_result {
	return &_Service_sql_update_result{}
}

var _Service_sql_update_result__e_DEFAULT *_Exception

func (p *_Service_sql_update_result) Get_e() *_Exception {
	if !p.IsSet_e() {
		return _Service_sql_update_result__e_DEFAULT
	}
	return p._e
}

func (p *_Service_sql_update_result) IsSet_e() bool {
	return p._e != nil
}

func (p *_Service_sql_update_result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_sql_update_result) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._e = &_Exception{}
	if err := p._e.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._e), err)
	}
	return nil
}

func (p *_Service_sql_update_result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sql_update_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_sql_update_result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_e() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p._e.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._e), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *_Service_sql_update_result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_sql_update_result(%+v)", *p)
}

func (p *_Service_sql_update_result) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_sql_update_result",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_sql_update_result)(nil)

// Attributes:
//  - _sql: The SQL string to Execute
// 
type _Service_exec_sql_args struct {
	_sql string `thrift:"sql,1" db:"sql" json:"sql"`
}

func New_Service_exec_sql_args() *_Service_exec_sql_args {
	return &_Service_exec_sql_args{}
}



func (p *_Service_exec_sql_args) Get_sql() string {
	return p._sql
}

func (p *_Service_exec_sql_args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_exec_sql_args) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._sql = v
	}
	return nil
}

func (p *_Service_exec_sql_args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "exec_sql_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_exec_sql_args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "sql", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sql: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p._sql)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sql (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sql: ", p), err)
	}
	return err
}

func (p *_Service_exec_sql_args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_exec_sql_args(%+v)", *p)
}

func (p *_Service_exec_sql_args) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_exec_sql_args",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_exec_sql_args)(nil)

// Attributes:
//  - _success
//  - _e
// 
type _Service_exec_sql_result struct {
	_success *_Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
	_e *_Exception `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func New_Service_exec_sql_result() *_Service_exec_sql_result {
	return &_Service_exec_sql_result{}
}

var _Service_exec_sql_result__success_DEFAULT *_Result_

func (p *_Service_exec_sql_result) Get_success() *_Result_ {
	if !p.IsSet_success() {
		return _Service_exec_sql_result__success_DEFAULT
	}
	return p._success
}

var _Service_exec_sql_result__e_DEFAULT *_Exception

func (p *_Service_exec_sql_result) Get_e() *_Exception {
	if !p.IsSet_e() {
		return _Service_exec_sql_result__e_DEFAULT
	}
	return p._e
}

func (p *_Service_exec_sql_result) IsSet_success() bool {
	return p._success != nil
}

func (p *_Service_exec_sql_result) IsSet_e() bool {
	return p._e != nil
}

func (p *_Service_exec_sql_result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_exec_sql_result) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p._success = &_Result_{}
	if err := p._success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._success), err)
	}
	return nil
}

func (p *_Service_exec_sql_result) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._e = &_Exception{}
	if err := p._e.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._e), err)
	}
	return nil
}

func (p *_Service_exec_sql_result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "exec_sql_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_exec_sql_result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_success() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p._success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *_Service_exec_sql_result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_e() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p._e.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._e), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *_Service_exec_sql_result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_exec_sql_result(%+v)", *p)
}

func (p *_Service_exec_sql_result) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_exec_sql_result",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_exec_sql_result)(nil)

// Attributes:
//  - _buffer_size: The buffer size of the Updater
// 
type _Service_updater_create_args struct {
	_buffer_size int32 `thrift:"buffer_size,1" db:"buffer_size" json:"buffer_size"`
}

func New_Service_updater_create_args() *_Service_updater_create_args {
	return &_Service_updater_create_args{}
}



func (p *_Service_updater_create_args) Get_buffer_size() int32 {
	return p._buffer_size
}

func (p *_Service_updater_create_args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_updater_create_args) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._buffer_size = v
	}
	return nil
}

func (p *_Service_updater_create_args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "updater_create_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_updater_create_args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "buffer_size", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:buffer_size: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p._buffer_size)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.buffer_size (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:buffer_size: ", p), err)
	}
	return err
}

func (p *_Service_updater_create_args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_updater_create_args(%+v)", *p)
}

func (p *_Service_updater_create_args) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_updater_create_args",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_updater_create_args)(nil)

// Attributes:
//  - _success
//  - _e
// 
type _Service_updater_create_result struct {
	_success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
	_e *_Exception `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func New_Service_updater_create_result() *_Service_updater_create_result {
	return &_Service_updater_create_result{}
}

var _Service_updater_create_result__success_DEFAULT int64

func (p *_Service_updater_create_result) Get_success() int64 {
	if !p.IsSet_success() {
		return _Service_updater_create_result__success_DEFAULT
	}
	return *p._success
}

var _Service_updater_create_result__e_DEFAULT *_Exception

func (p *_Service_updater_create_result) Get_e() *_Exception {
	if !p.IsSet_e() {
		return _Service_updater_create_result__e_DEFAULT
	}
	return p._e
}

func (p *_Service_updater_create_result) IsSet_success() bool {
	return p._success != nil
}

func (p *_Service_updater_create_result) IsSet_e() bool {
	return p._e != nil
}

func (p *_Service_updater_create_result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_updater_create_result) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p._success = &v
	}
	return nil
}

func (p *_Service_updater_create_result) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._e = &_Exception{}
	if err := p._e.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._e), err)
	}
	return nil
}

func (p *_Service_updater_create_result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "updater_create_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_updater_create_result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_success() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p._success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *_Service_updater_create_result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_e() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p._e.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._e), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *_Service_updater_create_result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_updater_create_result(%+v)", *p)
}

func (p *_Service_updater_create_result) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_updater_create_result",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_updater_create_result)(nil)

// Attributes:
//  - _id: The Updater ID to close
// 
type _Service_updater_close_args struct {
	_id int64 `thrift:"id,1" db:"id" json:"id"`
}

func New_Service_updater_close_args() *_Service_updater_close_args {
	return &_Service_updater_close_args{}
}



func (p *_Service_updater_close_args) Get_id() int64 {
	return p._id
}

func (p *_Service_updater_close_args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_updater_close_args) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p._id = v
	}
	return nil
}

func (p *_Service_updater_close_args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "updater_close_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_updater_close_args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._id)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *_Service_updater_close_args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_updater_close_args(%+v)", *p)
}

func (p *_Service_updater_close_args) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_updater_close_args",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_updater_close_args)(nil)

// Attributes:
//  - _e
// 
type _Service_updater_close_result struct {
	_e *_Exception `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func New_Service_updater_close_result() *_Service_updater_close_result {
	return &_Service_updater_close_result{}
}

var _Service_updater_close_result__e_DEFAULT *_Exception

func (p *_Service_updater_close_result) Get_e() *_Exception {
	if !p.IsSet_e() {
		return _Service_updater_close_result__e_DEFAULT
	}
	return p._e
}

func (p *_Service_updater_close_result) IsSet_e() bool {
	return p._e != nil
}

func (p *_Service_updater_close_result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_updater_close_result) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._e = &_Exception{}
	if err := p._e.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._e), err)
	}
	return nil
}

func (p *_Service_updater_close_result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "updater_close_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_updater_close_result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_e() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p._e.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._e), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *_Service_updater_close_result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_updater_close_result(%+v)", *p)
}

func (p *_Service_updater_close_result) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_updater_close_result",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_updater_close_result)(nil)

// Attributes:
//  - _cells: The Cells to update
//  - _updater_id: The Updater ID to use for write
// 
type _Service_update_plain_args struct {
	_cells _UCCellsPlain `thrift:"cells,1" db:"cells" json:"cells"`
	_updater_id int64 `thrift:"updater_id,2" db:"updater_id" json:"updater_id"`
}

func New_Service_update_plain_args() *_Service_update_plain_args {
	return &_Service_update_plain_args{}
}



func (p *_Service_update_plain_args) Get_cells() _UCCellsPlain {
	return p._cells
}



func (p *_Service_update_plain_args) Get_updater_id() int64 {
	return p._updater_id
}

func (p *_Service_update_plain_args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_update_plain_args) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(_UCCellsPlain, size)
	p._cells = tMap
	for i := 0; i < size; i++ {
		var _key298 int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__key298 = v
		}
		_, size, err := iprot.ReadListBegin(ctx)
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make(_UCellsPlain, 0, size)
		__val299 := tSlice
		for i := 0; i < size; i++ {
			__elem300 := &_UCellPlain{}
			if err := __elem300.Read(ctx, iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem300), err)
			}
			__val299 = append(__val299, _elem300)
		}
		if err := iprot.ReadListEnd(ctx); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p._cells[_key298] = _val299
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *_Service_update_plain_args) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p._updater_id = v
	}
	return nil
}

func (p *_Service_update_plain_args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "update_plain_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_update_plain_args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "cells", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cells: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.I64, thrift.LIST, len(p._cells)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p._cells {
		if err := oprot.WriteI64(ctx, int64(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cells: ", p), err)
	}
	return err
}

func (p *_Service_update_plain_args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "updater_id", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:updater_id: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._updater_id)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.updater_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:updater_id: ", p), err)
	}
	return err
}

func (p *_Service_update_plain_args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_update_plain_args(%+v)", *p)
}

func (p *_Service_update_plain_args) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_update_plain_args",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_update_plain_args)(nil)

// Attributes:
//  - _e
// 
type _Service_update_plain_result struct {
	_e *_Exception `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func New_Service_update_plain_result() *_Service_update_plain_result {
	return &_Service_update_plain_result{}
}

var _Service_update_plain_result__e_DEFAULT *_Exception

func (p *_Service_update_plain_result) Get_e() *_Exception {
	if !p.IsSet_e() {
		return _Service_update_plain_result__e_DEFAULT
	}
	return p._e
}

func (p *_Service_update_plain_result) IsSet_e() bool {
	return p._e != nil
}

func (p *_Service_update_plain_result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_update_plain_result) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._e = &_Exception{}
	if err := p._e.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._e), err)
	}
	return nil
}

func (p *_Service_update_plain_result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "update_plain_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_update_plain_result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_e() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p._e.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._e), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *_Service_update_plain_result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_update_plain_result(%+v)", *p)
}

func (p *_Service_update_plain_result) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_update_plain_result",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_update_plain_result)(nil)

// Attributes:
//  - _cells: The Counter Cells to update
//  - _updater_id: The Updater ID to use for write
// 
type _Service_update_counter_args struct {
	_cells _UCCellsCounter `thrift:"cells,1" db:"cells" json:"cells"`
	_updater_id int64 `thrift:"updater_id,2" db:"updater_id" json:"updater_id"`
}

func New_Service_update_counter_args() *_Service_update_counter_args {
	return &_Service_update_counter_args{}
}



func (p *_Service_update_counter_args) Get_cells() _UCCellsCounter {
	return p._cells
}



func (p *_Service_update_counter_args) Get_updater_id() int64 {
	return p._updater_id
}

func (p *_Service_update_counter_args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_update_counter_args) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(_UCCellsCounter, size)
	p._cells = tMap
	for i := 0; i < size; i++ {
		var _key301 int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__key301 = v
		}
		_, size, err := iprot.ReadListBegin(ctx)
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make(_UCellsCounter, 0, size)
		__val302 := tSlice
		for i := 0; i < size; i++ {
			__elem303 := &_UCellCounter{}
			if err := __elem303.Read(ctx, iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem303), err)
			}
			__val302 = append(__val302, _elem303)
		}
		if err := iprot.ReadListEnd(ctx); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p._cells[_key301] = _val302
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *_Service_update_counter_args) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p._updater_id = v
	}
	return nil
}

func (p *_Service_update_counter_args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "update_counter_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_update_counter_args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "cells", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cells: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.I64, thrift.LIST, len(p._cells)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p._cells {
		if err := oprot.WriteI64(ctx, int64(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cells: ", p), err)
	}
	return err
}

func (p *_Service_update_counter_args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "updater_id", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:updater_id: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._updater_id)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.updater_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:updater_id: ", p), err)
	}
	return err
}

func (p *_Service_update_counter_args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_update_counter_args(%+v)", *p)
}

func (p *_Service_update_counter_args) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_update_counter_args",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_update_counter_args)(nil)

// Attributes:
//  - _e
// 
type _Service_update_counter_result struct {
	_e *_Exception `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func New_Service_update_counter_result() *_Service_update_counter_result {
	return &_Service_update_counter_result{}
}

var _Service_update_counter_result__e_DEFAULT *_Exception

func (p *_Service_update_counter_result) Get_e() *_Exception {
	if !p.IsSet_e() {
		return _Service_update_counter_result__e_DEFAULT
	}
	return p._e
}

func (p *_Service_update_counter_result) IsSet_e() bool {
	return p._e != nil
}

func (p *_Service_update_counter_result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_update_counter_result) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._e = &_Exception{}
	if err := p._e.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._e), err)
	}
	return nil
}

func (p *_Service_update_counter_result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "update_counter_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_update_counter_result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_e() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p._e.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._e), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *_Service_update_counter_result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_update_counter_result(%+v)", *p)
}

func (p *_Service_update_counter_result) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_update_counter_result",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_update_counter_result)(nil)

// Attributes:
//  - _cells: The Serial Cells to update
//  - _updater_id: The Updater ID to use for write
// 
type _Service_update_serial_args struct {
	_cells _UCCellsSerial `thrift:"cells,1" db:"cells" json:"cells"`
	_updater_id int64 `thrift:"updater_id,2" db:"updater_id" json:"updater_id"`
}

func New_Service_update_serial_args() *_Service_update_serial_args {
	return &_Service_update_serial_args{}
}



func (p *_Service_update_serial_args) Get_cells() _UCCellsSerial {
	return p._cells
}



func (p *_Service_update_serial_args) Get_updater_id() int64 {
	return p._updater_id
}

func (p *_Service_update_serial_args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_update_serial_args) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(_UCCellsSerial, size)
	p._cells = tMap
	for i := 0; i < size; i++ {
		var _key304 int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__key304 = v
		}
		_, size, err := iprot.ReadListBegin(ctx)
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make(_UCellsSerial, 0, size)
		__val305 := tSlice
		for i := 0; i < size; i++ {
			__elem306 := &_UCellSerial{}
			if err := __elem306.Read(ctx, iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem306), err)
			}
			__val305 = append(__val305, _elem306)
		}
		if err := iprot.ReadListEnd(ctx); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p._cells[_key304] = _val305
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *_Service_update_serial_args) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p._updater_id = v
	}
	return nil
}

func (p *_Service_update_serial_args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "update_serial_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_update_serial_args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "cells", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cells: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.I64, thrift.LIST, len(p._cells)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p._cells {
		if err := oprot.WriteI64(ctx, int64(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cells: ", p), err)
	}
	return err
}

func (p *_Service_update_serial_args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "updater_id", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:updater_id: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._updater_id)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.updater_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:updater_id: ", p), err)
	}
	return err
}

func (p *_Service_update_serial_args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_update_serial_args(%+v)", *p)
}

func (p *_Service_update_serial_args) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_update_serial_args",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_update_serial_args)(nil)

// Attributes:
//  - _e
// 
type _Service_update_serial_result struct {
	_e *_Exception `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func New_Service_update_serial_result() *_Service_update_serial_result {
	return &_Service_update_serial_result{}
}

var _Service_update_serial_result__e_DEFAULT *_Exception

func (p *_Service_update_serial_result) Get_e() *_Exception {
	if !p.IsSet_e() {
		return _Service_update_serial_result__e_DEFAULT
	}
	return p._e
}

func (p *_Service_update_serial_result) IsSet_e() bool {
	return p._e != nil
}

func (p *_Service_update_serial_result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_update_serial_result) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._e = &_Exception{}
	if err := p._e.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._e), err)
	}
	return nil
}

func (p *_Service_update_serial_result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "update_serial_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_update_serial_result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_e() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p._e.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._e), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *_Service_update_serial_result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_update_serial_result(%+v)", *p)
}

func (p *_Service_update_serial_result) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_update_serial_result",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_update_serial_result)(nil)

// Attributes:
//  - _plain: The PLAIN Cells to update
//  - _counter: The COUNTER Cells to update
//  - _serial: The SERIAL Cells to update
//  - _updater_id: The Updater ID to use for write
// 
type _Service_update_by_types_args struct {
	_plain _UCCellsPlain `thrift:"plain,1" db:"plain" json:"plain"`
	_counter _UCCellsCounter `thrift:"counter,2" db:"counter" json:"counter"`
	_serial _UCCellsSerial `thrift:"serial,3" db:"serial" json:"serial"`
	_updater_id int64 `thrift:"updater_id,4" db:"updater_id" json:"updater_id"`
}

func New_Service_update_by_types_args() *_Service_update_by_types_args {
	return &_Service_update_by_types_args{}
}



func (p *_Service_update_by_types_args) Get_plain() _UCCellsPlain {
	return p._plain
}



func (p *_Service_update_by_types_args) Get_counter() _UCCellsCounter {
	return p._counter
}



func (p *_Service_update_by_types_args) Get_serial() _UCCellsSerial {
	return p._serial
}



func (p *_Service_update_by_types_args) Get_updater_id() int64 {
	return p._updater_id
}

func (p *_Service_update_by_types_args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_update_by_types_args) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(_UCCellsPlain, size)
	p._plain = tMap
	for i := 0; i < size; i++ {
		var _key307 int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__key307 = v
		}
		_, size, err := iprot.ReadListBegin(ctx)
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make(_UCellsPlain, 0, size)
		__val308 := tSlice
		for i := 0; i < size; i++ {
			__elem309 := &_UCellPlain{}
			if err := __elem309.Read(ctx, iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem309), err)
			}
			__val308 = append(__val308, _elem309)
		}
		if err := iprot.ReadListEnd(ctx); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p._plain[_key307] = _val308
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *_Service_update_by_types_args) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(_UCCellsCounter, size)
	p._counter = tMap
	for i := 0; i < size; i++ {
		var _key310 int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__key310 = v
		}
		_, size, err := iprot.ReadListBegin(ctx)
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make(_UCellsCounter, 0, size)
		__val311 := tSlice
		for i := 0; i < size; i++ {
			__elem312 := &_UCellCounter{}
			if err := __elem312.Read(ctx, iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem312), err)
			}
			__val311 = append(__val311, _elem312)
		}
		if err := iprot.ReadListEnd(ctx); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p._counter[_key310] = _val311
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *_Service_update_by_types_args) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(_UCCellsSerial, size)
	p._serial = tMap
	for i := 0; i < size; i++ {
		var _key313 int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__key313 = v
		}
		_, size, err := iprot.ReadListBegin(ctx)
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make(_UCellsSerial, 0, size)
		__val314 := tSlice
		for i := 0; i < size; i++ {
			__elem315 := &_UCellSerial{}
			if err := __elem315.Read(ctx, iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem315), err)
			}
			__val314 = append(__val314, _elem315)
		}
		if err := iprot.ReadListEnd(ctx); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p._serial[_key313] = _val314
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *_Service_update_by_types_args) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p._updater_id = v
	}
	return nil
}

func (p *_Service_update_by_types_args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "update_by_types_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_update_by_types_args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "plain", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:plain: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.I64, thrift.LIST, len(p._plain)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p._plain {
		if err := oprot.WriteI64(ctx, int64(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:plain: ", p), err)
	}
	return err
}

func (p *_Service_update_by_types_args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "counter", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:counter: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.I64, thrift.LIST, len(p._counter)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p._counter {
		if err := oprot.WriteI64(ctx, int64(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:counter: ", p), err)
	}
	return err
}

func (p *_Service_update_by_types_args) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "serial", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serial: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.I64, thrift.LIST, len(p._serial)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p._serial {
		if err := oprot.WriteI64(ctx, int64(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serial: ", p), err)
	}
	return err
}

func (p *_Service_update_by_types_args) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "updater_id", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:updater_id: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p._updater_id)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.updater_id (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:updater_id: ", p), err)
	}
	return err
}

func (p *_Service_update_by_types_args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_update_by_types_args(%+v)", *p)
}

func (p *_Service_update_by_types_args) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_update_by_types_args",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_update_by_types_args)(nil)

// Attributes:
//  - _e
// 
type _Service_update_by_types_result struct {
	_e *_Exception `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func New_Service_update_by_types_result() *_Service_update_by_types_result {
	return &_Service_update_by_types_result{}
}

var _Service_update_by_types_result__e_DEFAULT *_Exception

func (p *_Service_update_by_types_result) Get_e() *_Exception {
	if !p.IsSet_e() {
		return _Service_update_by_types_result__e_DEFAULT
	}
	return p._e
}

func (p *_Service_update_by_types_result) IsSet_e() bool {
	return p._e != nil
}

func (p *_Service_update_by_types_result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_update_by_types_result) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._e = &_Exception{}
	if err := p._e.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._e), err)
	}
	return nil
}

func (p *_Service_update_by_types_result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "update_by_types_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_update_by_types_result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_e() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p._e.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._e), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *_Service_update_by_types_result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_update_by_types_result(%+v)", *p)
}

func (p *_Service_update_by_types_result) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_update_by_types_result",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_update_by_types_result)(nil)

// Attributes:
//  - _func: The Action Function to use
//  - _schema: The Schema for the Action
// 
type _Service_mng_column_args struct {
	_func _SchemaFunc `thrift:"func,1" db:"func" json:"func"`
	_schema *_Schema `thrift:"schema,2" db:"schema" json:"schema"`
}

func New_Service_mng_column_args() *_Service_mng_column_args {
	return &_Service_mng_column_args{}
}



func (p *_Service_mng_column_args) Get_func() _SchemaFunc {
	return p._func
}

var _Service_mng_column_args__schema_DEFAULT *_Schema

func (p *_Service_mng_column_args) Get_schema() *_Schema {
	if !p.IsSet_schema() {
		return _Service_mng_column_args__schema_DEFAULT
	}
	return p._schema
}

func (p *_Service_mng_column_args) IsSet_schema() bool {
	return p._schema != nil
}

func (p *_Service_mng_column_args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_mng_column_args) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := _SchemaFunc(v)
		p._func = temp
	}
	return nil
}

func (p *_Service_mng_column_args) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p._schema = &_Schema{}
	if err := p._schema.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._schema), err)
	}
	return nil
}

func (p *_Service_mng_column_args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "mng_column_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_mng_column_args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "func", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:func: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p._func)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.func (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:func: ", p), err)
	}
	return err
}

func (p *_Service_mng_column_args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "schema", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:schema: ", p), err)
	}
	if err := p._schema.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._schema), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:schema: ", p), err)
	}
	return err
}

func (p *_Service_mng_column_args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_mng_column_args(%+v)", *p)
}

func (p *_Service_mng_column_args) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_mng_column_args",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_mng_column_args)(nil)

// Attributes:
//  - _e
// 
type _Service_mng_column_result struct {
	_e *_Exception `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func New_Service_mng_column_result() *_Service_mng_column_result {
	return &_Service_mng_column_result{}
}

var _Service_mng_column_result__e_DEFAULT *_Exception

func (p *_Service_mng_column_result) Get_e() *_Exception {
	if !p.IsSet_e() {
		return _Service_mng_column_result__e_DEFAULT
	}
	return p._e
}

func (p *_Service_mng_column_result) IsSet_e() bool {
	return p._e != nil
}

func (p *_Service_mng_column_result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_mng_column_result) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._e = &_Exception{}
	if err := p._e.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._e), err)
	}
	return nil
}

func (p *_Service_mng_column_result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "mng_column_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_mng_column_result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_e() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p._e.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._e), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *_Service_mng_column_result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_mng_column_result(%+v)", *p)
}

func (p *_Service_mng_column_result) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_mng_column_result",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_mng_column_result)(nil)

// Attributes:
//  - _spec: The Schemas Specifications to match Schema for response
// 
type _Service_list_columns_args struct {
	_spec *_SpecSchemas `thrift:"spec,1" db:"spec" json:"spec"`
}

func New_Service_list_columns_args() *_Service_list_columns_args {
	return &_Service_list_columns_args{}
}

var _Service_list_columns_args__spec_DEFAULT *_SpecSchemas

func (p *_Service_list_columns_args) Get_spec() *_SpecSchemas {
	if !p.IsSet_spec() {
		return _Service_list_columns_args__spec_DEFAULT
	}
	return p._spec
}

func (p *_Service_list_columns_args) IsSet_spec() bool {
	return p._spec != nil
}

func (p *_Service_list_columns_args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_list_columns_args) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._spec = &_SpecSchemas{}
	if err := p._spec.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._spec), err)
	}
	return nil
}

func (p *_Service_list_columns_args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "list_columns_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_list_columns_args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "spec", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:spec: ", p), err)
	}
	if err := p._spec.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._spec), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:spec: ", p), err)
	}
	return err
}

func (p *_Service_list_columns_args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_list_columns_args(%+v)", *p)
}

func (p *_Service_list_columns_args) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_list_columns_args",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_list_columns_args)(nil)

// Attributes:
//  - _success
//  - _e
// 
type _Service_list_columns_result struct {
	_success _Schemas `thrift:"success,0" db:"success" json:"success,omitempty"`
	_e *_Exception `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func New_Service_list_columns_result() *_Service_list_columns_result {
	return &_Service_list_columns_result{}
}

var _Service_list_columns_result__success_DEFAULT _Schemas


func (p *_Service_list_columns_result) Get_success() _Schemas {
	return p._success
}

var _Service_list_columns_result__e_DEFAULT *_Exception

func (p *_Service_list_columns_result) Get_e() *_Exception {
	if !p.IsSet_e() {
		return _Service_list_columns_result__e_DEFAULT
	}
	return p._e
}

func (p *_Service_list_columns_result) IsSet_success() bool {
	return p._success != nil
}

func (p *_Service_list_columns_result) IsSet_e() bool {
	return p._e != nil
}

func (p *_Service_list_columns_result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_list_columns_result) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_Schemas, 0, size)
	p._success = tSlice
	for i := 0; i < size; i++ {
		__elem316 := &_Schema{}
		if err := __elem316.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem316), err)
		}
		p._success = append(p._success, _elem316)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_Service_list_columns_result) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._e = &_Exception{}
	if err := p._e.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._e), err)
	}
	return nil
}

func (p *_Service_list_columns_result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "list_columns_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_list_columns_result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_success() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p._success {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *_Service_list_columns_result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_e() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p._e.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._e), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *_Service_list_columns_result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_list_columns_result(%+v)", *p)
}

func (p *_Service_list_columns_result) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_list_columns_result",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_list_columns_result)(nil)

// Attributes:
//  - _spec: The Schemas Specifications to match columns to Compact
// 
type _Service_compact_columns_args struct {
	_spec *_SpecSchemas `thrift:"spec,1" db:"spec" json:"spec"`
}

func New_Service_compact_columns_args() *_Service_compact_columns_args {
	return &_Service_compact_columns_args{}
}

var _Service_compact_columns_args__spec_DEFAULT *_SpecSchemas

func (p *_Service_compact_columns_args) Get_spec() *_SpecSchemas {
	if !p.IsSet_spec() {
		return _Service_compact_columns_args__spec_DEFAULT
	}
	return p._spec
}

func (p *_Service_compact_columns_args) IsSet_spec() bool {
	return p._spec != nil
}

func (p *_Service_compact_columns_args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_compact_columns_args) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._spec = &_SpecSchemas{}
	if err := p._spec.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._spec), err)
	}
	return nil
}

func (p *_Service_compact_columns_args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "compact_columns_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_compact_columns_args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "spec", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:spec: ", p), err)
	}
	if err := p._spec.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._spec), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:spec: ", p), err)
	}
	return err
}

func (p *_Service_compact_columns_args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_compact_columns_args(%+v)", *p)
}

func (p *_Service_compact_columns_args) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_compact_columns_args",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_compact_columns_args)(nil)

// Attributes:
//  - _success
//  - _e
// 
type _Service_compact_columns_result struct {
	_success _CompactResults `thrift:"success,0" db:"success" json:"success,omitempty"`
	_e *_Exception `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func New_Service_compact_columns_result() *_Service_compact_columns_result {
	return &_Service_compact_columns_result{}
}

var _Service_compact_columns_result__success_DEFAULT _CompactResults


func (p *_Service_compact_columns_result) Get_success() _CompactResults {
	return p._success
}

var _Service_compact_columns_result__e_DEFAULT *_Exception

func (p *_Service_compact_columns_result) Get_e() *_Exception {
	if !p.IsSet_e() {
		return _Service_compact_columns_result__e_DEFAULT
	}
	return p._e
}

func (p *_Service_compact_columns_result) IsSet_success() bool {
	return p._success != nil
}

func (p *_Service_compact_columns_result) IsSet_e() bool {
	return p._e != nil
}

func (p *_Service_compact_columns_result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_compact_columns_result) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_CompactResults, 0, size)
	p._success = tSlice
	for i := 0; i < size; i++ {
		__elem317 := &_CompactResult_{}
		if err := __elem317.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem317), err)
		}
		p._success = append(p._success, _elem317)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_Service_compact_columns_result) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._e = &_Exception{}
	if err := p._e.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._e), err)
	}
	return nil
}

func (p *_Service_compact_columns_result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "compact_columns_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_compact_columns_result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_success() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p._success {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *_Service_compact_columns_result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_e() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p._e.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._e), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *_Service_compact_columns_result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_compact_columns_result(%+v)", *p)
}

func (p *_Service_compact_columns_result) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_compact_columns_result",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_compact_columns_result)(nil)

// Attributes:
//  - _spec: The Scan Specifications for the scan
// 
type _Service_scan_args struct {
	_spec *_SpecScan `thrift:"spec,1" db:"spec" json:"spec"`
}

func New_Service_scan_args() *_Service_scan_args {
	return &_Service_scan_args{}
}

var _Service_scan_args__spec_DEFAULT *_SpecScan

func (p *_Service_scan_args) Get_spec() *_SpecScan {
	if !p.IsSet_spec() {
		return _Service_scan_args__spec_DEFAULT
	}
	return p._spec
}

func (p *_Service_scan_args) IsSet_spec() bool {
	return p._spec != nil
}

func (p *_Service_scan_args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_scan_args) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._spec = &_SpecScan{}
	if err := p._spec.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._spec), err)
	}
	return nil
}

func (p *_Service_scan_args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "scan_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_scan_args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "spec", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:spec: ", p), err)
	}
	if err := p._spec.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._spec), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:spec: ", p), err)
	}
	return err
}

func (p *_Service_scan_args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_scan_args(%+v)", *p)
}

func (p *_Service_scan_args) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_scan_args",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_scan_args)(nil)

// Attributes:
//  - _success
//  - _e
// 
type _Service_scan_result struct {
	_success *_Cells `thrift:"success,0" db:"success" json:"success,omitempty"`
	_e *_Exception `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func New_Service_scan_result() *_Service_scan_result {
	return &_Service_scan_result{}
}

var _Service_scan_result__success_DEFAULT *_Cells

func (p *_Service_scan_result) Get_success() *_Cells {
	if !p.IsSet_success() {
		return _Service_scan_result__success_DEFAULT
	}
	return p._success
}

var _Service_scan_result__e_DEFAULT *_Exception

func (p *_Service_scan_result) Get_e() *_Exception {
	if !p.IsSet_e() {
		return _Service_scan_result__e_DEFAULT
	}
	return p._e
}

func (p *_Service_scan_result) IsSet_success() bool {
	return p._success != nil
}

func (p *_Service_scan_result) IsSet_e() bool {
	return p._e != nil
}

func (p *_Service_scan_result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_scan_result) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p._success = &_Cells{}
	if err := p._success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._success), err)
	}
	return nil
}

func (p *_Service_scan_result) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._e = &_Exception{}
	if err := p._e.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._e), err)
	}
	return nil
}

func (p *_Service_scan_result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "scan_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_scan_result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_success() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p._success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *_Service_scan_result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_e() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p._e.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._e), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *_Service_scan_result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_scan_result(%+v)", *p)
}

func (p *_Service_scan_result) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_scan_result",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_scan_result)(nil)

// Attributes:
//  - _spec: The Scan Specifications for the scan
// 
type _Service_scan_rslt_on_column_args struct {
	_spec *_SpecScan `thrift:"spec,1" db:"spec" json:"spec"`
}

func New_Service_scan_rslt_on_column_args() *_Service_scan_rslt_on_column_args {
	return &_Service_scan_rslt_on_column_args{}
}

var _Service_scan_rslt_on_column_args__spec_DEFAULT *_SpecScan

func (p *_Service_scan_rslt_on_column_args) Get_spec() *_SpecScan {
	if !p.IsSet_spec() {
		return _Service_scan_rslt_on_column_args__spec_DEFAULT
	}
	return p._spec
}

func (p *_Service_scan_rslt_on_column_args) IsSet_spec() bool {
	return p._spec != nil
}

func (p *_Service_scan_rslt_on_column_args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_scan_rslt_on_column_args) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._spec = &_SpecScan{}
	if err := p._spec.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._spec), err)
	}
	return nil
}

func (p *_Service_scan_rslt_on_column_args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "scan_rslt_on_column_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_scan_rslt_on_column_args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "spec", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:spec: ", p), err)
	}
	if err := p._spec.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._spec), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:spec: ", p), err)
	}
	return err
}

func (p *_Service_scan_rslt_on_column_args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_scan_rslt_on_column_args(%+v)", *p)
}

func (p *_Service_scan_rslt_on_column_args) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_scan_rslt_on_column_args",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_scan_rslt_on_column_args)(nil)

// Attributes:
//  - _success
//  - _e
// 
type _Service_scan_rslt_on_column_result struct {
	_success _CCells `thrift:"success,0" db:"success" json:"success,omitempty"`
	_e *_Exception `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func New_Service_scan_rslt_on_column_result() *_Service_scan_rslt_on_column_result {
	return &_Service_scan_rslt_on_column_result{}
}

var _Service_scan_rslt_on_column_result__success_DEFAULT _CCells


func (p *_Service_scan_rslt_on_column_result) Get_success() _CCells {
	return p._success
}

var _Service_scan_rslt_on_column_result__e_DEFAULT *_Exception

func (p *_Service_scan_rslt_on_column_result) Get_e() *_Exception {
	if !p.IsSet_e() {
		return _Service_scan_rslt_on_column_result__e_DEFAULT
	}
	return p._e
}

func (p *_Service_scan_rslt_on_column_result) IsSet_success() bool {
	return p._success != nil
}

func (p *_Service_scan_rslt_on_column_result) IsSet_e() bool {
	return p._e != nil
}

func (p *_Service_scan_rslt_on_column_result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_scan_rslt_on_column_result) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(_CCells, size)
	p._success = tMap
	for i := 0; i < size; i++ {
		var _key318 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			__key318 = v
		}
		__val319 := &_cCells{}
		if err := __val319.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __val319), err)
		}
		p._success[_key318] = _val319
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *_Service_scan_rslt_on_column_result) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._e = &_Exception{}
	if err := p._e.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._e), err)
	}
	return nil
}

func (p *_Service_scan_rslt_on_column_result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "scan_rslt_on_column_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_scan_rslt_on_column_result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_success() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p._success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p._success {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *_Service_scan_rslt_on_column_result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_e() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p._e.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._e), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *_Service_scan_rslt_on_column_result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_scan_rslt_on_column_result(%+v)", *p)
}

func (p *_Service_scan_rslt_on_column_result) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_scan_rslt_on_column_result",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_scan_rslt_on_column_result)(nil)

// Attributes:
//  - _spec: The Scan Specifications for the scan
// 
type _Service_scan_rslt_on_key_args struct {
	_spec *_SpecScan `thrift:"spec,1" db:"spec" json:"spec"`
}

func New_Service_scan_rslt_on_key_args() *_Service_scan_rslt_on_key_args {
	return &_Service_scan_rslt_on_key_args{}
}

var _Service_scan_rslt_on_key_args__spec_DEFAULT *_SpecScan

func (p *_Service_scan_rslt_on_key_args) Get_spec() *_SpecScan {
	if !p.IsSet_spec() {
		return _Service_scan_rslt_on_key_args__spec_DEFAULT
	}
	return p._spec
}

func (p *_Service_scan_rslt_on_key_args) IsSet_spec() bool {
	return p._spec != nil
}

func (p *_Service_scan_rslt_on_key_args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_scan_rslt_on_key_args) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._spec = &_SpecScan{}
	if err := p._spec.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._spec), err)
	}
	return nil
}

func (p *_Service_scan_rslt_on_key_args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "scan_rslt_on_key_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_scan_rslt_on_key_args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "spec", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:spec: ", p), err)
	}
	if err := p._spec.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._spec), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:spec: ", p), err)
	}
	return err
}

func (p *_Service_scan_rslt_on_key_args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_scan_rslt_on_key_args(%+v)", *p)
}

func (p *_Service_scan_rslt_on_key_args) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_scan_rslt_on_key_args",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_scan_rslt_on_key_args)(nil)

// Attributes:
//  - _success
//  - _e
// 
type _Service_scan_rslt_on_key_result struct {
	_success _KCells `thrift:"success,0" db:"success" json:"success,omitempty"`
	_e *_Exception `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func New_Service_scan_rslt_on_key_result() *_Service_scan_rslt_on_key_result {
	return &_Service_scan_rslt_on_key_result{}
}

var _Service_scan_rslt_on_key_result__success_DEFAULT _KCells


func (p *_Service_scan_rslt_on_key_result) Get_success() _KCells {
	return p._success
}

var _Service_scan_rslt_on_key_result__e_DEFAULT *_Exception

func (p *_Service_scan_rslt_on_key_result) Get_e() *_Exception {
	if !p.IsSet_e() {
		return _Service_scan_rslt_on_key_result__e_DEFAULT
	}
	return p._e
}

func (p *_Service_scan_rslt_on_key_result) IsSet_success() bool {
	return p._success != nil
}

func (p *_Service_scan_rslt_on_key_result) IsSet_e() bool {
	return p._e != nil
}

func (p *_Service_scan_rslt_on_key_result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_scan_rslt_on_key_result) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(_KCells, 0, size)
	p._success = tSlice
	for i := 0; i < size; i++ {
		__elem320 := &_kCells{}
		if err := __elem320.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", __elem320), err)
		}
		p._success = append(p._success, _elem320)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *_Service_scan_rslt_on_key_result) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._e = &_Exception{}
	if err := p._e.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._e), err)
	}
	return nil
}

func (p *_Service_scan_rslt_on_key_result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "scan_rslt_on_key_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_scan_rslt_on_key_result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_success() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p._success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p._success {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *_Service_scan_rslt_on_key_result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_e() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p._e.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._e), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *_Service_scan_rslt_on_key_result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_scan_rslt_on_key_result(%+v)", *p)
}

func (p *_Service_scan_rslt_on_key_result) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_scan_rslt_on_key_result",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_scan_rslt_on_key_result)(nil)

// Attributes:
//  - _spec: The Scan Specifications for the scan
// 
type _Service_scan_rslt_on_fraction_args struct {
	_spec *_SpecScan `thrift:"spec,1" db:"spec" json:"spec"`
}

func New_Service_scan_rslt_on_fraction_args() *_Service_scan_rslt_on_fraction_args {
	return &_Service_scan_rslt_on_fraction_args{}
}

var _Service_scan_rslt_on_fraction_args__spec_DEFAULT *_SpecScan

func (p *_Service_scan_rslt_on_fraction_args) Get_spec() *_SpecScan {
	if !p.IsSet_spec() {
		return _Service_scan_rslt_on_fraction_args__spec_DEFAULT
	}
	return p._spec
}

func (p *_Service_scan_rslt_on_fraction_args) IsSet_spec() bool {
	return p._spec != nil
}

func (p *_Service_scan_rslt_on_fraction_args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_scan_rslt_on_fraction_args) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._spec = &_SpecScan{}
	if err := p._spec.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._spec), err)
	}
	return nil
}

func (p *_Service_scan_rslt_on_fraction_args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "scan_rslt_on_fraction_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_scan_rslt_on_fraction_args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "spec", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:spec: ", p), err)
	}
	if err := p._spec.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._spec), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:spec: ", p), err)
	}
	return err
}

func (p *_Service_scan_rslt_on_fraction_args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_scan_rslt_on_fraction_args(%+v)", *p)
}

func (p *_Service_scan_rslt_on_fraction_args) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_scan_rslt_on_fraction_args",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_scan_rslt_on_fraction_args)(nil)

// Attributes:
//  - _success
//  - _e
// 
type _Service_scan_rslt_on_fraction_result struct {
	_success *_FCells `thrift:"success,0" db:"success" json:"success,omitempty"`
	_e *_Exception `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func New_Service_scan_rslt_on_fraction_result() *_Service_scan_rslt_on_fraction_result {
	return &_Service_scan_rslt_on_fraction_result{}
}

var _Service_scan_rslt_on_fraction_result__success_DEFAULT *_FCells

func (p *_Service_scan_rslt_on_fraction_result) Get_success() *_FCells {
	if !p.IsSet_success() {
		return _Service_scan_rslt_on_fraction_result__success_DEFAULT
	}
	return p._success
}

var _Service_scan_rslt_on_fraction_result__e_DEFAULT *_Exception

func (p *_Service_scan_rslt_on_fraction_result) Get_e() *_Exception {
	if !p.IsSet_e() {
		return _Service_scan_rslt_on_fraction_result__e_DEFAULT
	}
	return p._e
}

func (p *_Service_scan_rslt_on_fraction_result) IsSet_success() bool {
	return p._success != nil
}

func (p *_Service_scan_rslt_on_fraction_result) IsSet_e() bool {
	return p._e != nil
}

func (p *_Service_scan_rslt_on_fraction_result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_scan_rslt_on_fraction_result) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p._success = &_FCells{}
	if err := p._success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._success), err)
	}
	return nil
}

func (p *_Service_scan_rslt_on_fraction_result) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._e = &_Exception{}
	if err := p._e.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._e), err)
	}
	return nil
}

func (p *_Service_scan_rslt_on_fraction_result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "scan_rslt_on_fraction_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_scan_rslt_on_fraction_result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_success() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p._success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *_Service_scan_rslt_on_fraction_result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_e() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p._e.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._e), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *_Service_scan_rslt_on_fraction_result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_scan_rslt_on_fraction_result(%+v)", *p)
}

func (p *_Service_scan_rslt_on_fraction_result) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_scan_rslt_on_fraction_result",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_scan_rslt_on_fraction_result)(nil)

// Attributes:
//  - _spec: The Scan Specifications for the scan
//  - _rslt: The Type of Cells Result for the response
// 
type _Service_scan_rslt_on_args struct {
	_spec *_SpecScan `thrift:"spec,1" db:"spec" json:"spec"`
	_rslt _CellsResult_ `thrift:"rslt,2" db:"rslt" json:"rslt"`
}

func New_Service_scan_rslt_on_args() *_Service_scan_rslt_on_args {
	return &_Service_scan_rslt_on_args{}
}

var _Service_scan_rslt_on_args__spec_DEFAULT *_SpecScan

func (p *_Service_scan_rslt_on_args) Get_spec() *_SpecScan {
	if !p.IsSet_spec() {
		return _Service_scan_rslt_on_args__spec_DEFAULT
	}
	return p._spec
}



func (p *_Service_scan_rslt_on_args) Get_rslt() _CellsResult_ {
	return p._rslt
}

func (p *_Service_scan_rslt_on_args) IsSet_spec() bool {
	return p._spec != nil
}

func (p *_Service_scan_rslt_on_args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_scan_rslt_on_args) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._spec = &_SpecScan{}
	if err := p._spec.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._spec), err)
	}
	return nil
}

func (p *_Service_scan_rslt_on_args) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := _CellsResult_(v)
		p._rslt = temp
	}
	return nil
}

func (p *_Service_scan_rslt_on_args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "scan_rslt_on_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_scan_rslt_on_args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "spec", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:spec: ", p), err)
	}
	if err := p._spec.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._spec), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:spec: ", p), err)
	}
	return err
}

func (p *_Service_scan_rslt_on_args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "rslt", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rslt: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p._rslt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rslt (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rslt: ", p), err)
	}
	return err
}

func (p *_Service_scan_rslt_on_args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_scan_rslt_on_args(%+v)", *p)
}

func (p *_Service_scan_rslt_on_args) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_scan_rslt_on_args",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_scan_rslt_on_args)(nil)

// Attributes:
//  - _success
//  - _e: The Base Exception
// 
type _Service_scan_rslt_on_result struct {
	_success *_CellsGroup `thrift:"success,0" db:"success" json:"success,omitempty"`
	_e *_Exception `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func New_Service_scan_rslt_on_result() *_Service_scan_rslt_on_result {
	return &_Service_scan_rslt_on_result{}
}

var _Service_scan_rslt_on_result__success_DEFAULT *_CellsGroup

func (p *_Service_scan_rslt_on_result) Get_success() *_CellsGroup {
	if !p.IsSet_success() {
		return _Service_scan_rslt_on_result__success_DEFAULT
	}
	return p._success
}

var _Service_scan_rslt_on_result__e_DEFAULT *_Exception

func (p *_Service_scan_rslt_on_result) Get_e() *_Exception {
	if !p.IsSet_e() {
		return _Service_scan_rslt_on_result__e_DEFAULT
	}
	return p._e
}

func (p *_Service_scan_rslt_on_result) IsSet_success() bool {
	return p._success != nil
}

func (p *_Service_scan_rslt_on_result) IsSet_e() bool {
	return p._e != nil
}

func (p *_Service_scan_rslt_on_result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *_Service_scan_rslt_on_result) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p._success = &_CellsGroup{}
	if err := p._success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._success), err)
	}
	return nil
}

func (p *_Service_scan_rslt_on_result) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p._e = &_Exception{}
	if err := p._e.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p._e), err)
	}
	return nil
}

func (p *_Service_scan_rslt_on_result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "scan_rslt_on_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *_Service_scan_rslt_on_result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_success() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p._success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *_Service_scan_rslt_on_result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSet_e() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p._e.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p._e), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *_Service_scan_rslt_on_result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_Service_scan_rslt_on_result(%+v)", *p)
}

func (p *_Service_scan_rslt_on_result) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*swcdb_thrift._Service_scan_rslt_on_result",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*_Service_scan_rslt_on_result)(nil)


