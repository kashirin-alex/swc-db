/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

public partial class Service
{
  /// <summary>
  /// The SWC-DB Thrift Service
  /// </summary>
  public interface IAsync
  {
    /// <summary>
    /// The direct SQL method to Manage Column.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task sql_mng_column(string @sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to List Columns
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<Schema>> sql_list_columns(string @sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to Compact Columns
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<CompactResult>> sql_compact_columns(string @sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in CellsPlain.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<CellPlain>> sql_select_plain(string @sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in CellsCounter.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<CellCounter>> sql_select_counter(string @sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in CellsSerial.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<CellSerial>> sql_select_serial(string @sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in Cells List.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<Cells> sql_select(string @sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in Columns Cells map.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<Dictionary<string, cCells>> sql_select_rslt_on_column(string @sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in Key Cells list.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<kCells>> sql_select_rslt_on_key(string @sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in Fractons Cells.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<FCells> sql_select_rslt_on_fraction(string @sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The SQL method to select cells with result set by the request's type of CellsResult.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    /// <param name="rslt">The Type of Cells Result for the response</param>
    global::System.Threading.Tasks.Task<CellsGroup> sql_query(string @sql, CellsResult @rslt, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to update cells optionally to work with updater-id.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    /// <param name="updater_id">The Updater ID to work with</param>
    global::System.Threading.Tasks.Task sql_update(string @sql, long updater_id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The SQL method to execute any query.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<Result> exec_sql(string @sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The method to Create an Updater ID with buffering size in bytes.
    /// </summary>
    /// <param name="buffer_size">The buffer size of the Updater</param>
    global::System.Threading.Tasks.Task<long> updater_create(int buffer_size, CancellationToken cancellationToken = default);

    /// <summary>
    /// The method to Close an Updater ID.
    /// </summary>
    /// <param name="id">The Updater ID to close</param>
    global::System.Threading.Tasks.Task updater_close(long @id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to update cells with cell in Update-Columns-Cells-Plain,
    /// optionally to work with updater-id.
    /// </summary>
    /// <param name="cells">The Cells to update</param>
    /// <param name="updater_id">The Updater ID to use for write</param>
    global::System.Threading.Tasks.Task update_plain(Dictionary<long, List<UCellPlain>> @cells, long updater_id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to update cells with cell in Update-Columns-Cells-Counter,
    /// optionally to work with updater-id.
    /// </summary>
    /// <param name="cells">The Counter Cells to update</param>
    /// <param name="updater_id">The Updater ID to use for write</param>
    global::System.Threading.Tasks.Task update_counter(Dictionary<long, List<UCellCounter>> @cells, long updater_id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to update cells with cell in Update-Columns-Cells-Serial,
    /// optionally to work with updater-id.
    /// </summary>
    /// <param name="cells">The Serial Cells to update</param>
    /// <param name="updater_id">The Updater ID to use for write</param>
    global::System.Threading.Tasks.Task update_serial(Dictionary<long, List<UCellSerial>> @cells, long updater_id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The method is to update cells by several Column-Types,
    /// optionally to work with updater-id.
    /// </summary>
    /// <param name="plain">The PLAIN Cells to update</param>
    /// <param name="counter">The COUNTER Cells to update</param>
    /// <param name="serial">The SERIAL Cells to update</param>
    /// <param name="updater_id">The Updater ID to use for write</param>
    global::System.Threading.Tasks.Task update_by_types(Dictionary<long, List<UCellPlain>> @plain, Dictionary<long, List<UCellCounter>> @counter, Dictionary<long, List<UCellSerial>> @serial, long updater_id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to Manage Column
    /// </summary>
    /// <param name="func">The Action Function to use</param>
    /// <param name="schema">The Schema for the Action</param>
    global::System.Threading.Tasks.Task mng_column(SchemaFunc @func, Schema @schema, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to List Columns
    /// </summary>
    /// <param name="spec">The Schemas Specifications to match Schema for response</param>
    global::System.Threading.Tasks.Task<List<Schema>> list_columns(SpecSchemas @spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to Compact Columns
    /// </summary>
    /// <param name="spec">The Schemas Specifications to match columns to Compact</param>
    global::System.Threading.Tasks.Task<List<CompactResult>> compact_columns(SpecSchemas @spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to select cells with result in Cells List.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    global::System.Threading.Tasks.Task<Cells> @scan(SpecScan @spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to select cells with result in Columns Cells map.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    global::System.Threading.Tasks.Task<Dictionary<string, cCells>> scan_rslt_on_column(SpecScan @spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to select cells with result in Key Cells list.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    global::System.Threading.Tasks.Task<List<kCells>> scan_rslt_on_key(SpecScan @spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to select cells with result in Fractons Cells.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    global::System.Threading.Tasks.Task<FCells> scan_rslt_on_fraction(SpecScan @spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The method to select cells with result set by the request's type of CellsResult.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    /// <param name="rslt">The Type of Cells Result for the response</param>
    global::System.Threading.Tasks.Task<CellsGroup> scan_rslt_on(SpecScan @spec, CellsResult @rslt, CancellationToken cancellationToken = default);

  }


  /// <summary>
  /// The SWC-DB Thrift Service
  /// </summary>
  public class Client : TBaseClient, IDisposable, IAsync
  {
    public Client(TProtocol protocol) : this(protocol, protocol)
    {
    }

    public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
    {
    }

    public async global::System.Threading.Tasks.Task sql_mng_column(string @sql, CancellationToken cancellationToken = default)
    {
      await send_sql_mng_column(@sql, cancellationToken);
      await recv_sql_mng_column(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_mng_column(string @sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_mng_column", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp590 = new InternalStructs.sql_mng_column_args() {
        Sql = @sql,
      };
      
      await tmp590.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_sql_mng_column(CancellationToken cancellationToken = default)
    {
      
      var tmp591 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp591.Type == TMessageType.Exception)
      {
        var tmp592 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp592;
      }

      var tmp593 = new InternalStructs.sql_mng_column_result();
      await tmp593.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp593.__isset.@e)
      {
        throw tmp593.E;
      }
    }

    public async global::System.Threading.Tasks.Task<List<Schema>> sql_list_columns(string @sql, CancellationToken cancellationToken = default)
    {
      await send_sql_list_columns(@sql, cancellationToken);
      return await recv_sql_list_columns(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_list_columns(string @sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_list_columns", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp594 = new InternalStructs.sql_list_columns_args() {
        Sql = @sql,
      };
      
      await tmp594.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<Schema>> recv_sql_list_columns(CancellationToken cancellationToken = default)
    {
      
      var tmp595 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp595.Type == TMessageType.Exception)
      {
        var tmp596 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp596;
      }

      var tmp597 = new InternalStructs.sql_list_columns_result();
      await tmp597.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp597.__isset.success)
      {
        return tmp597.Success;
      }
      if (tmp597.__isset.@e)
      {
        throw tmp597.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_list_columns failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<CompactResult>> sql_compact_columns(string @sql, CancellationToken cancellationToken = default)
    {
      await send_sql_compact_columns(@sql, cancellationToken);
      return await recv_sql_compact_columns(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_compact_columns(string @sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_compact_columns", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp598 = new InternalStructs.sql_compact_columns_args() {
        Sql = @sql,
      };
      
      await tmp598.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<CompactResult>> recv_sql_compact_columns(CancellationToken cancellationToken = default)
    {
      
      var tmp599 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp599.Type == TMessageType.Exception)
      {
        var tmp600 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp600;
      }

      var tmp601 = new InternalStructs.sql_compact_columns_result();
      await tmp601.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp601.__isset.success)
      {
        return tmp601.Success;
      }
      if (tmp601.__isset.@e)
      {
        throw tmp601.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_compact_columns failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<CellPlain>> sql_select_plain(string @sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_plain(@sql, cancellationToken);
      return await recv_sql_select_plain(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_plain(string @sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_plain", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp602 = new InternalStructs.sql_select_plain_args() {
        Sql = @sql,
      };
      
      await tmp602.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<CellPlain>> recv_sql_select_plain(CancellationToken cancellationToken = default)
    {
      
      var tmp603 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp603.Type == TMessageType.Exception)
      {
        var tmp604 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp604;
      }

      var tmp605 = new InternalStructs.sql_select_plain_result();
      await tmp605.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp605.__isset.success)
      {
        return tmp605.Success;
      }
      if (tmp605.__isset.@e)
      {
        throw tmp605.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_plain failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<CellCounter>> sql_select_counter(string @sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_counter(@sql, cancellationToken);
      return await recv_sql_select_counter(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_counter(string @sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_counter", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp606 = new InternalStructs.sql_select_counter_args() {
        Sql = @sql,
      };
      
      await tmp606.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<CellCounter>> recv_sql_select_counter(CancellationToken cancellationToken = default)
    {
      
      var tmp607 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp607.Type == TMessageType.Exception)
      {
        var tmp608 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp608;
      }

      var tmp609 = new InternalStructs.sql_select_counter_result();
      await tmp609.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp609.__isset.success)
      {
        return tmp609.Success;
      }
      if (tmp609.__isset.@e)
      {
        throw tmp609.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_counter failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<CellSerial>> sql_select_serial(string @sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_serial(@sql, cancellationToken);
      return await recv_sql_select_serial(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_serial(string @sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_serial", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp610 = new InternalStructs.sql_select_serial_args() {
        Sql = @sql,
      };
      
      await tmp610.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<CellSerial>> recv_sql_select_serial(CancellationToken cancellationToken = default)
    {
      
      var tmp611 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp611.Type == TMessageType.Exception)
      {
        var tmp612 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp612;
      }

      var tmp613 = new InternalStructs.sql_select_serial_result();
      await tmp613.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp613.__isset.success)
      {
        return tmp613.Success;
      }
      if (tmp613.__isset.@e)
      {
        throw tmp613.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_serial failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Cells> sql_select(string @sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select(@sql, cancellationToken);
      return await recv_sql_select(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select(string @sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp614 = new InternalStructs.sql_select_args() {
        Sql = @sql,
      };
      
      await tmp614.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Cells> recv_sql_select(CancellationToken cancellationToken = default)
    {
      
      var tmp615 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp615.Type == TMessageType.Exception)
      {
        var tmp616 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp616;
      }

      var tmp617 = new InternalStructs.sql_select_result();
      await tmp617.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp617.__isset.success)
      {
        return tmp617.Success;
      }
      if (tmp617.__isset.@e)
      {
        throw tmp617.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Dictionary<string, cCells>> sql_select_rslt_on_column(string @sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_rslt_on_column(@sql, cancellationToken);
      return await recv_sql_select_rslt_on_column(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_rslt_on_column(string @sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_column", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp618 = new InternalStructs.sql_select_rslt_on_column_args() {
        Sql = @sql,
      };
      
      await tmp618.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Dictionary<string, cCells>> recv_sql_select_rslt_on_column(CancellationToken cancellationToken = default)
    {
      
      var tmp619 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp619.Type == TMessageType.Exception)
      {
        var tmp620 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp620;
      }

      var tmp621 = new InternalStructs.sql_select_rslt_on_column_result();
      await tmp621.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp621.__isset.success)
      {
        return tmp621.Success;
      }
      if (tmp621.__isset.@e)
      {
        throw tmp621.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_rslt_on_column failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<kCells>> sql_select_rslt_on_key(string @sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_rslt_on_key(@sql, cancellationToken);
      return await recv_sql_select_rslt_on_key(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_rslt_on_key(string @sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_key", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp622 = new InternalStructs.sql_select_rslt_on_key_args() {
        Sql = @sql,
      };
      
      await tmp622.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<kCells>> recv_sql_select_rslt_on_key(CancellationToken cancellationToken = default)
    {
      
      var tmp623 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp623.Type == TMessageType.Exception)
      {
        var tmp624 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp624;
      }

      var tmp625 = new InternalStructs.sql_select_rslt_on_key_result();
      await tmp625.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp625.__isset.success)
      {
        return tmp625.Success;
      }
      if (tmp625.__isset.@e)
      {
        throw tmp625.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_rslt_on_key failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<FCells> sql_select_rslt_on_fraction(string @sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_rslt_on_fraction(@sql, cancellationToken);
      return await recv_sql_select_rslt_on_fraction(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_rslt_on_fraction(string @sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_fraction", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp626 = new InternalStructs.sql_select_rslt_on_fraction_args() {
        Sql = @sql,
      };
      
      await tmp626.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<FCells> recv_sql_select_rslt_on_fraction(CancellationToken cancellationToken = default)
    {
      
      var tmp627 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp627.Type == TMessageType.Exception)
      {
        var tmp628 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp628;
      }

      var tmp629 = new InternalStructs.sql_select_rslt_on_fraction_result();
      await tmp629.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp629.__isset.success)
      {
        return tmp629.Success;
      }
      if (tmp629.__isset.@e)
      {
        throw tmp629.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_rslt_on_fraction failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<CellsGroup> sql_query(string @sql, CellsResult @rslt, CancellationToken cancellationToken = default)
    {
      await send_sql_query(@sql, @rslt, cancellationToken);
      return await recv_sql_query(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_query(string @sql, CellsResult @rslt, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_query", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp630 = new InternalStructs.sql_query_args() {
        Sql = @sql,
        Rslt = @rslt,
      };
      
      await tmp630.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<CellsGroup> recv_sql_query(CancellationToken cancellationToken = default)
    {
      
      var tmp631 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp631.Type == TMessageType.Exception)
      {
        var tmp632 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp632;
      }

      var tmp633 = new InternalStructs.sql_query_result();
      await tmp633.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp633.__isset.success)
      {
        return tmp633.Success;
      }
      if (tmp633.__isset.@e)
      {
        throw tmp633.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_query failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task sql_update(string @sql, long updater_id, CancellationToken cancellationToken = default)
    {
      await send_sql_update(@sql, updater_id, cancellationToken);
      await recv_sql_update(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_update(string @sql, long updater_id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_update", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp634 = new InternalStructs.sql_update_args() {
        Sql = @sql,
        Updater_id = updater_id,
      };
      
      await tmp634.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_sql_update(CancellationToken cancellationToken = default)
    {
      
      var tmp635 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp635.Type == TMessageType.Exception)
      {
        var tmp636 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp636;
      }

      var tmp637 = new InternalStructs.sql_update_result();
      await tmp637.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp637.__isset.@e)
      {
        throw tmp637.E;
      }
    }

    public async global::System.Threading.Tasks.Task<Result> exec_sql(string @sql, CancellationToken cancellationToken = default)
    {
      await send_exec_sql(@sql, cancellationToken);
      return await recv_exec_sql(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_exec_sql(string @sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("exec_sql", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp638 = new InternalStructs.exec_sql_args() {
        Sql = @sql,
      };
      
      await tmp638.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Result> recv_exec_sql(CancellationToken cancellationToken = default)
    {
      
      var tmp639 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp639.Type == TMessageType.Exception)
      {
        var tmp640 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp640;
      }

      var tmp641 = new InternalStructs.exec_sql_result();
      await tmp641.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp641.__isset.success)
      {
        return tmp641.Success;
      }
      if (tmp641.__isset.@e)
      {
        throw tmp641.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exec_sql failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<long> updater_create(int buffer_size, CancellationToken cancellationToken = default)
    {
      await send_updater_create(buffer_size, cancellationToken);
      return await recv_updater_create(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_updater_create(int buffer_size, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("updater_create", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp642 = new InternalStructs.updater_create_args() {
        Buffer_size = buffer_size,
      };
      
      await tmp642.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<long> recv_updater_create(CancellationToken cancellationToken = default)
    {
      
      var tmp643 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp643.Type == TMessageType.Exception)
      {
        var tmp644 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp644;
      }

      var tmp645 = new InternalStructs.updater_create_result();
      await tmp645.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp645.__isset.success)
      {
        return tmp645.Success;
      }
      if (tmp645.__isset.@e)
      {
        throw tmp645.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updater_create failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task updater_close(long @id, CancellationToken cancellationToken = default)
    {
      await send_updater_close(@id, cancellationToken);
      await recv_updater_close(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_updater_close(long @id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("updater_close", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp646 = new InternalStructs.updater_close_args() {
        Id = @id,
      };
      
      await tmp646.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_updater_close(CancellationToken cancellationToken = default)
    {
      
      var tmp647 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp647.Type == TMessageType.Exception)
      {
        var tmp648 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp648;
      }

      var tmp649 = new InternalStructs.updater_close_result();
      await tmp649.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp649.__isset.@e)
      {
        throw tmp649.E;
      }
    }

    public async global::System.Threading.Tasks.Task update_plain(Dictionary<long, List<UCellPlain>> @cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await send_update_plain(@cells, updater_id, cancellationToken);
      await recv_update_plain(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_update_plain(Dictionary<long, List<UCellPlain>> @cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("update_plain", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp650 = new InternalStructs.update_plain_args() {
        Cells = @cells,
        Updater_id = updater_id,
      };
      
      await tmp650.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_update_plain(CancellationToken cancellationToken = default)
    {
      
      var tmp651 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp651.Type == TMessageType.Exception)
      {
        var tmp652 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp652;
      }

      var tmp653 = new InternalStructs.update_plain_result();
      await tmp653.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp653.__isset.@e)
      {
        throw tmp653.E;
      }
    }

    public async global::System.Threading.Tasks.Task update_counter(Dictionary<long, List<UCellCounter>> @cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await send_update_counter(@cells, updater_id, cancellationToken);
      await recv_update_counter(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_update_counter(Dictionary<long, List<UCellCounter>> @cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("update_counter", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp654 = new InternalStructs.update_counter_args() {
        Cells = @cells,
        Updater_id = updater_id,
      };
      
      await tmp654.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_update_counter(CancellationToken cancellationToken = default)
    {
      
      var tmp655 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp655.Type == TMessageType.Exception)
      {
        var tmp656 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp656;
      }

      var tmp657 = new InternalStructs.update_counter_result();
      await tmp657.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp657.__isset.@e)
      {
        throw tmp657.E;
      }
    }

    public async global::System.Threading.Tasks.Task update_serial(Dictionary<long, List<UCellSerial>> @cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await send_update_serial(@cells, updater_id, cancellationToken);
      await recv_update_serial(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_update_serial(Dictionary<long, List<UCellSerial>> @cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("update_serial", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp658 = new InternalStructs.update_serial_args() {
        Cells = @cells,
        Updater_id = updater_id,
      };
      
      await tmp658.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_update_serial(CancellationToken cancellationToken = default)
    {
      
      var tmp659 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp659.Type == TMessageType.Exception)
      {
        var tmp660 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp660;
      }

      var tmp661 = new InternalStructs.update_serial_result();
      await tmp661.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp661.__isset.@e)
      {
        throw tmp661.E;
      }
    }

    public async global::System.Threading.Tasks.Task update_by_types(Dictionary<long, List<UCellPlain>> @plain, Dictionary<long, List<UCellCounter>> @counter, Dictionary<long, List<UCellSerial>> @serial, long updater_id, CancellationToken cancellationToken = default)
    {
      await send_update_by_types(@plain, @counter, @serial, updater_id, cancellationToken);
      await recv_update_by_types(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_update_by_types(Dictionary<long, List<UCellPlain>> @plain, Dictionary<long, List<UCellCounter>> @counter, Dictionary<long, List<UCellSerial>> @serial, long updater_id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("update_by_types", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp662 = new InternalStructs.update_by_types_args() {
        Plain = @plain,
        Counter = @counter,
        Serial = @serial,
        Updater_id = updater_id,
      };
      
      await tmp662.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_update_by_types(CancellationToken cancellationToken = default)
    {
      
      var tmp663 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp663.Type == TMessageType.Exception)
      {
        var tmp664 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp664;
      }

      var tmp665 = new InternalStructs.update_by_types_result();
      await tmp665.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp665.__isset.@e)
      {
        throw tmp665.E;
      }
    }

    public async global::System.Threading.Tasks.Task mng_column(SchemaFunc @func, Schema @schema, CancellationToken cancellationToken = default)
    {
      await send_mng_column(@func, @schema, cancellationToken);
      await recv_mng_column(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_mng_column(SchemaFunc @func, Schema @schema, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("mng_column", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp666 = new InternalStructs.mng_column_args() {
        Func = @func,
        Schema = @schema,
      };
      
      await tmp666.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_mng_column(CancellationToken cancellationToken = default)
    {
      
      var tmp667 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp667.Type == TMessageType.Exception)
      {
        var tmp668 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp668;
      }

      var tmp669 = new InternalStructs.mng_column_result();
      await tmp669.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp669.__isset.@e)
      {
        throw tmp669.E;
      }
    }

    public async global::System.Threading.Tasks.Task<List<Schema>> list_columns(SpecSchemas @spec, CancellationToken cancellationToken = default)
    {
      await send_list_columns(@spec, cancellationToken);
      return await recv_list_columns(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_list_columns(SpecSchemas @spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("list_columns", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp670 = new InternalStructs.list_columns_args() {
        Spec = @spec,
      };
      
      await tmp670.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<Schema>> recv_list_columns(CancellationToken cancellationToken = default)
    {
      
      var tmp671 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp671.Type == TMessageType.Exception)
      {
        var tmp672 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp672;
      }

      var tmp673 = new InternalStructs.list_columns_result();
      await tmp673.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp673.__isset.success)
      {
        return tmp673.Success;
      }
      if (tmp673.__isset.@e)
      {
        throw tmp673.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "list_columns failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<CompactResult>> compact_columns(SpecSchemas @spec, CancellationToken cancellationToken = default)
    {
      await send_compact_columns(@spec, cancellationToken);
      return await recv_compact_columns(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_compact_columns(SpecSchemas @spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("compact_columns", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp674 = new InternalStructs.compact_columns_args() {
        Spec = @spec,
      };
      
      await tmp674.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<CompactResult>> recv_compact_columns(CancellationToken cancellationToken = default)
    {
      
      var tmp675 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp675.Type == TMessageType.Exception)
      {
        var tmp676 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp676;
      }

      var tmp677 = new InternalStructs.compact_columns_result();
      await tmp677.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp677.__isset.success)
      {
        return tmp677.Success;
      }
      if (tmp677.__isset.@e)
      {
        throw tmp677.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "compact_columns failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Cells> @scan(SpecScan @spec, CancellationToken cancellationToken = default)
    {
      await send_scan(@spec, cancellationToken);
      return await recv_scan(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan(SpecScan @spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp678 = new InternalStructs.scan_args() {
        Spec = @spec,
      };
      
      await tmp678.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Cells> recv_scan(CancellationToken cancellationToken = default)
    {
      
      var tmp679 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp679.Type == TMessageType.Exception)
      {
        var tmp680 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp680;
      }

      var tmp681 = new InternalStructs.scan_result();
      await tmp681.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp681.__isset.success)
      {
        return tmp681.Success;
      }
      if (tmp681.__isset.@e)
      {
        throw tmp681.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Dictionary<string, cCells>> scan_rslt_on_column(SpecScan @spec, CancellationToken cancellationToken = default)
    {
      await send_scan_rslt_on_column(@spec, cancellationToken);
      return await recv_scan_rslt_on_column(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan_rslt_on_column(SpecScan @spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan_rslt_on_column", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp682 = new InternalStructs.scan_rslt_on_column_args() {
        Spec = @spec,
      };
      
      await tmp682.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Dictionary<string, cCells>> recv_scan_rslt_on_column(CancellationToken cancellationToken = default)
    {
      
      var tmp683 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp683.Type == TMessageType.Exception)
      {
        var tmp684 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp684;
      }

      var tmp685 = new InternalStructs.scan_rslt_on_column_result();
      await tmp685.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp685.__isset.success)
      {
        return tmp685.Success;
      }
      if (tmp685.__isset.@e)
      {
        throw tmp685.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan_rslt_on_column failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<kCells>> scan_rslt_on_key(SpecScan @spec, CancellationToken cancellationToken = default)
    {
      await send_scan_rslt_on_key(@spec, cancellationToken);
      return await recv_scan_rslt_on_key(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan_rslt_on_key(SpecScan @spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan_rslt_on_key", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp686 = new InternalStructs.scan_rslt_on_key_args() {
        Spec = @spec,
      };
      
      await tmp686.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<kCells>> recv_scan_rslt_on_key(CancellationToken cancellationToken = default)
    {
      
      var tmp687 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp687.Type == TMessageType.Exception)
      {
        var tmp688 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp688;
      }

      var tmp689 = new InternalStructs.scan_rslt_on_key_result();
      await tmp689.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp689.__isset.success)
      {
        return tmp689.Success;
      }
      if (tmp689.__isset.@e)
      {
        throw tmp689.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan_rslt_on_key failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<FCells> scan_rslt_on_fraction(SpecScan @spec, CancellationToken cancellationToken = default)
    {
      await send_scan_rslt_on_fraction(@spec, cancellationToken);
      return await recv_scan_rslt_on_fraction(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan_rslt_on_fraction(SpecScan @spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan_rslt_on_fraction", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp690 = new InternalStructs.scan_rslt_on_fraction_args() {
        Spec = @spec,
      };
      
      await tmp690.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<FCells> recv_scan_rslt_on_fraction(CancellationToken cancellationToken = default)
    {
      
      var tmp691 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp691.Type == TMessageType.Exception)
      {
        var tmp692 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp692;
      }

      var tmp693 = new InternalStructs.scan_rslt_on_fraction_result();
      await tmp693.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp693.__isset.success)
      {
        return tmp693.Success;
      }
      if (tmp693.__isset.@e)
      {
        throw tmp693.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan_rslt_on_fraction failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<CellsGroup> scan_rslt_on(SpecScan @spec, CellsResult @rslt, CancellationToken cancellationToken = default)
    {
      await send_scan_rslt_on(@spec, @rslt, cancellationToken);
      return await recv_scan_rslt_on(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan_rslt_on(SpecScan @spec, CellsResult @rslt, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan_rslt_on", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp694 = new InternalStructs.scan_rslt_on_args() {
        Spec = @spec,
        Rslt = @rslt,
      };
      
      await tmp694.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<CellsGroup> recv_scan_rslt_on(CancellationToken cancellationToken = default)
    {
      
      var tmp695 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp695.Type == TMessageType.Exception)
      {
        var tmp696 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp696;
      }

      var tmp697 = new InternalStructs.scan_rslt_on_result();
      await tmp697.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp697.__isset.success)
      {
        return tmp697.Success;
      }
      if (tmp697.__isset.@e)
      {
        throw tmp697.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan_rslt_on failed: unknown result");
    }

  }

  public class AsyncProcessor : ITAsyncProcessor
  {
    private readonly IAsync _iAsync;
    private readonly ILogger<AsyncProcessor> _logger;

    public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
    {
      _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
      _logger = logger;
      processMap_["sql_mng_column"] = sql_mng_column_ProcessAsync;
      processMap_["sql_list_columns"] = sql_list_columns_ProcessAsync;
      processMap_["sql_compact_columns"] = sql_compact_columns_ProcessAsync;
      processMap_["sql_select_plain"] = sql_select_plain_ProcessAsync;
      processMap_["sql_select_counter"] = sql_select_counter_ProcessAsync;
      processMap_["sql_select_serial"] = sql_select_serial_ProcessAsync;
      processMap_["sql_select"] = sql_select_ProcessAsync;
      processMap_["sql_select_rslt_on_column"] = sql_select_rslt_on_column_ProcessAsync;
      processMap_["sql_select_rslt_on_key"] = sql_select_rslt_on_key_ProcessAsync;
      processMap_["sql_select_rslt_on_fraction"] = sql_select_rslt_on_fraction_ProcessAsync;
      processMap_["sql_query"] = sql_query_ProcessAsync;
      processMap_["sql_update"] = sql_update_ProcessAsync;
      processMap_["exec_sql"] = exec_sql_ProcessAsync;
      processMap_["updater_create"] = updater_create_ProcessAsync;
      processMap_["updater_close"] = updater_close_ProcessAsync;
      processMap_["update_plain"] = update_plain_ProcessAsync;
      processMap_["update_counter"] = update_counter_ProcessAsync;
      processMap_["update_serial"] = update_serial_ProcessAsync;
      processMap_["update_by_types"] = update_by_types_ProcessAsync;
      processMap_["mng_column"] = mng_column_ProcessAsync;
      processMap_["list_columns"] = list_columns_ProcessAsync;
      processMap_["compact_columns"] = compact_columns_ProcessAsync;
      processMap_["scan"] = scan_ProcessAsync;
      processMap_["scan_rslt_on_column"] = scan_rslt_on_column_ProcessAsync;
      processMap_["scan_rslt_on_key"] = scan_rslt_on_key_ProcessAsync;
      processMap_["scan_rslt_on_fraction"] = scan_rslt_on_fraction_ProcessAsync;
      processMap_["scan_rslt_on"] = scan_rslt_on_ProcessAsync;
    }

    protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
    {
      return await ProcessAsync(iprot, oprot, CancellationToken.None);
    }

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      try
      {
        var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

        processMap_.TryGetValue(msg.Name, out var fn);

        if (fn == null)
        {
          await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
          await iprot.ReadMessageEndAsync(cancellationToken);
          var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
          await oprot.WriteMessageEndAsync(cancellationToken);
          await oprot.Transport.FlushAsync(cancellationToken);
          return true;
        }

        await fn(msg.SeqID, iprot, oprot, cancellationToken);

      }
      catch (IOException)
      {
        return false;
      }

      return true;
    }

    public async global::System.Threading.Tasks.Task sql_mng_column_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp698 = new InternalStructs.sql_mng_column_args();
      await tmp698.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp699 = new InternalStructs.sql_mng_column_result();
      try
      {
        try
        {
          await _iAsync.sql_mng_column(tmp698.Sql, cancellationToken);
        }
        catch (Exception tmp700)
        {
          tmp699.E = tmp700;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_mng_column", TMessageType.Reply, seqid), cancellationToken); 
        await tmp699.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp701)
      {
        var tmp702 = $"Error occurred in {GetType().FullName}: {tmp701.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp701, tmp702);
        else
          Console.Error.WriteLine(tmp702);
        var tmp703 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_mng_column", TMessageType.Exception, seqid), cancellationToken);
        await tmp703.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_list_columns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp704 = new InternalStructs.sql_list_columns_args();
      await tmp704.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp705 = new InternalStructs.sql_list_columns_result();
      try
      {
        try
        {
          tmp705.Success = await _iAsync.sql_list_columns(tmp704.Sql, cancellationToken);
        }
        catch (Exception tmp706)
        {
          tmp705.E = tmp706;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_list_columns", TMessageType.Reply, seqid), cancellationToken); 
        await tmp705.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp707)
      {
        var tmp708 = $"Error occurred in {GetType().FullName}: {tmp707.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp707, tmp708);
        else
          Console.Error.WriteLine(tmp708);
        var tmp709 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_list_columns", TMessageType.Exception, seqid), cancellationToken);
        await tmp709.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_compact_columns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp710 = new InternalStructs.sql_compact_columns_args();
      await tmp710.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp711 = new InternalStructs.sql_compact_columns_result();
      try
      {
        try
        {
          tmp711.Success = await _iAsync.sql_compact_columns(tmp710.Sql, cancellationToken);
        }
        catch (Exception tmp712)
        {
          tmp711.E = tmp712;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_compact_columns", TMessageType.Reply, seqid), cancellationToken); 
        await tmp711.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp713)
      {
        var tmp714 = $"Error occurred in {GetType().FullName}: {tmp713.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp713, tmp714);
        else
          Console.Error.WriteLine(tmp714);
        var tmp715 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_compact_columns", TMessageType.Exception, seqid), cancellationToken);
        await tmp715.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_plain_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp716 = new InternalStructs.sql_select_plain_args();
      await tmp716.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp717 = new InternalStructs.sql_select_plain_result();
      try
      {
        try
        {
          tmp717.Success = await _iAsync.sql_select_plain(tmp716.Sql, cancellationToken);
        }
        catch (Exception tmp718)
        {
          tmp717.E = tmp718;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_plain", TMessageType.Reply, seqid), cancellationToken); 
        await tmp717.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp719)
      {
        var tmp720 = $"Error occurred in {GetType().FullName}: {tmp719.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp719, tmp720);
        else
          Console.Error.WriteLine(tmp720);
        var tmp721 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_plain", TMessageType.Exception, seqid), cancellationToken);
        await tmp721.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_counter_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp722 = new InternalStructs.sql_select_counter_args();
      await tmp722.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp723 = new InternalStructs.sql_select_counter_result();
      try
      {
        try
        {
          tmp723.Success = await _iAsync.sql_select_counter(tmp722.Sql, cancellationToken);
        }
        catch (Exception tmp724)
        {
          tmp723.E = tmp724;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_counter", TMessageType.Reply, seqid), cancellationToken); 
        await tmp723.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp725)
      {
        var tmp726 = $"Error occurred in {GetType().FullName}: {tmp725.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp725, tmp726);
        else
          Console.Error.WriteLine(tmp726);
        var tmp727 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_counter", TMessageType.Exception, seqid), cancellationToken);
        await tmp727.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_serial_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp728 = new InternalStructs.sql_select_serial_args();
      await tmp728.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp729 = new InternalStructs.sql_select_serial_result();
      try
      {
        try
        {
          tmp729.Success = await _iAsync.sql_select_serial(tmp728.Sql, cancellationToken);
        }
        catch (Exception tmp730)
        {
          tmp729.E = tmp730;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_serial", TMessageType.Reply, seqid), cancellationToken); 
        await tmp729.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp731)
      {
        var tmp732 = $"Error occurred in {GetType().FullName}: {tmp731.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp731, tmp732);
        else
          Console.Error.WriteLine(tmp732);
        var tmp733 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_serial", TMessageType.Exception, seqid), cancellationToken);
        await tmp733.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp734 = new InternalStructs.sql_select_args();
      await tmp734.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp735 = new InternalStructs.sql_select_result();
      try
      {
        try
        {
          tmp735.Success = await _iAsync.sql_select(tmp734.Sql, cancellationToken);
        }
        catch (Exception tmp736)
        {
          tmp735.E = tmp736;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select", TMessageType.Reply, seqid), cancellationToken); 
        await tmp735.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp737)
      {
        var tmp738 = $"Error occurred in {GetType().FullName}: {tmp737.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp737, tmp738);
        else
          Console.Error.WriteLine(tmp738);
        var tmp739 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select", TMessageType.Exception, seqid), cancellationToken);
        await tmp739.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_rslt_on_column_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp740 = new InternalStructs.sql_select_rslt_on_column_args();
      await tmp740.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp741 = new InternalStructs.sql_select_rslt_on_column_result();
      try
      {
        try
        {
          tmp741.Success = await _iAsync.sql_select_rslt_on_column(tmp740.Sql, cancellationToken);
        }
        catch (Exception tmp742)
        {
          tmp741.E = tmp742;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_column", TMessageType.Reply, seqid), cancellationToken); 
        await tmp741.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp743)
      {
        var tmp744 = $"Error occurred in {GetType().FullName}: {tmp743.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp743, tmp744);
        else
          Console.Error.WriteLine(tmp744);
        var tmp745 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_column", TMessageType.Exception, seqid), cancellationToken);
        await tmp745.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_rslt_on_key_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp746 = new InternalStructs.sql_select_rslt_on_key_args();
      await tmp746.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp747 = new InternalStructs.sql_select_rslt_on_key_result();
      try
      {
        try
        {
          tmp747.Success = await _iAsync.sql_select_rslt_on_key(tmp746.Sql, cancellationToken);
        }
        catch (Exception tmp748)
        {
          tmp747.E = tmp748;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_key", TMessageType.Reply, seqid), cancellationToken); 
        await tmp747.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp749)
      {
        var tmp750 = $"Error occurred in {GetType().FullName}: {tmp749.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp749, tmp750);
        else
          Console.Error.WriteLine(tmp750);
        var tmp751 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_key", TMessageType.Exception, seqid), cancellationToken);
        await tmp751.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_rslt_on_fraction_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp752 = new InternalStructs.sql_select_rslt_on_fraction_args();
      await tmp752.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp753 = new InternalStructs.sql_select_rslt_on_fraction_result();
      try
      {
        try
        {
          tmp753.Success = await _iAsync.sql_select_rslt_on_fraction(tmp752.Sql, cancellationToken);
        }
        catch (Exception tmp754)
        {
          tmp753.E = tmp754;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_fraction", TMessageType.Reply, seqid), cancellationToken); 
        await tmp753.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp755)
      {
        var tmp756 = $"Error occurred in {GetType().FullName}: {tmp755.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp755, tmp756);
        else
          Console.Error.WriteLine(tmp756);
        var tmp757 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_fraction", TMessageType.Exception, seqid), cancellationToken);
        await tmp757.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_query_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp758 = new InternalStructs.sql_query_args();
      await tmp758.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp759 = new InternalStructs.sql_query_result();
      try
      {
        try
        {
          tmp759.Success = await _iAsync.sql_query(tmp758.Sql, tmp758.Rslt, cancellationToken);
        }
        catch (Exception tmp760)
        {
          tmp759.E = tmp760;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_query", TMessageType.Reply, seqid), cancellationToken); 
        await tmp759.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp761)
      {
        var tmp762 = $"Error occurred in {GetType().FullName}: {tmp761.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp761, tmp762);
        else
          Console.Error.WriteLine(tmp762);
        var tmp763 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_query", TMessageType.Exception, seqid), cancellationToken);
        await tmp763.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_update_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp764 = new InternalStructs.sql_update_args();
      await tmp764.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp765 = new InternalStructs.sql_update_result();
      try
      {
        try
        {
          await _iAsync.sql_update(tmp764.Sql, tmp764.Updater_id, cancellationToken);
        }
        catch (Exception tmp766)
        {
          tmp765.E = tmp766;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_update", TMessageType.Reply, seqid), cancellationToken); 
        await tmp765.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp767)
      {
        var tmp768 = $"Error occurred in {GetType().FullName}: {tmp767.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp767, tmp768);
        else
          Console.Error.WriteLine(tmp768);
        var tmp769 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_update", TMessageType.Exception, seqid), cancellationToken);
        await tmp769.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task exec_sql_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp770 = new InternalStructs.exec_sql_args();
      await tmp770.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp771 = new InternalStructs.exec_sql_result();
      try
      {
        try
        {
          tmp771.Success = await _iAsync.exec_sql(tmp770.Sql, cancellationToken);
        }
        catch (Exception tmp772)
        {
          tmp771.E = tmp772;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("exec_sql", TMessageType.Reply, seqid), cancellationToken); 
        await tmp771.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp773)
      {
        var tmp774 = $"Error occurred in {GetType().FullName}: {tmp773.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp773, tmp774);
        else
          Console.Error.WriteLine(tmp774);
        var tmp775 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("exec_sql", TMessageType.Exception, seqid), cancellationToken);
        await tmp775.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task updater_create_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp776 = new InternalStructs.updater_create_args();
      await tmp776.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp777 = new InternalStructs.updater_create_result();
      try
      {
        try
        {
          tmp777.Success = await _iAsync.updater_create(tmp776.Buffer_size, cancellationToken);
        }
        catch (Exception tmp778)
        {
          tmp777.E = tmp778;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("updater_create", TMessageType.Reply, seqid), cancellationToken); 
        await tmp777.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp779)
      {
        var tmp780 = $"Error occurred in {GetType().FullName}: {tmp779.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp779, tmp780);
        else
          Console.Error.WriteLine(tmp780);
        var tmp781 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("updater_create", TMessageType.Exception, seqid), cancellationToken);
        await tmp781.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task updater_close_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp782 = new InternalStructs.updater_close_args();
      await tmp782.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp783 = new InternalStructs.updater_close_result();
      try
      {
        try
        {
          await _iAsync.updater_close(tmp782.Id, cancellationToken);
        }
        catch (Exception tmp784)
        {
          tmp783.E = tmp784;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("updater_close", TMessageType.Reply, seqid), cancellationToken); 
        await tmp783.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp785)
      {
        var tmp786 = $"Error occurred in {GetType().FullName}: {tmp785.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp785, tmp786);
        else
          Console.Error.WriteLine(tmp786);
        var tmp787 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("updater_close", TMessageType.Exception, seqid), cancellationToken);
        await tmp787.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task update_plain_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp788 = new InternalStructs.update_plain_args();
      await tmp788.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp789 = new InternalStructs.update_plain_result();
      try
      {
        try
        {
          await _iAsync.update_plain(tmp788.Cells, tmp788.Updater_id, cancellationToken);
        }
        catch (Exception tmp790)
        {
          tmp789.E = tmp790;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("update_plain", TMessageType.Reply, seqid), cancellationToken); 
        await tmp789.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp791)
      {
        var tmp792 = $"Error occurred in {GetType().FullName}: {tmp791.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp791, tmp792);
        else
          Console.Error.WriteLine(tmp792);
        var tmp793 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("update_plain", TMessageType.Exception, seqid), cancellationToken);
        await tmp793.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task update_counter_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp794 = new InternalStructs.update_counter_args();
      await tmp794.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp795 = new InternalStructs.update_counter_result();
      try
      {
        try
        {
          await _iAsync.update_counter(tmp794.Cells, tmp794.Updater_id, cancellationToken);
        }
        catch (Exception tmp796)
        {
          tmp795.E = tmp796;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("update_counter", TMessageType.Reply, seqid), cancellationToken); 
        await tmp795.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp797)
      {
        var tmp798 = $"Error occurred in {GetType().FullName}: {tmp797.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp797, tmp798);
        else
          Console.Error.WriteLine(tmp798);
        var tmp799 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("update_counter", TMessageType.Exception, seqid), cancellationToken);
        await tmp799.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task update_serial_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp800 = new InternalStructs.update_serial_args();
      await tmp800.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp801 = new InternalStructs.update_serial_result();
      try
      {
        try
        {
          await _iAsync.update_serial(tmp800.Cells, tmp800.Updater_id, cancellationToken);
        }
        catch (Exception tmp802)
        {
          tmp801.E = tmp802;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("update_serial", TMessageType.Reply, seqid), cancellationToken); 
        await tmp801.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp803)
      {
        var tmp804 = $"Error occurred in {GetType().FullName}: {tmp803.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp803, tmp804);
        else
          Console.Error.WriteLine(tmp804);
        var tmp805 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("update_serial", TMessageType.Exception, seqid), cancellationToken);
        await tmp805.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task update_by_types_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp806 = new InternalStructs.update_by_types_args();
      await tmp806.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp807 = new InternalStructs.update_by_types_result();
      try
      {
        try
        {
          await _iAsync.update_by_types(tmp806.Plain, tmp806.Counter, tmp806.Serial, tmp806.Updater_id, cancellationToken);
        }
        catch (Exception tmp808)
        {
          tmp807.E = tmp808;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("update_by_types", TMessageType.Reply, seqid), cancellationToken); 
        await tmp807.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp809)
      {
        var tmp810 = $"Error occurred in {GetType().FullName}: {tmp809.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp809, tmp810);
        else
          Console.Error.WriteLine(tmp810);
        var tmp811 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("update_by_types", TMessageType.Exception, seqid), cancellationToken);
        await tmp811.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task mng_column_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp812 = new InternalStructs.mng_column_args();
      await tmp812.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp813 = new InternalStructs.mng_column_result();
      try
      {
        try
        {
          await _iAsync.mng_column(tmp812.Func, tmp812.Schema, cancellationToken);
        }
        catch (Exception tmp814)
        {
          tmp813.E = tmp814;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("mng_column", TMessageType.Reply, seqid), cancellationToken); 
        await tmp813.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp815)
      {
        var tmp816 = $"Error occurred in {GetType().FullName}: {tmp815.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp815, tmp816);
        else
          Console.Error.WriteLine(tmp816);
        var tmp817 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("mng_column", TMessageType.Exception, seqid), cancellationToken);
        await tmp817.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task list_columns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp818 = new InternalStructs.list_columns_args();
      await tmp818.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp819 = new InternalStructs.list_columns_result();
      try
      {
        try
        {
          tmp819.Success = await _iAsync.list_columns(tmp818.Spec, cancellationToken);
        }
        catch (Exception tmp820)
        {
          tmp819.E = tmp820;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("list_columns", TMessageType.Reply, seqid), cancellationToken); 
        await tmp819.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp821)
      {
        var tmp822 = $"Error occurred in {GetType().FullName}: {tmp821.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp821, tmp822);
        else
          Console.Error.WriteLine(tmp822);
        var tmp823 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("list_columns", TMessageType.Exception, seqid), cancellationToken);
        await tmp823.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task compact_columns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp824 = new InternalStructs.compact_columns_args();
      await tmp824.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp825 = new InternalStructs.compact_columns_result();
      try
      {
        try
        {
          tmp825.Success = await _iAsync.compact_columns(tmp824.Spec, cancellationToken);
        }
        catch (Exception tmp826)
        {
          tmp825.E = tmp826;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("compact_columns", TMessageType.Reply, seqid), cancellationToken); 
        await tmp825.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp827)
      {
        var tmp828 = $"Error occurred in {GetType().FullName}: {tmp827.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp827, tmp828);
        else
          Console.Error.WriteLine(tmp828);
        var tmp829 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("compact_columns", TMessageType.Exception, seqid), cancellationToken);
        await tmp829.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp830 = new InternalStructs.scan_args();
      await tmp830.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp831 = new InternalStructs.scan_result();
      try
      {
        try
        {
          tmp831.Success = await _iAsync.@scan(tmp830.Spec, cancellationToken);
        }
        catch (Exception tmp832)
        {
          tmp831.E = tmp832;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan", TMessageType.Reply, seqid), cancellationToken); 
        await tmp831.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp833)
      {
        var tmp834 = $"Error occurred in {GetType().FullName}: {tmp833.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp833, tmp834);
        else
          Console.Error.WriteLine(tmp834);
        var tmp835 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan", TMessageType.Exception, seqid), cancellationToken);
        await tmp835.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_rslt_on_column_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp836 = new InternalStructs.scan_rslt_on_column_args();
      await tmp836.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp837 = new InternalStructs.scan_rslt_on_column_result();
      try
      {
        try
        {
          tmp837.Success = await _iAsync.scan_rslt_on_column(tmp836.Spec, cancellationToken);
        }
        catch (Exception tmp838)
        {
          tmp837.E = tmp838;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_column", TMessageType.Reply, seqid), cancellationToken); 
        await tmp837.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp839)
      {
        var tmp840 = $"Error occurred in {GetType().FullName}: {tmp839.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp839, tmp840);
        else
          Console.Error.WriteLine(tmp840);
        var tmp841 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_column", TMessageType.Exception, seqid), cancellationToken);
        await tmp841.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_rslt_on_key_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp842 = new InternalStructs.scan_rslt_on_key_args();
      await tmp842.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp843 = new InternalStructs.scan_rslt_on_key_result();
      try
      {
        try
        {
          tmp843.Success = await _iAsync.scan_rslt_on_key(tmp842.Spec, cancellationToken);
        }
        catch (Exception tmp844)
        {
          tmp843.E = tmp844;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_key", TMessageType.Reply, seqid), cancellationToken); 
        await tmp843.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp845)
      {
        var tmp846 = $"Error occurred in {GetType().FullName}: {tmp845.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp845, tmp846);
        else
          Console.Error.WriteLine(tmp846);
        var tmp847 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_key", TMessageType.Exception, seqid), cancellationToken);
        await tmp847.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_rslt_on_fraction_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp848 = new InternalStructs.scan_rslt_on_fraction_args();
      await tmp848.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp849 = new InternalStructs.scan_rslt_on_fraction_result();
      try
      {
        try
        {
          tmp849.Success = await _iAsync.scan_rslt_on_fraction(tmp848.Spec, cancellationToken);
        }
        catch (Exception tmp850)
        {
          tmp849.E = tmp850;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_fraction", TMessageType.Reply, seqid), cancellationToken); 
        await tmp849.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp851)
      {
        var tmp852 = $"Error occurred in {GetType().FullName}: {tmp851.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp851, tmp852);
        else
          Console.Error.WriteLine(tmp852);
        var tmp853 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_fraction", TMessageType.Exception, seqid), cancellationToken);
        await tmp853.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_rslt_on_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp854 = new InternalStructs.scan_rslt_on_args();
      await tmp854.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp855 = new InternalStructs.scan_rslt_on_result();
      try
      {
        try
        {
          tmp855.Success = await _iAsync.scan_rslt_on(tmp854.Spec, tmp854.Rslt, cancellationToken);
        }
        catch (Exception tmp856)
        {
          tmp855.E = tmp856;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on", TMessageType.Reply, seqid), cancellationToken); 
        await tmp855.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp857)
      {
        var tmp858 = $"Error occurred in {GetType().FullName}: {tmp857.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp857, tmp858);
        else
          Console.Error.WriteLine(tmp858);
        var tmp859 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on", TMessageType.Exception, seqid), cancellationToken);
        await tmp859.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

  }

  public class InternalStructs
  {

    public partial class sql_mng_column_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.@sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @sql;
      }

      public sql_mng_column_args()
      {
      }

      public sql_mng_column_args DeepCopy()
      {
        var tmp860 = new sql_mng_column_args()
        if((Sql != null) && __isset.@sql)
        {
          tmp860.Sql = this.Sql;
        }
        tmp860.__isset.@sql = this.__isset.@sql;
        return tmp860;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp861 = new TStruct("sql_mng_column_args");
          await oprot.WriteStructBeginAsync(tmp861, cancellationToken);
          var tmp862 = new TField();
          if((Sql != null) && __isset.@sql)
          {
            tmp862.Name = "sql";
            tmp862.Type = TType.String;
            tmp862.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp862, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_mng_column_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@sql == other.__isset.@sql) && ((!__isset.@sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.@sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp863 = new StringBuilder("sql_mng_column_args(");
        int tmp864 = 0;
        if((Sql != null) && __isset.@sql)
        {
          if(0 < tmp864++) { tmp863.Append(", "); }
          tmp863.Append("Sql: ");
          Sql.ToString(tmp863);
        }
        tmp863.Append(')');
        return tmp863.ToString();
      }
    }


    public partial class sql_mng_column_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.@e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @e;
      }

      public sql_mng_column_result()
      {
      }

      public sql_mng_column_result DeepCopy()
      {
        var tmp865 = new sql_mng_column_result()
        if((E != null) && __isset.@e)
        {
          tmp865.E = (Exception)this.E.DeepCopy();
        }
        tmp865.__isset.@e = this.__isset.@e;
        return tmp865;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp866 = new TStruct("sql_mng_column_result");
          await oprot.WriteStructBeginAsync(tmp866, cancellationToken);
          var tmp867 = new TField();

          if(this.__isset.@e)
          {
            if (E != null)
            {
              tmp867.Name = "E";
              tmp867.Type = TType.Struct;
              tmp867.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp867, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_mng_column_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.@e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp868 = new StringBuilder("sql_mng_column_result(");
        int tmp869 = 0;
        if((E != null) && __isset.@e)
        {
          if(0 < tmp869++) { tmp868.Append(", "); }
          tmp868.Append("E: ");
          E.ToString(tmp868);
        }
        tmp868.Append(')');
        return tmp868.ToString();
      }
    }


    public partial class sql_list_columns_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.@sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @sql;
      }

      public sql_list_columns_args()
      {
      }

      public sql_list_columns_args DeepCopy()
      {
        var tmp870 = new sql_list_columns_args()
        if((Sql != null) && __isset.@sql)
        {
          tmp870.Sql = this.Sql;
        }
        tmp870.__isset.@sql = this.__isset.@sql;
        return tmp870;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp871 = new TStruct("sql_list_columns_args");
          await oprot.WriteStructBeginAsync(tmp871, cancellationToken);
          var tmp872 = new TField();
          if((Sql != null) && __isset.@sql)
          {
            tmp872.Name = "sql";
            tmp872.Type = TType.String;
            tmp872.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp872, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_list_columns_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@sql == other.__isset.@sql) && ((!__isset.@sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.@sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp873 = new StringBuilder("sql_list_columns_args(");
        int tmp874 = 0;
        if((Sql != null) && __isset.@sql)
        {
          if(0 < tmp874++) { tmp873.Append(", "); }
          tmp873.Append("Sql: ");
          Sql.ToString(tmp873);
        }
        tmp873.Append(')');
        return tmp873.ToString();
      }
    }


    public partial class sql_list_columns_result : TBase
    {
      private List<Schema> _success;
      private Exception _e;

      public List<Schema> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.@e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
        public bool @e;
      }

      public sql_list_columns_result()
      {
      }

      public sql_list_columns_result DeepCopy()
      {
        var tmp875 = new sql_list_columns_result()
        if((Success != null) && __isset.@success)
        {
          tmp875.Success = this.Success.DeepCopy();
        }
        tmp875.__isset.@success = this.__isset.@success;
        if((E != null) && __isset.@e)
        {
          tmp875.E = (Exception)this.E.DeepCopy();
        }
        tmp875.__isset.@e = this.__isset.@e;
        return tmp875;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list876 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<Schema>(_list876.Count);
                    for(int _i877 = 0; _i877 < _list876.Count; ++_i877)
                    {
                      Schema _elem878;
                      _elem878 = new Schema();
                      await _elem878.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem878);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp879 = new TStruct("sql_list_columns_result");
          await oprot.WriteStructBeginAsync(tmp879, cancellationToken);
          var tmp880 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp880.Name = "Success";
              tmp880.Type = TType.List;
              tmp880.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp880, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (Schema _iter881 in Success)
              {
                await _iter881.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.@e)
          {
            if (E != null)
            {
              tmp880.Name = "E";
              tmp880.Type = TType.Struct;
              tmp880.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp880, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_list_columns_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.@e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp882 = new StringBuilder("sql_list_columns_result(");
        int tmp883 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp883++) { tmp882.Append(", "); }
          tmp882.Append("Success: ");
          Success.ToString(tmp882);
        }
        if((E != null) && __isset.@e)
        {
          if(0 < tmp883++) { tmp882.Append(", "); }
          tmp882.Append("E: ");
          E.ToString(tmp882);
        }
        tmp882.Append(')');
        return tmp882.ToString();
      }
    }


    public partial class sql_compact_columns_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.@sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @sql;
      }

      public sql_compact_columns_args()
      {
      }

      public sql_compact_columns_args DeepCopy()
      {
        var tmp884 = new sql_compact_columns_args()
        if((Sql != null) && __isset.@sql)
        {
          tmp884.Sql = this.Sql;
        }
        tmp884.__isset.@sql = this.__isset.@sql;
        return tmp884;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp885 = new TStruct("sql_compact_columns_args");
          await oprot.WriteStructBeginAsync(tmp885, cancellationToken);
          var tmp886 = new TField();
          if((Sql != null) && __isset.@sql)
          {
            tmp886.Name = "sql";
            tmp886.Type = TType.String;
            tmp886.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp886, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_compact_columns_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@sql == other.__isset.@sql) && ((!__isset.@sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.@sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp887 = new StringBuilder("sql_compact_columns_args(");
        int tmp888 = 0;
        if((Sql != null) && __isset.@sql)
        {
          if(0 < tmp888++) { tmp887.Append(", "); }
          tmp887.Append("Sql: ");
          Sql.ToString(tmp887);
        }
        tmp887.Append(')');
        return tmp887.ToString();
      }
    }


    public partial class sql_compact_columns_result : TBase
    {
      private List<CompactResult> _success;
      private Exception _e;

      public List<CompactResult> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.@e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
        public bool @e;
      }

      public sql_compact_columns_result()
      {
      }

      public sql_compact_columns_result DeepCopy()
      {
        var tmp889 = new sql_compact_columns_result()
        if((Success != null) && __isset.@success)
        {
          tmp889.Success = this.Success.DeepCopy();
        }
        tmp889.__isset.@success = this.__isset.@success;
        if((E != null) && __isset.@e)
        {
          tmp889.E = (Exception)this.E.DeepCopy();
        }
        tmp889.__isset.@e = this.__isset.@e;
        return tmp889;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list890 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<CompactResult>(_list890.Count);
                    for(int _i891 = 0; _i891 < _list890.Count; ++_i891)
                    {
                      CompactResult _elem892;
                      _elem892 = new CompactResult();
                      await _elem892.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem892);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp893 = new TStruct("sql_compact_columns_result");
          await oprot.WriteStructBeginAsync(tmp893, cancellationToken);
          var tmp894 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp894.Name = "Success";
              tmp894.Type = TType.List;
              tmp894.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp894, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (CompactResult _iter895 in Success)
              {
                await _iter895.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.@e)
          {
            if (E != null)
            {
              tmp894.Name = "E";
              tmp894.Type = TType.Struct;
              tmp894.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp894, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_compact_columns_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.@e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp896 = new StringBuilder("sql_compact_columns_result(");
        int tmp897 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp897++) { tmp896.Append(", "); }
          tmp896.Append("Success: ");
          Success.ToString(tmp896);
        }
        if((E != null) && __isset.@e)
        {
          if(0 < tmp897++) { tmp896.Append(", "); }
          tmp896.Append("E: ");
          E.ToString(tmp896);
        }
        tmp896.Append(')');
        return tmp896.ToString();
      }
    }


    public partial class sql_select_plain_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.@sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @sql;
      }

      public sql_select_plain_args()
      {
      }

      public sql_select_plain_args DeepCopy()
      {
        var tmp898 = new sql_select_plain_args()
        if((Sql != null) && __isset.@sql)
        {
          tmp898.Sql = this.Sql;
        }
        tmp898.__isset.@sql = this.__isset.@sql;
        return tmp898;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp899 = new TStruct("sql_select_plain_args");
          await oprot.WriteStructBeginAsync(tmp899, cancellationToken);
          var tmp900 = new TField();
          if((Sql != null) && __isset.@sql)
          {
            tmp900.Name = "sql";
            tmp900.Type = TType.String;
            tmp900.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp900, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_plain_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@sql == other.__isset.@sql) && ((!__isset.@sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.@sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp901 = new StringBuilder("sql_select_plain_args(");
        int tmp902 = 0;
        if((Sql != null) && __isset.@sql)
        {
          if(0 < tmp902++) { tmp901.Append(", "); }
          tmp901.Append("Sql: ");
          Sql.ToString(tmp901);
        }
        tmp901.Append(')');
        return tmp901.ToString();
      }
    }


    public partial class sql_select_plain_result : TBase
    {
      private List<CellPlain> _success;
      private Exception _e;

      public List<CellPlain> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.@e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
        public bool @e;
      }

      public sql_select_plain_result()
      {
      }

      public sql_select_plain_result DeepCopy()
      {
        var tmp903 = new sql_select_plain_result()
        if((Success != null) && __isset.@success)
        {
          tmp903.Success = this.Success.DeepCopy();
        }
        tmp903.__isset.@success = this.__isset.@success;
        if((E != null) && __isset.@e)
        {
          tmp903.E = (Exception)this.E.DeepCopy();
        }
        tmp903.__isset.@e = this.__isset.@e;
        return tmp903;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list904 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<CellPlain>(_list904.Count);
                    for(int _i905 = 0; _i905 < _list904.Count; ++_i905)
                    {
                      CellPlain _elem906;
                      _elem906 = new CellPlain();
                      await _elem906.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem906);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp907 = new TStruct("sql_select_plain_result");
          await oprot.WriteStructBeginAsync(tmp907, cancellationToken);
          var tmp908 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp908.Name = "Success";
              tmp908.Type = TType.List;
              tmp908.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp908, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (CellPlain _iter909 in Success)
              {
                await _iter909.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.@e)
          {
            if (E != null)
            {
              tmp908.Name = "E";
              tmp908.Type = TType.Struct;
              tmp908.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp908, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_plain_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.@e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp910 = new StringBuilder("sql_select_plain_result(");
        int tmp911 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp911++) { tmp910.Append(", "); }
          tmp910.Append("Success: ");
          Success.ToString(tmp910);
        }
        if((E != null) && __isset.@e)
        {
          if(0 < tmp911++) { tmp910.Append(", "); }
          tmp910.Append("E: ");
          E.ToString(tmp910);
        }
        tmp910.Append(')');
        return tmp910.ToString();
      }
    }


    public partial class sql_select_counter_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.@sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @sql;
      }

      public sql_select_counter_args()
      {
      }

      public sql_select_counter_args DeepCopy()
      {
        var tmp912 = new sql_select_counter_args()
        if((Sql != null) && __isset.@sql)
        {
          tmp912.Sql = this.Sql;
        }
        tmp912.__isset.@sql = this.__isset.@sql;
        return tmp912;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp913 = new TStruct("sql_select_counter_args");
          await oprot.WriteStructBeginAsync(tmp913, cancellationToken);
          var tmp914 = new TField();
          if((Sql != null) && __isset.@sql)
          {
            tmp914.Name = "sql";
            tmp914.Type = TType.String;
            tmp914.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp914, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_counter_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@sql == other.__isset.@sql) && ((!__isset.@sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.@sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp915 = new StringBuilder("sql_select_counter_args(");
        int tmp916 = 0;
        if((Sql != null) && __isset.@sql)
        {
          if(0 < tmp916++) { tmp915.Append(", "); }
          tmp915.Append("Sql: ");
          Sql.ToString(tmp915);
        }
        tmp915.Append(')');
        return tmp915.ToString();
      }
    }


    public partial class sql_select_counter_result : TBase
    {
      private List<CellCounter> _success;
      private Exception _e;

      public List<CellCounter> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.@e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
        public bool @e;
      }

      public sql_select_counter_result()
      {
      }

      public sql_select_counter_result DeepCopy()
      {
        var tmp917 = new sql_select_counter_result()
        if((Success != null) && __isset.@success)
        {
          tmp917.Success = this.Success.DeepCopy();
        }
        tmp917.__isset.@success = this.__isset.@success;
        if((E != null) && __isset.@e)
        {
          tmp917.E = (Exception)this.E.DeepCopy();
        }
        tmp917.__isset.@e = this.__isset.@e;
        return tmp917;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list918 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<CellCounter>(_list918.Count);
                    for(int _i919 = 0; _i919 < _list918.Count; ++_i919)
                    {
                      CellCounter _elem920;
                      _elem920 = new CellCounter();
                      await _elem920.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem920);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp921 = new TStruct("sql_select_counter_result");
          await oprot.WriteStructBeginAsync(tmp921, cancellationToken);
          var tmp922 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp922.Name = "Success";
              tmp922.Type = TType.List;
              tmp922.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp922, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (CellCounter _iter923 in Success)
              {
                await _iter923.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.@e)
          {
            if (E != null)
            {
              tmp922.Name = "E";
              tmp922.Type = TType.Struct;
              tmp922.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp922, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_counter_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.@e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp924 = new StringBuilder("sql_select_counter_result(");
        int tmp925 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp925++) { tmp924.Append(", "); }
          tmp924.Append("Success: ");
          Success.ToString(tmp924);
        }
        if((E != null) && __isset.@e)
        {
          if(0 < tmp925++) { tmp924.Append(", "); }
          tmp924.Append("E: ");
          E.ToString(tmp924);
        }
        tmp924.Append(')');
        return tmp924.ToString();
      }
    }


    public partial class sql_select_serial_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.@sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @sql;
      }

      public sql_select_serial_args()
      {
      }

      public sql_select_serial_args DeepCopy()
      {
        var tmp926 = new sql_select_serial_args()
        if((Sql != null) && __isset.@sql)
        {
          tmp926.Sql = this.Sql;
        }
        tmp926.__isset.@sql = this.__isset.@sql;
        return tmp926;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp927 = new TStruct("sql_select_serial_args");
          await oprot.WriteStructBeginAsync(tmp927, cancellationToken);
          var tmp928 = new TField();
          if((Sql != null) && __isset.@sql)
          {
            tmp928.Name = "sql";
            tmp928.Type = TType.String;
            tmp928.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp928, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_serial_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@sql == other.__isset.@sql) && ((!__isset.@sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.@sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp929 = new StringBuilder("sql_select_serial_args(");
        int tmp930 = 0;
        if((Sql != null) && __isset.@sql)
        {
          if(0 < tmp930++) { tmp929.Append(", "); }
          tmp929.Append("Sql: ");
          Sql.ToString(tmp929);
        }
        tmp929.Append(')');
        return tmp929.ToString();
      }
    }


    public partial class sql_select_serial_result : TBase
    {
      private List<CellSerial> _success;
      private Exception _e;

      public List<CellSerial> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.@e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
        public bool @e;
      }

      public sql_select_serial_result()
      {
      }

      public sql_select_serial_result DeepCopy()
      {
        var tmp931 = new sql_select_serial_result()
        if((Success != null) && __isset.@success)
        {
          tmp931.Success = this.Success.DeepCopy();
        }
        tmp931.__isset.@success = this.__isset.@success;
        if((E != null) && __isset.@e)
        {
          tmp931.E = (Exception)this.E.DeepCopy();
        }
        tmp931.__isset.@e = this.__isset.@e;
        return tmp931;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list932 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<CellSerial>(_list932.Count);
                    for(int _i933 = 0; _i933 < _list932.Count; ++_i933)
                    {
                      CellSerial _elem934;
                      _elem934 = new CellSerial();
                      await _elem934.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem934);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp935 = new TStruct("sql_select_serial_result");
          await oprot.WriteStructBeginAsync(tmp935, cancellationToken);
          var tmp936 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp936.Name = "Success";
              tmp936.Type = TType.List;
              tmp936.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp936, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (CellSerial _iter937 in Success)
              {
                await _iter937.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.@e)
          {
            if (E != null)
            {
              tmp936.Name = "E";
              tmp936.Type = TType.Struct;
              tmp936.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp936, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_serial_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.@e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp938 = new StringBuilder("sql_select_serial_result(");
        int tmp939 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp939++) { tmp938.Append(", "); }
          tmp938.Append("Success: ");
          Success.ToString(tmp938);
        }
        if((E != null) && __isset.@e)
        {
          if(0 < tmp939++) { tmp938.Append(", "); }
          tmp938.Append("E: ");
          E.ToString(tmp938);
        }
        tmp938.Append(')');
        return tmp938.ToString();
      }
    }


    public partial class sql_select_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.@sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @sql;
      }

      public sql_select_args()
      {
      }

      public sql_select_args DeepCopy()
      {
        var tmp940 = new sql_select_args()
        if((Sql != null) && __isset.@sql)
        {
          tmp940.Sql = this.Sql;
        }
        tmp940.__isset.@sql = this.__isset.@sql;
        return tmp940;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp941 = new TStruct("sql_select_args");
          await oprot.WriteStructBeginAsync(tmp941, cancellationToken);
          var tmp942 = new TField();
          if((Sql != null) && __isset.@sql)
          {
            tmp942.Name = "sql";
            tmp942.Type = TType.String;
            tmp942.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp942, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@sql == other.__isset.@sql) && ((!__isset.@sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.@sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp943 = new StringBuilder("sql_select_args(");
        int tmp944 = 0;
        if((Sql != null) && __isset.@sql)
        {
          if(0 < tmp944++) { tmp943.Append(", "); }
          tmp943.Append("Sql: ");
          Sql.ToString(tmp943);
        }
        tmp943.Append(')');
        return tmp943.ToString();
      }
    }


    public partial class sql_select_result : TBase
    {
      private Cells _success;
      private Exception _e;

      public Cells Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.@e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
        public bool @e;
      }

      public sql_select_result()
      {
      }

      public sql_select_result DeepCopy()
      {
        var tmp945 = new sql_select_result()
        if((Success != null) && __isset.@success)
        {
          tmp945.Success = (Cells)this.Success.DeepCopy();
        }
        tmp945.__isset.@success = this.__isset.@success;
        if((E != null) && __isset.@e)
        {
          tmp945.E = (Exception)this.E.DeepCopy();
        }
        tmp945.__isset.@e = this.__isset.@e;
        return tmp945;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new Cells();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp946 = new TStruct("sql_select_result");
          await oprot.WriteStructBeginAsync(tmp946, cancellationToken);
          var tmp947 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp947.Name = "Success";
              tmp947.Type = TType.Struct;
              tmp947.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp947, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.@e)
          {
            if (E != null)
            {
              tmp947.Name = "E";
              tmp947.Type = TType.Struct;
              tmp947.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp947, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.@e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp948 = new StringBuilder("sql_select_result(");
        int tmp949 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp949++) { tmp948.Append(", "); }
          tmp948.Append("Success: ");
          Success.ToString(tmp948);
        }
        if((E != null) && __isset.@e)
        {
          if(0 < tmp949++) { tmp948.Append(", "); }
          tmp948.Append("E: ");
          E.ToString(tmp948);
        }
        tmp948.Append(')');
        return tmp948.ToString();
      }
    }


    public partial class sql_select_rslt_on_column_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.@sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @sql;
      }

      public sql_select_rslt_on_column_args()
      {
      }

      public sql_select_rslt_on_column_args DeepCopy()
      {
        var tmp950 = new sql_select_rslt_on_column_args()
        if((Sql != null) && __isset.@sql)
        {
          tmp950.Sql = this.Sql;
        }
        tmp950.__isset.@sql = this.__isset.@sql;
        return tmp950;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp951 = new TStruct("sql_select_rslt_on_column_args");
          await oprot.WriteStructBeginAsync(tmp951, cancellationToken);
          var tmp952 = new TField();
          if((Sql != null) && __isset.@sql)
          {
            tmp952.Name = "sql";
            tmp952.Type = TType.String;
            tmp952.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp952, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_column_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@sql == other.__isset.@sql) && ((!__isset.@sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.@sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp953 = new StringBuilder("sql_select_rslt_on_column_args(");
        int tmp954 = 0;
        if((Sql != null) && __isset.@sql)
        {
          if(0 < tmp954++) { tmp953.Append(", "); }
          tmp953.Append("Sql: ");
          Sql.ToString(tmp953);
        }
        tmp953.Append(')');
        return tmp953.ToString();
      }
    }


    public partial class sql_select_rslt_on_column_result : TBase
    {
      private Dictionary<string, cCells> _success;
      private Exception _e;

      public Dictionary<string, cCells> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.@e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
        public bool @e;
      }

      public sql_select_rslt_on_column_result()
      {
      }

      public sql_select_rslt_on_column_result DeepCopy()
      {
        var tmp955 = new sql_select_rslt_on_column_result()
        if((Success != null) && __isset.@success)
        {
          tmp955.Success = this.Success.DeepCopy();
        }
        tmp955.__isset.@success = this.__isset.@success;
        if((E != null) && __isset.@e)
        {
          tmp955.E = (Exception)this.E.DeepCopy();
        }
        tmp955.__isset.@e = this.__isset.@e;
        return tmp955;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Map)
                {
                  {
                    var _map956 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Success = new Dictionary<string, cCells>(_map956.Count);
                    for(int _i957 = 0; _i957 < _map956.Count; ++_i957)
                    {
                      string _key958;
                      cCells _val959;
                      _key958 = await iprot.ReadStringAsync(cancellationToken);
                      _val959 = new cCells();
                      await _val959.ReadAsync(iprot, cancellationToken);
                      Success[_key958] = _val959;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp960 = new TStruct("sql_select_rslt_on_column_result");
          await oprot.WriteStructBeginAsync(tmp960, cancellationToken);
          var tmp961 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp961.Name = "Success";
              tmp961.Type = TType.Map;
              tmp961.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp961, cancellationToken);
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Success.Count), cancellationToken);
              foreach (string _iter962 in Success.Keys)
              {
                await oprot.WriteStringAsync(_iter962, cancellationToken);
                await Success[_iter962].WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.@e)
          {
            if (E != null)
            {
              tmp961.Name = "E";
              tmp961.Type = TType.Struct;
              tmp961.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp961, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_column_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.@e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp963 = new StringBuilder("sql_select_rslt_on_column_result(");
        int tmp964 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp964++) { tmp963.Append(", "); }
          tmp963.Append("Success: ");
          Success.ToString(tmp963);
        }
        if((E != null) && __isset.@e)
        {
          if(0 < tmp964++) { tmp963.Append(", "); }
          tmp963.Append("E: ");
          E.ToString(tmp963);
        }
        tmp963.Append(')');
        return tmp963.ToString();
      }
    }


    public partial class sql_select_rslt_on_key_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.@sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @sql;
      }

      public sql_select_rslt_on_key_args()
      {
      }

      public sql_select_rslt_on_key_args DeepCopy()
      {
        var tmp965 = new sql_select_rslt_on_key_args()
        if((Sql != null) && __isset.@sql)
        {
          tmp965.Sql = this.Sql;
        }
        tmp965.__isset.@sql = this.__isset.@sql;
        return tmp965;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp966 = new TStruct("sql_select_rslt_on_key_args");
          await oprot.WriteStructBeginAsync(tmp966, cancellationToken);
          var tmp967 = new TField();
          if((Sql != null) && __isset.@sql)
          {
            tmp967.Name = "sql";
            tmp967.Type = TType.String;
            tmp967.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp967, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_key_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@sql == other.__isset.@sql) && ((!__isset.@sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.@sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp968 = new StringBuilder("sql_select_rslt_on_key_args(");
        int tmp969 = 0;
        if((Sql != null) && __isset.@sql)
        {
          if(0 < tmp969++) { tmp968.Append(", "); }
          tmp968.Append("Sql: ");
          Sql.ToString(tmp968);
        }
        tmp968.Append(')');
        return tmp968.ToString();
      }
    }


    public partial class sql_select_rslt_on_key_result : TBase
    {
      private List<kCells> _success;
      private Exception _e;

      public List<kCells> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.@e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
        public bool @e;
      }

      public sql_select_rslt_on_key_result()
      {
      }

      public sql_select_rslt_on_key_result DeepCopy()
      {
        var tmp970 = new sql_select_rslt_on_key_result()
        if((Success != null) && __isset.@success)
        {
          tmp970.Success = this.Success.DeepCopy();
        }
        tmp970.__isset.@success = this.__isset.@success;
        if((E != null) && __isset.@e)
        {
          tmp970.E = (Exception)this.E.DeepCopy();
        }
        tmp970.__isset.@e = this.__isset.@e;
        return tmp970;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list971 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<kCells>(_list971.Count);
                    for(int _i972 = 0; _i972 < _list971.Count; ++_i972)
                    {
                      kCells _elem973;
                      _elem973 = new kCells();
                      await _elem973.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem973);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp974 = new TStruct("sql_select_rslt_on_key_result");
          await oprot.WriteStructBeginAsync(tmp974, cancellationToken);
          var tmp975 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp975.Name = "Success";
              tmp975.Type = TType.List;
              tmp975.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp975, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (kCells _iter976 in Success)
              {
                await _iter976.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.@e)
          {
            if (E != null)
            {
              tmp975.Name = "E";
              tmp975.Type = TType.Struct;
              tmp975.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp975, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_key_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.@e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp977 = new StringBuilder("sql_select_rslt_on_key_result(");
        int tmp978 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp978++) { tmp977.Append(", "); }
          tmp977.Append("Success: ");
          Success.ToString(tmp977);
        }
        if((E != null) && __isset.@e)
        {
          if(0 < tmp978++) { tmp977.Append(", "); }
          tmp977.Append("E: ");
          E.ToString(tmp977);
        }
        tmp977.Append(')');
        return tmp977.ToString();
      }
    }


    public partial class sql_select_rslt_on_fraction_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.@sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @sql;
      }

      public sql_select_rslt_on_fraction_args()
      {
      }

      public sql_select_rslt_on_fraction_args DeepCopy()
      {
        var tmp979 = new sql_select_rslt_on_fraction_args()
        if((Sql != null) && __isset.@sql)
        {
          tmp979.Sql = this.Sql;
        }
        tmp979.__isset.@sql = this.__isset.@sql;
        return tmp979;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp980 = new TStruct("sql_select_rslt_on_fraction_args");
          await oprot.WriteStructBeginAsync(tmp980, cancellationToken);
          var tmp981 = new TField();
          if((Sql != null) && __isset.@sql)
          {
            tmp981.Name = "sql";
            tmp981.Type = TType.String;
            tmp981.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp981, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_fraction_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@sql == other.__isset.@sql) && ((!__isset.@sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.@sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp982 = new StringBuilder("sql_select_rslt_on_fraction_args(");
        int tmp983 = 0;
        if((Sql != null) && __isset.@sql)
        {
          if(0 < tmp983++) { tmp982.Append(", "); }
          tmp982.Append("Sql: ");
          Sql.ToString(tmp982);
        }
        tmp982.Append(')');
        return tmp982.ToString();
      }
    }


    public partial class sql_select_rslt_on_fraction_result : TBase
    {
      private FCells _success;
      private Exception _e;

      public FCells Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.@e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
        public bool @e;
      }

      public sql_select_rslt_on_fraction_result()
      {
      }

      public sql_select_rslt_on_fraction_result DeepCopy()
      {
        var tmp984 = new sql_select_rslt_on_fraction_result()
        if((Success != null) && __isset.@success)
        {
          tmp984.Success = (FCells)this.Success.DeepCopy();
        }
        tmp984.__isset.@success = this.__isset.@success;
        if((E != null) && __isset.@e)
        {
          tmp984.E = (Exception)this.E.DeepCopy();
        }
        tmp984.__isset.@e = this.__isset.@e;
        return tmp984;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new FCells();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp985 = new TStruct("sql_select_rslt_on_fraction_result");
          await oprot.WriteStructBeginAsync(tmp985, cancellationToken);
          var tmp986 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp986.Name = "Success";
              tmp986.Type = TType.Struct;
              tmp986.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp986, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.@e)
          {
            if (E != null)
            {
              tmp986.Name = "E";
              tmp986.Type = TType.Struct;
              tmp986.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp986, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_fraction_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.@e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp987 = new StringBuilder("sql_select_rslt_on_fraction_result(");
        int tmp988 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp988++) { tmp987.Append(", "); }
          tmp987.Append("Success: ");
          Success.ToString(tmp987);
        }
        if((E != null) && __isset.@e)
        {
          if(0 < tmp988++) { tmp987.Append(", "); }
          tmp987.Append("E: ");
          E.ToString(tmp987);
        }
        tmp987.Append(')');
        return tmp987.ToString();
      }
    }


    public partial class sql_query_args : TBase
    {
      private string _sql;
      private CellsResult _rslt;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.@sql = true;
          this._sql = value;
        }
      }

      /// <summary>
      /// The Type of Cells Result for the response
      /// 
      /// <seealso cref="global::.CellsResult"/>
      /// </summary>
      public CellsResult Rslt
      {
        get
        {
          return _rslt;
        }
        set
        {
          __isset.@rslt = true;
          this._rslt = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @sql;
        public bool @rslt;
      }

      public sql_query_args()
      {
      }

      public sql_query_args DeepCopy()
      {
        var tmp989 = new sql_query_args()
        if((Sql != null) && __isset.@sql)
        {
          tmp989.Sql = this.Sql;
        }
        tmp989.__isset.@sql = this.__isset.@sql;
        if(__isset.@rslt)
        {
          tmp989.Rslt = this.Rslt;
        }
        tmp989.__isset.@rslt = this.__isset.@rslt;
        return tmp989;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Rslt = (CellsResult)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp990 = new TStruct("sql_query_args");
          await oprot.WriteStructBeginAsync(tmp990, cancellationToken);
          var tmp991 = new TField();
          if((Sql != null) && __isset.@sql)
          {
            tmp991.Name = "sql";
            tmp991.Type = TType.String;
            tmp991.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp991, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.@rslt)
          {
            tmp991.Name = "rslt";
            tmp991.Type = TType.I32;
            tmp991.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp991, cancellationToken);
            await oprot.WriteI32Async((int)Rslt, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_query_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@sql == other.__isset.@sql) && ((!__isset.@sql) || (global::System.Object.Equals(Sql, other.Sql))))
          && ((__isset.@rslt == other.__isset.@rslt) && ((!__isset.@rslt) || (global::System.Object.Equals(Rslt, other.Rslt))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.@sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
          if(__isset.@rslt)
          {
            hashcode = (hashcode * 397) + Rslt.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp992 = new StringBuilder("sql_query_args(");
        int tmp993 = 0;
        if((Sql != null) && __isset.@sql)
        {
          if(0 < tmp993++) { tmp992.Append(", "); }
          tmp992.Append("Sql: ");
          Sql.ToString(tmp992);
        }
        if(__isset.@rslt)
        {
          if(0 < tmp993++) { tmp992.Append(", "); }
          tmp992.Append("Rslt: ");
          Rslt.ToString(tmp992);
        }
        tmp992.Append(')');
        return tmp992.ToString();
      }
    }


    public partial class sql_query_result : TBase
    {
      private CellsGroup _success;
      private Exception _e;

      public CellsGroup Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.@e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
        public bool @e;
      }

      public sql_query_result()
      {
      }

      public sql_query_result DeepCopy()
      {
        var tmp994 = new sql_query_result()
        if((Success != null) && __isset.@success)
        {
          tmp994.Success = (CellsGroup)this.Success.DeepCopy();
        }
        tmp994.__isset.@success = this.__isset.@success;
        if((E != null) && __isset.@e)
        {
          tmp994.E = (Exception)this.E.DeepCopy();
        }
        tmp994.__isset.@e = this.__isset.@e;
        return tmp994;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new CellsGroup();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp995 = new TStruct("sql_query_result");
          await oprot.WriteStructBeginAsync(tmp995, cancellationToken);
          var tmp996 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp996.Name = "Success";
              tmp996.Type = TType.Struct;
              tmp996.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp996, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.@e)
          {
            if (E != null)
            {
              tmp996.Name = "E";
              tmp996.Type = TType.Struct;
              tmp996.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp996, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_query_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.@e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp997 = new StringBuilder("sql_query_result(");
        int tmp998 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp998++) { tmp997.Append(", "); }
          tmp997.Append("Success: ");
          Success.ToString(tmp997);
        }
        if((E != null) && __isset.@e)
        {
          if(0 < tmp998++) { tmp997.Append(", "); }
          tmp997.Append("E: ");
          E.ToString(tmp997);
        }
        tmp997.Append(')');
        return tmp997.ToString();
      }
    }


    public partial class sql_update_args : TBase
    {
      private string _sql;
      private long _updater_id;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.@sql = true;
          this._sql = value;
        }
      }

      /// <summary>
      /// The Updater ID to work with
      /// </summary>
      public long Updater_id
      {
        get
        {
          return _updater_id;
        }
        set
        {
          __isset.updater_id = true;
          this._updater_id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @sql;
        public bool updater_id;
      }

      public sql_update_args()
      {
        this._updater_id = 0;
        this.__isset.updater_id = true;
      }

      public sql_update_args DeepCopy()
      {
        var tmp999 = new sql_update_args()
        if((Sql != null) && __isset.@sql)
        {
          tmp999.Sql = this.Sql;
        }
        tmp999.__isset.@sql = this.__isset.@sql;
        if(__isset.updater_id)
        {
          tmp999.Updater_id = this.Updater_id;
        }
        tmp999.__isset.updater_id = this.__isset.updater_id;
        return tmp999;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Updater_id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1000 = new TStruct("sql_update_args");
          await oprot.WriteStructBeginAsync(tmp1000, cancellationToken);
          var tmp1001 = new TField();
          if((Sql != null) && __isset.@sql)
          {
            tmp1001.Name = "sql";
            tmp1001.Type = TType.String;
            tmp1001.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1001, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.updater_id)
          {
            tmp1001.Name = "updater_id";
            tmp1001.Type = TType.I64;
            tmp1001.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp1001, cancellationToken);
            await oprot.WriteI64Async(Updater_id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_update_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@sql == other.__isset.@sql) && ((!__isset.@sql) || (global::System.Object.Equals(Sql, other.Sql))))
          && ((__isset.updater_id == other.__isset.updater_id) && ((!__isset.updater_id) || (global::System.Object.Equals(Updater_id, other.Updater_id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.@sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
          if(__isset.updater_id)
          {
            hashcode = (hashcode * 397) + Updater_id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1002 = new StringBuilder("sql_update_args(");
        int tmp1003 = 0;
        if((Sql != null) && __isset.@sql)
        {
          if(0 < tmp1003++) { tmp1002.Append(", "); }
          tmp1002.Append("Sql: ");
          Sql.ToString(tmp1002);
        }
        if(__isset.updater_id)
        {
          if(0 < tmp1003++) { tmp1002.Append(", "); }
          tmp1002.Append("Updater_id: ");
          Updater_id.ToString(tmp1002);
        }
        tmp1002.Append(')');
        return tmp1002.ToString();
      }
    }


    public partial class sql_update_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.@e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @e;
      }

      public sql_update_result()
      {
      }

      public sql_update_result DeepCopy()
      {
        var tmp1004 = new sql_update_result()
        if((E != null) && __isset.@e)
        {
          tmp1004.E = (Exception)this.E.DeepCopy();
        }
        tmp1004.__isset.@e = this.__isset.@e;
        return tmp1004;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1005 = new TStruct("sql_update_result");
          await oprot.WriteStructBeginAsync(tmp1005, cancellationToken);
          var tmp1006 = new TField();

          if(this.__isset.@e)
          {
            if (E != null)
            {
              tmp1006.Name = "E";
              tmp1006.Type = TType.Struct;
              tmp1006.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1006, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_update_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.@e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1007 = new StringBuilder("sql_update_result(");
        int tmp1008 = 0;
        if((E != null) && __isset.@e)
        {
          if(0 < tmp1008++) { tmp1007.Append(", "); }
          tmp1007.Append("E: ");
          E.ToString(tmp1007);
        }
        tmp1007.Append(')');
        return tmp1007.ToString();
      }
    }


    public partial class exec_sql_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.@sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @sql;
      }

      public exec_sql_args()
      {
      }

      public exec_sql_args DeepCopy()
      {
        var tmp1009 = new exec_sql_args()
        if((Sql != null) && __isset.@sql)
        {
          tmp1009.Sql = this.Sql;
        }
        tmp1009.__isset.@sql = this.__isset.@sql;
        return tmp1009;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1010 = new TStruct("exec_sql_args");
          await oprot.WriteStructBeginAsync(tmp1010, cancellationToken);
          var tmp1011 = new TField();
          if((Sql != null) && __isset.@sql)
          {
            tmp1011.Name = "sql";
            tmp1011.Type = TType.String;
            tmp1011.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1011, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is exec_sql_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@sql == other.__isset.@sql) && ((!__isset.@sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.@sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1012 = new StringBuilder("exec_sql_args(");
        int tmp1013 = 0;
        if((Sql != null) && __isset.@sql)
        {
          if(0 < tmp1013++) { tmp1012.Append(", "); }
          tmp1012.Append("Sql: ");
          Sql.ToString(tmp1012);
        }
        tmp1012.Append(')');
        return tmp1012.ToString();
      }
    }


    public partial class exec_sql_result : TBase
    {
      private Result _success;
      private Exception _e;

      public Result Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.@e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
        public bool @e;
      }

      public exec_sql_result()
      {
      }

      public exec_sql_result DeepCopy()
      {
        var tmp1014 = new exec_sql_result()
        if((Success != null) && __isset.@success)
        {
          tmp1014.Success = (Result)this.Success.DeepCopy();
        }
        tmp1014.__isset.@success = this.__isset.@success;
        if((E != null) && __isset.@e)
        {
          tmp1014.E = (Exception)this.E.DeepCopy();
        }
        tmp1014.__isset.@e = this.__isset.@e;
        return tmp1014;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new Result();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1015 = new TStruct("exec_sql_result");
          await oprot.WriteStructBeginAsync(tmp1015, cancellationToken);
          var tmp1016 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp1016.Name = "Success";
              tmp1016.Type = TType.Struct;
              tmp1016.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1016, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.@e)
          {
            if (E != null)
            {
              tmp1016.Name = "E";
              tmp1016.Type = TType.Struct;
              tmp1016.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1016, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is exec_sql_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.@e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1017 = new StringBuilder("exec_sql_result(");
        int tmp1018 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp1018++) { tmp1017.Append(", "); }
          tmp1017.Append("Success: ");
          Success.ToString(tmp1017);
        }
        if((E != null) && __isset.@e)
        {
          if(0 < tmp1018++) { tmp1017.Append(", "); }
          tmp1017.Append("E: ");
          E.ToString(tmp1017);
        }
        tmp1017.Append(')');
        return tmp1017.ToString();
      }
    }


    public partial class updater_create_args : TBase
    {
      private int _buffer_size;

      /// <summary>
      /// The buffer size of the Updater
      /// </summary>
      public int Buffer_size
      {
        get
        {
          return _buffer_size;
        }
        set
        {
          __isset.buffer_size = true;
          this._buffer_size = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool buffer_size;
      }

      public updater_create_args()
      {
      }

      public updater_create_args DeepCopy()
      {
        var tmp1019 = new updater_create_args()
        if(__isset.buffer_size)
        {
          tmp1019.Buffer_size = this.Buffer_size;
        }
        tmp1019.__isset.buffer_size = this.__isset.buffer_size;
        return tmp1019;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Buffer_size = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1020 = new TStruct("updater_create_args");
          await oprot.WriteStructBeginAsync(tmp1020, cancellationToken);
          var tmp1021 = new TField();
          if(__isset.buffer_size)
          {
            tmp1021.Name = "buffer_size";
            tmp1021.Type = TType.I32;
            tmp1021.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1021, cancellationToken);
            await oprot.WriteI32Async(Buffer_size, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is updater_create_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.buffer_size == other.__isset.buffer_size) && ((!__isset.buffer_size) || (global::System.Object.Equals(Buffer_size, other.Buffer_size))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.buffer_size)
          {
            hashcode = (hashcode * 397) + Buffer_size.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1022 = new StringBuilder("updater_create_args(");
        int tmp1023 = 0;
        if(__isset.buffer_size)
        {
          if(0 < tmp1023++) { tmp1022.Append(", "); }
          tmp1022.Append("Buffer_size: ");
          Buffer_size.ToString(tmp1022);
        }
        tmp1022.Append(')');
        return tmp1022.ToString();
      }
    }


    public partial class updater_create_result : TBase
    {
      private long _success;
      private Exception _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.@e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
        public bool @e;
      }

      public updater_create_result()
      {
      }

      public updater_create_result DeepCopy()
      {
        var tmp1024 = new updater_create_result()
        if(__isset.@success)
        {
          tmp1024.Success = this.Success;
        }
        tmp1024.__isset.@success = this.__isset.@success;
        if((E != null) && __isset.@e)
        {
          tmp1024.E = (Exception)this.E.DeepCopy();
        }
        tmp1024.__isset.@e = this.__isset.@e;
        return tmp1024;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64)
                {
                  Success = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1025 = new TStruct("updater_create_result");
          await oprot.WriteStructBeginAsync(tmp1025, cancellationToken);
          var tmp1026 = new TField();

          if(this.__isset.@success)
          {
            tmp1026.Name = "Success";
            tmp1026.Type = TType.I64;
            tmp1026.ID = 0;
            await oprot.WriteFieldBeginAsync(tmp1026, cancellationToken);
            await oprot.WriteI64Async(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          else if(this.__isset.@e)
          {
            if (E != null)
            {
              tmp1026.Name = "E";
              tmp1026.Type = TType.Struct;
              tmp1026.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1026, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is updater_create_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.@e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1027 = new StringBuilder("updater_create_result(");
        int tmp1028 = 0;
        if(__isset.@success)
        {
          if(0 < tmp1028++) { tmp1027.Append(", "); }
          tmp1027.Append("Success: ");
          Success.ToString(tmp1027);
        }
        if((E != null) && __isset.@e)
        {
          if(0 < tmp1028++) { tmp1027.Append(", "); }
          tmp1027.Append("E: ");
          E.ToString(tmp1027);
        }
        tmp1027.Append(')');
        return tmp1027.ToString();
      }
    }


    public partial class updater_close_args : TBase
    {
      private long _id;

      /// <summary>
      /// The Updater ID to close
      /// </summary>
      public long Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.@id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @id;
      }

      public updater_close_args()
      {
      }

      public updater_close_args DeepCopy()
      {
        var tmp1029 = new updater_close_args()
        if(__isset.@id)
        {
          tmp1029.Id = this.Id;
        }
        tmp1029.__isset.@id = this.__isset.@id;
        return tmp1029;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  Id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1030 = new TStruct("updater_close_args");
          await oprot.WriteStructBeginAsync(tmp1030, cancellationToken);
          var tmp1031 = new TField();
          if(__isset.@id)
          {
            tmp1031.Name = "id";
            tmp1031.Type = TType.I64;
            tmp1031.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1031, cancellationToken);
            await oprot.WriteI64Async(Id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is updater_close_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@id == other.__isset.@id) && ((!__isset.@id) || (global::System.Object.Equals(Id, other.Id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.@id)
          {
            hashcode = (hashcode * 397) + Id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1032 = new StringBuilder("updater_close_args(");
        int tmp1033 = 0;
        if(__isset.@id)
        {
          if(0 < tmp1033++) { tmp1032.Append(", "); }
          tmp1032.Append("Id: ");
          Id.ToString(tmp1032);
        }
        tmp1032.Append(')');
        return tmp1032.ToString();
      }
    }


    public partial class updater_close_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.@e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @e;
      }

      public updater_close_result()
      {
      }

      public updater_close_result DeepCopy()
      {
        var tmp1034 = new updater_close_result()
        if((E != null) && __isset.@e)
        {
          tmp1034.E = (Exception)this.E.DeepCopy();
        }
        tmp1034.__isset.@e = this.__isset.@e;
        return tmp1034;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1035 = new TStruct("updater_close_result");
          await oprot.WriteStructBeginAsync(tmp1035, cancellationToken);
          var tmp1036 = new TField();

          if(this.__isset.@e)
          {
            if (E != null)
            {
              tmp1036.Name = "E";
              tmp1036.Type = TType.Struct;
              tmp1036.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1036, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is updater_close_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.@e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1037 = new StringBuilder("updater_close_result(");
        int tmp1038 = 0;
        if((E != null) && __isset.@e)
        {
          if(0 < tmp1038++) { tmp1037.Append(", "); }
          tmp1037.Append("E: ");
          E.ToString(tmp1037);
        }
        tmp1037.Append(')');
        return tmp1037.ToString();
      }
    }


    public partial class update_plain_args : TBase
    {
      private Dictionary<long, List<UCellPlain>> _cells;
      private long _updater_id;

      /// <summary>
      /// The Cells to update
      /// </summary>
      public Dictionary<long, List<UCellPlain>> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.@cells = true;
          this._cells = value;
        }
      }

      /// <summary>
      /// The Updater ID to use for write
      /// </summary>
      public long Updater_id
      {
        get
        {
          return _updater_id;
        }
        set
        {
          __isset.updater_id = true;
          this._updater_id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @cells;
        public bool updater_id;
      }

      public update_plain_args()
      {
        this._updater_id = 0;
        this.__isset.updater_id = true;
      }

      public update_plain_args DeepCopy()
      {
        var tmp1039 = new update_plain_args()
        if((Cells != null) && __isset.@cells)
        {
          tmp1039.Cells = this.Cells.DeepCopy();
        }
        tmp1039.__isset.@cells = this.__isset.@cells;
        if(__isset.updater_id)
        {
          tmp1039.Updater_id = this.Updater_id;
        }
        tmp1039.__isset.updater_id = this.__isset.updater_id;
        return tmp1039;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map)
                {
                  {
                    var _map1040 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Cells = new Dictionary<long, List<UCellPlain>>(_map1040.Count);
                    for(int _i1041 = 0; _i1041 < _map1040.Count; ++_i1041)
                    {
                      long _key1042;
                      List<UCellPlain> _val1043;
                      _key1042 = await iprot.ReadI64Async(cancellationToken);
                      {
                        var _list1044 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val1043 = new List<UCellPlain>(_list1044.Count);
                        for(int _i1045 = 0; _i1045 < _list1044.Count; ++_i1045)
                        {
                          UCellPlain _elem1046;
                          _elem1046 = new UCellPlain();
                          await _elem1046.ReadAsync(iprot, cancellationToken);
                          _val1043.Add(_elem1046);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Cells[_key1042] = _val1043;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Updater_id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1047 = new TStruct("update_plain_args");
          await oprot.WriteStructBeginAsync(tmp1047, cancellationToken);
          var tmp1048 = new TField();
          if((Cells != null) && __isset.@cells)
          {
            tmp1048.Name = "cells";
            tmp1048.Type = TType.Map;
            tmp1048.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1048, cancellationToken);
            await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Cells.Count), cancellationToken);
            foreach (long _iter1049 in Cells.Keys)
            {
              await oprot.WriteI64Async(_iter1049, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Cells[_iter1049].Count), cancellationToken);
              foreach (UCellPlain _iter1050 in Cells[_iter1049])
              {
                await _iter1050.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.updater_id)
          {
            tmp1048.Name = "updater_id";
            tmp1048.Type = TType.I64;
            tmp1048.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp1048, cancellationToken);
            await oprot.WriteI64Async(Updater_id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_plain_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@cells == other.__isset.@cells) && ((!__isset.@cells) || (global::System.Object.Equals(Cells, other.Cells))))
          && ((__isset.updater_id == other.__isset.updater_id) && ((!__isset.updater_id) || (global::System.Object.Equals(Updater_id, other.Updater_id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Cells != null) && __isset.@cells)
          {
            hashcode = (hashcode * 397) + Cells.GetHashCode();
          }
          if(__isset.updater_id)
          {
            hashcode = (hashcode * 397) + Updater_id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1051 = new StringBuilder("update_plain_args(");
        int tmp1052 = 0;
        if((Cells != null) && __isset.@cells)
        {
          if(0 < tmp1052++) { tmp1051.Append(", "); }
          tmp1051.Append("Cells: ");
          Cells.ToString(tmp1051);
        }
        if(__isset.updater_id)
        {
          if(0 < tmp1052++) { tmp1051.Append(", "); }
          tmp1051.Append("Updater_id: ");
          Updater_id.ToString(tmp1051);
        }
        tmp1051.Append(')');
        return tmp1051.ToString();
      }
    }


    public partial class update_plain_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.@e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @e;
      }

      public update_plain_result()
      {
      }

      public update_plain_result DeepCopy()
      {
        var tmp1053 = new update_plain_result()
        if((E != null) && __isset.@e)
        {
          tmp1053.E = (Exception)this.E.DeepCopy();
        }
        tmp1053.__isset.@e = this.__isset.@e;
        return tmp1053;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1054 = new TStruct("update_plain_result");
          await oprot.WriteStructBeginAsync(tmp1054, cancellationToken);
          var tmp1055 = new TField();

          if(this.__isset.@e)
          {
            if (E != null)
            {
              tmp1055.Name = "E";
              tmp1055.Type = TType.Struct;
              tmp1055.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1055, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_plain_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.@e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1056 = new StringBuilder("update_plain_result(");
        int tmp1057 = 0;
        if((E != null) && __isset.@e)
        {
          if(0 < tmp1057++) { tmp1056.Append(", "); }
          tmp1056.Append("E: ");
          E.ToString(tmp1056);
        }
        tmp1056.Append(')');
        return tmp1056.ToString();
      }
    }


    public partial class update_counter_args : TBase
    {
      private Dictionary<long, List<UCellCounter>> _cells;
      private long _updater_id;

      /// <summary>
      /// The Counter Cells to update
      /// </summary>
      public Dictionary<long, List<UCellCounter>> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.@cells = true;
          this._cells = value;
        }
      }

      /// <summary>
      /// The Updater ID to use for write
      /// </summary>
      public long Updater_id
      {
        get
        {
          return _updater_id;
        }
        set
        {
          __isset.updater_id = true;
          this._updater_id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @cells;
        public bool updater_id;
      }

      public update_counter_args()
      {
        this._updater_id = 0;
        this.__isset.updater_id = true;
      }

      public update_counter_args DeepCopy()
      {
        var tmp1058 = new update_counter_args()
        if((Cells != null) && __isset.@cells)
        {
          tmp1058.Cells = this.Cells.DeepCopy();
        }
        tmp1058.__isset.@cells = this.__isset.@cells;
        if(__isset.updater_id)
        {
          tmp1058.Updater_id = this.Updater_id;
        }
        tmp1058.__isset.updater_id = this.__isset.updater_id;
        return tmp1058;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map)
                {
                  {
                    var _map1059 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Cells = new Dictionary<long, List<UCellCounter>>(_map1059.Count);
                    for(int _i1060 = 0; _i1060 < _map1059.Count; ++_i1060)
                    {
                      long _key1061;
                      List<UCellCounter> _val1062;
                      _key1061 = await iprot.ReadI64Async(cancellationToken);
                      {
                        var _list1063 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val1062 = new List<UCellCounter>(_list1063.Count);
                        for(int _i1064 = 0; _i1064 < _list1063.Count; ++_i1064)
                        {
                          UCellCounter _elem1065;
                          _elem1065 = new UCellCounter();
                          await _elem1065.ReadAsync(iprot, cancellationToken);
                          _val1062.Add(_elem1065);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Cells[_key1061] = _val1062;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Updater_id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1066 = new TStruct("update_counter_args");
          await oprot.WriteStructBeginAsync(tmp1066, cancellationToken);
          var tmp1067 = new TField();
          if((Cells != null) && __isset.@cells)
          {
            tmp1067.Name = "cells";
            tmp1067.Type = TType.Map;
            tmp1067.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1067, cancellationToken);
            await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Cells.Count), cancellationToken);
            foreach (long _iter1068 in Cells.Keys)
            {
              await oprot.WriteI64Async(_iter1068, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Cells[_iter1068].Count), cancellationToken);
              foreach (UCellCounter _iter1069 in Cells[_iter1068])
              {
                await _iter1069.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.updater_id)
          {
            tmp1067.Name = "updater_id";
            tmp1067.Type = TType.I64;
            tmp1067.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp1067, cancellationToken);
            await oprot.WriteI64Async(Updater_id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_counter_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@cells == other.__isset.@cells) && ((!__isset.@cells) || (global::System.Object.Equals(Cells, other.Cells))))
          && ((__isset.updater_id == other.__isset.updater_id) && ((!__isset.updater_id) || (global::System.Object.Equals(Updater_id, other.Updater_id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Cells != null) && __isset.@cells)
          {
            hashcode = (hashcode * 397) + Cells.GetHashCode();
          }
          if(__isset.updater_id)
          {
            hashcode = (hashcode * 397) + Updater_id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1070 = new StringBuilder("update_counter_args(");
        int tmp1071 = 0;
        if((Cells != null) && __isset.@cells)
        {
          if(0 < tmp1071++) { tmp1070.Append(", "); }
          tmp1070.Append("Cells: ");
          Cells.ToString(tmp1070);
        }
        if(__isset.updater_id)
        {
          if(0 < tmp1071++) { tmp1070.Append(", "); }
          tmp1070.Append("Updater_id: ");
          Updater_id.ToString(tmp1070);
        }
        tmp1070.Append(')');
        return tmp1070.ToString();
      }
    }


    public partial class update_counter_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.@e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @e;
      }

      public update_counter_result()
      {
      }

      public update_counter_result DeepCopy()
      {
        var tmp1072 = new update_counter_result()
        if((E != null) && __isset.@e)
        {
          tmp1072.E = (Exception)this.E.DeepCopy();
        }
        tmp1072.__isset.@e = this.__isset.@e;
        return tmp1072;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1073 = new TStruct("update_counter_result");
          await oprot.WriteStructBeginAsync(tmp1073, cancellationToken);
          var tmp1074 = new TField();

          if(this.__isset.@e)
          {
            if (E != null)
            {
              tmp1074.Name = "E";
              tmp1074.Type = TType.Struct;
              tmp1074.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1074, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_counter_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.@e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1075 = new StringBuilder("update_counter_result(");
        int tmp1076 = 0;
        if((E != null) && __isset.@e)
        {
          if(0 < tmp1076++) { tmp1075.Append(", "); }
          tmp1075.Append("E: ");
          E.ToString(tmp1075);
        }
        tmp1075.Append(')');
        return tmp1075.ToString();
      }
    }


    public partial class update_serial_args : TBase
    {
      private Dictionary<long, List<UCellSerial>> _cells;
      private long _updater_id;

      /// <summary>
      /// The Serial Cells to update
      /// </summary>
      public Dictionary<long, List<UCellSerial>> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.@cells = true;
          this._cells = value;
        }
      }

      /// <summary>
      /// The Updater ID to use for write
      /// </summary>
      public long Updater_id
      {
        get
        {
          return _updater_id;
        }
        set
        {
          __isset.updater_id = true;
          this._updater_id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @cells;
        public bool updater_id;
      }

      public update_serial_args()
      {
        this._updater_id = 0;
        this.__isset.updater_id = true;
      }

      public update_serial_args DeepCopy()
      {
        var tmp1077 = new update_serial_args()
        if((Cells != null) && __isset.@cells)
        {
          tmp1077.Cells = this.Cells.DeepCopy();
        }
        tmp1077.__isset.@cells = this.__isset.@cells;
        if(__isset.updater_id)
        {
          tmp1077.Updater_id = this.Updater_id;
        }
        tmp1077.__isset.updater_id = this.__isset.updater_id;
        return tmp1077;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map)
                {
                  {
                    var _map1078 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Cells = new Dictionary<long, List<UCellSerial>>(_map1078.Count);
                    for(int _i1079 = 0; _i1079 < _map1078.Count; ++_i1079)
                    {
                      long _key1080;
                      List<UCellSerial> _val1081;
                      _key1080 = await iprot.ReadI64Async(cancellationToken);
                      {
                        var _list1082 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val1081 = new List<UCellSerial>(_list1082.Count);
                        for(int _i1083 = 0; _i1083 < _list1082.Count; ++_i1083)
                        {
                          UCellSerial _elem1084;
                          _elem1084 = new UCellSerial();
                          await _elem1084.ReadAsync(iprot, cancellationToken);
                          _val1081.Add(_elem1084);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Cells[_key1080] = _val1081;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Updater_id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1085 = new TStruct("update_serial_args");
          await oprot.WriteStructBeginAsync(tmp1085, cancellationToken);
          var tmp1086 = new TField();
          if((Cells != null) && __isset.@cells)
          {
            tmp1086.Name = "cells";
            tmp1086.Type = TType.Map;
            tmp1086.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1086, cancellationToken);
            await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Cells.Count), cancellationToken);
            foreach (long _iter1087 in Cells.Keys)
            {
              await oprot.WriteI64Async(_iter1087, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Cells[_iter1087].Count), cancellationToken);
              foreach (UCellSerial _iter1088 in Cells[_iter1087])
              {
                await _iter1088.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.updater_id)
          {
            tmp1086.Name = "updater_id";
            tmp1086.Type = TType.I64;
            tmp1086.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp1086, cancellationToken);
            await oprot.WriteI64Async(Updater_id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_serial_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@cells == other.__isset.@cells) && ((!__isset.@cells) || (global::System.Object.Equals(Cells, other.Cells))))
          && ((__isset.updater_id == other.__isset.updater_id) && ((!__isset.updater_id) || (global::System.Object.Equals(Updater_id, other.Updater_id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Cells != null) && __isset.@cells)
          {
            hashcode = (hashcode * 397) + Cells.GetHashCode();
          }
          if(__isset.updater_id)
          {
            hashcode = (hashcode * 397) + Updater_id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1089 = new StringBuilder("update_serial_args(");
        int tmp1090 = 0;
        if((Cells != null) && __isset.@cells)
        {
          if(0 < tmp1090++) { tmp1089.Append(", "); }
          tmp1089.Append("Cells: ");
          Cells.ToString(tmp1089);
        }
        if(__isset.updater_id)
        {
          if(0 < tmp1090++) { tmp1089.Append(", "); }
          tmp1089.Append("Updater_id: ");
          Updater_id.ToString(tmp1089);
        }
        tmp1089.Append(')');
        return tmp1089.ToString();
      }
    }


    public partial class update_serial_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.@e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @e;
      }

      public update_serial_result()
      {
      }

      public update_serial_result DeepCopy()
      {
        var tmp1091 = new update_serial_result()
        if((E != null) && __isset.@e)
        {
          tmp1091.E = (Exception)this.E.DeepCopy();
        }
        tmp1091.__isset.@e = this.__isset.@e;
        return tmp1091;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1092 = new TStruct("update_serial_result");
          await oprot.WriteStructBeginAsync(tmp1092, cancellationToken);
          var tmp1093 = new TField();

          if(this.__isset.@e)
          {
            if (E != null)
            {
              tmp1093.Name = "E";
              tmp1093.Type = TType.Struct;
              tmp1093.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1093, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_serial_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.@e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1094 = new StringBuilder("update_serial_result(");
        int tmp1095 = 0;
        if((E != null) && __isset.@e)
        {
          if(0 < tmp1095++) { tmp1094.Append(", "); }
          tmp1094.Append("E: ");
          E.ToString(tmp1094);
        }
        tmp1094.Append(')');
        return tmp1094.ToString();
      }
    }


    public partial class update_by_types_args : TBase
    {
      private Dictionary<long, List<UCellPlain>> _plain;
      private Dictionary<long, List<UCellCounter>> _counter;
      private Dictionary<long, List<UCellSerial>> _serial;
      private long _updater_id;

      /// <summary>
      /// The PLAIN Cells to update
      /// </summary>
      public Dictionary<long, List<UCellPlain>> Plain
      {
        get
        {
          return _plain;
        }
        set
        {
          __isset.@plain = true;
          this._plain = value;
        }
      }

      /// <summary>
      /// The COUNTER Cells to update
      /// </summary>
      public Dictionary<long, List<UCellCounter>> Counter
      {
        get
        {
          return _counter;
        }
        set
        {
          __isset.@counter = true;
          this._counter = value;
        }
      }

      /// <summary>
      /// The SERIAL Cells to update
      /// </summary>
      public Dictionary<long, List<UCellSerial>> Serial
      {
        get
        {
          return _serial;
        }
        set
        {
          __isset.@serial = true;
          this._serial = value;
        }
      }

      /// <summary>
      /// The Updater ID to use for write
      /// </summary>
      public long Updater_id
      {
        get
        {
          return _updater_id;
        }
        set
        {
          __isset.updater_id = true;
          this._updater_id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @plain;
        public bool @counter;
        public bool @serial;
        public bool updater_id;
      }

      public update_by_types_args()
      {
        this._updater_id = 0;
        this.__isset.updater_id = true;
      }

      public update_by_types_args DeepCopy()
      {
        var tmp1096 = new update_by_types_args()
        if((Plain != null) && __isset.@plain)
        {
          tmp1096.Plain = this.Plain.DeepCopy();
        }
        tmp1096.__isset.@plain = this.__isset.@plain;
        if((Counter != null) && __isset.@counter)
        {
          tmp1096.Counter = this.Counter.DeepCopy();
        }
        tmp1096.__isset.@counter = this.__isset.@counter;
        if((Serial != null) && __isset.@serial)
        {
          tmp1096.Serial = this.Serial.DeepCopy();
        }
        tmp1096.__isset.@serial = this.__isset.@serial;
        if(__isset.updater_id)
        {
          tmp1096.Updater_id = this.Updater_id;
        }
        tmp1096.__isset.updater_id = this.__isset.updater_id;
        return tmp1096;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map)
                {
                  {
                    var _map1097 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Plain = new Dictionary<long, List<UCellPlain>>(_map1097.Count);
                    for(int _i1098 = 0; _i1098 < _map1097.Count; ++_i1098)
                    {
                      long _key1099;
                      List<UCellPlain> _val1100;
                      _key1099 = await iprot.ReadI64Async(cancellationToken);
                      {
                        var _list1101 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val1100 = new List<UCellPlain>(_list1101.Count);
                        for(int _i1102 = 0; _i1102 < _list1101.Count; ++_i1102)
                        {
                          UCellPlain _elem1103;
                          _elem1103 = new UCellPlain();
                          await _elem1103.ReadAsync(iprot, cancellationToken);
                          _val1100.Add(_elem1103);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Plain[_key1099] = _val1100;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Map)
                {
                  {
                    var _map1104 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Counter = new Dictionary<long, List<UCellCounter>>(_map1104.Count);
                    for(int _i1105 = 0; _i1105 < _map1104.Count; ++_i1105)
                    {
                      long _key1106;
                      List<UCellCounter> _val1107;
                      _key1106 = await iprot.ReadI64Async(cancellationToken);
                      {
                        var _list1108 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val1107 = new List<UCellCounter>(_list1108.Count);
                        for(int _i1109 = 0; _i1109 < _list1108.Count; ++_i1109)
                        {
                          UCellCounter _elem1110;
                          _elem1110 = new UCellCounter();
                          await _elem1110.ReadAsync(iprot, cancellationToken);
                          _val1107.Add(_elem1110);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Counter[_key1106] = _val1107;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.Map)
                {
                  {
                    var _map1111 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Serial = new Dictionary<long, List<UCellSerial>>(_map1111.Count);
                    for(int _i1112 = 0; _i1112 < _map1111.Count; ++_i1112)
                    {
                      long _key1113;
                      List<UCellSerial> _val1114;
                      _key1113 = await iprot.ReadI64Async(cancellationToken);
                      {
                        var _list1115 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val1114 = new List<UCellSerial>(_list1115.Count);
                        for(int _i1116 = 0; _i1116 < _list1115.Count; ++_i1116)
                        {
                          UCellSerial _elem1117;
                          _elem1117 = new UCellSerial();
                          await _elem1117.ReadAsync(iprot, cancellationToken);
                          _val1114.Add(_elem1117);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Serial[_key1113] = _val1114;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I64)
                {
                  Updater_id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1118 = new TStruct("update_by_types_args");
          await oprot.WriteStructBeginAsync(tmp1118, cancellationToken);
          var tmp1119 = new TField();
          if((Plain != null) && __isset.@plain)
          {
            tmp1119.Name = "plain";
            tmp1119.Type = TType.Map;
            tmp1119.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1119, cancellationToken);
            await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Plain.Count), cancellationToken);
            foreach (long _iter1120 in Plain.Keys)
            {
              await oprot.WriteI64Async(_iter1120, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Plain[_iter1120].Count), cancellationToken);
              foreach (UCellPlain _iter1121 in Plain[_iter1120])
              {
                await _iter1121.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Counter != null) && __isset.@counter)
          {
            tmp1119.Name = "counter";
            tmp1119.Type = TType.Map;
            tmp1119.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp1119, cancellationToken);
            await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Counter.Count), cancellationToken);
            foreach (long _iter1122 in Counter.Keys)
            {
              await oprot.WriteI64Async(_iter1122, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Counter[_iter1122].Count), cancellationToken);
              foreach (UCellCounter _iter1123 in Counter[_iter1122])
              {
                await _iter1123.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Serial != null) && __isset.@serial)
          {
            tmp1119.Name = "serial";
            tmp1119.Type = TType.Map;
            tmp1119.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp1119, cancellationToken);
            await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Serial.Count), cancellationToken);
            foreach (long _iter1124 in Serial.Keys)
            {
              await oprot.WriteI64Async(_iter1124, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Serial[_iter1124].Count), cancellationToken);
              foreach (UCellSerial _iter1125 in Serial[_iter1124])
              {
                await _iter1125.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.updater_id)
          {
            tmp1119.Name = "updater_id";
            tmp1119.Type = TType.I64;
            tmp1119.ID = 4;
            await oprot.WriteFieldBeginAsync(tmp1119, cancellationToken);
            await oprot.WriteI64Async(Updater_id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_by_types_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@plain == other.__isset.@plain) && ((!__isset.@plain) || (global::System.Object.Equals(Plain, other.Plain))))
          && ((__isset.@counter == other.__isset.@counter) && ((!__isset.@counter) || (global::System.Object.Equals(Counter, other.Counter))))
          && ((__isset.@serial == other.__isset.@serial) && ((!__isset.@serial) || (global::System.Object.Equals(Serial, other.Serial))))
          && ((__isset.updater_id == other.__isset.updater_id) && ((!__isset.updater_id) || (global::System.Object.Equals(Updater_id, other.Updater_id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Plain != null) && __isset.@plain)
          {
            hashcode = (hashcode * 397) + Plain.GetHashCode();
          }
          if((Counter != null) && __isset.@counter)
          {
            hashcode = (hashcode * 397) + Counter.GetHashCode();
          }
          if((Serial != null) && __isset.@serial)
          {
            hashcode = (hashcode * 397) + Serial.GetHashCode();
          }
          if(__isset.updater_id)
          {
            hashcode = (hashcode * 397) + Updater_id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1126 = new StringBuilder("update_by_types_args(");
        int tmp1127 = 0;
        if((Plain != null) && __isset.@plain)
        {
          if(0 < tmp1127++) { tmp1126.Append(", "); }
          tmp1126.Append("Plain: ");
          Plain.ToString(tmp1126);
        }
        if((Counter != null) && __isset.@counter)
        {
          if(0 < tmp1127++) { tmp1126.Append(", "); }
          tmp1126.Append("Counter: ");
          Counter.ToString(tmp1126);
        }
        if((Serial != null) && __isset.@serial)
        {
          if(0 < tmp1127++) { tmp1126.Append(", "); }
          tmp1126.Append("Serial: ");
          Serial.ToString(tmp1126);
        }
        if(__isset.updater_id)
        {
          if(0 < tmp1127++) { tmp1126.Append(", "); }
          tmp1126.Append("Updater_id: ");
          Updater_id.ToString(tmp1126);
        }
        tmp1126.Append(')');
        return tmp1126.ToString();
      }
    }


    public partial class update_by_types_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.@e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @e;
      }

      public update_by_types_result()
      {
      }

      public update_by_types_result DeepCopy()
      {
        var tmp1128 = new update_by_types_result()
        if((E != null) && __isset.@e)
        {
          tmp1128.E = (Exception)this.E.DeepCopy();
        }
        tmp1128.__isset.@e = this.__isset.@e;
        return tmp1128;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1129 = new TStruct("update_by_types_result");
          await oprot.WriteStructBeginAsync(tmp1129, cancellationToken);
          var tmp1130 = new TField();

          if(this.__isset.@e)
          {
            if (E != null)
            {
              tmp1130.Name = "E";
              tmp1130.Type = TType.Struct;
              tmp1130.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1130, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_by_types_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.@e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1131 = new StringBuilder("update_by_types_result(");
        int tmp1132 = 0;
        if((E != null) && __isset.@e)
        {
          if(0 < tmp1132++) { tmp1131.Append(", "); }
          tmp1131.Append("E: ");
          E.ToString(tmp1131);
        }
        tmp1131.Append(')');
        return tmp1131.ToString();
      }
    }


    public partial class mng_column_args : TBase
    {
      private SchemaFunc _func;
      private Schema _schema;

      /// <summary>
      /// The Action Function to use
      /// 
      /// <seealso cref="global::.SchemaFunc"/>
      /// </summary>
      public SchemaFunc Func
      {
        get
        {
          return _func;
        }
        set
        {
          __isset.@func = true;
          this._func = value;
        }
      }

      /// <summary>
      /// The Schema for the Action
      /// </summary>
      public Schema Schema
      {
        get
        {
          return _schema;
        }
        set
        {
          __isset.@schema = true;
          this._schema = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @func;
        public bool @schema;
      }

      public mng_column_args()
      {
      }

      public mng_column_args DeepCopy()
      {
        var tmp1133 = new mng_column_args()
        if(__isset.@func)
        {
          tmp1133.Func = this.Func;
        }
        tmp1133.__isset.@func = this.__isset.@func;
        if((Schema != null) && __isset.@schema)
        {
          tmp1133.Schema = (Schema)this.Schema.DeepCopy();
        }
        tmp1133.__isset.@schema = this.__isset.@schema;
        return tmp1133;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Func = (SchemaFunc)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Struct)
                {
                  Schema = new Schema();
                  await Schema.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1134 = new TStruct("mng_column_args");
          await oprot.WriteStructBeginAsync(tmp1134, cancellationToken);
          var tmp1135 = new TField();
          if(__isset.@func)
          {
            tmp1135.Name = "func";
            tmp1135.Type = TType.I32;
            tmp1135.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1135, cancellationToken);
            await oprot.WriteI32Async((int)Func, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Schema != null) && __isset.@schema)
          {
            tmp1135.Name = "schema";
            tmp1135.Type = TType.Struct;
            tmp1135.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp1135, cancellationToken);
            await Schema.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is mng_column_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@func == other.__isset.@func) && ((!__isset.@func) || (global::System.Object.Equals(Func, other.Func))))
          && ((__isset.@schema == other.__isset.@schema) && ((!__isset.@schema) || (global::System.Object.Equals(Schema, other.Schema))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.@func)
          {
            hashcode = (hashcode * 397) + Func.GetHashCode();
          }
          if((Schema != null) && __isset.@schema)
          {
            hashcode = (hashcode * 397) + Schema.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1136 = new StringBuilder("mng_column_args(");
        int tmp1137 = 0;
        if(__isset.@func)
        {
          if(0 < tmp1137++) { tmp1136.Append(", "); }
          tmp1136.Append("Func: ");
          Func.ToString(tmp1136);
        }
        if((Schema != null) && __isset.@schema)
        {
          if(0 < tmp1137++) { tmp1136.Append(", "); }
          tmp1136.Append("Schema: ");
          Schema.ToString(tmp1136);
        }
        tmp1136.Append(')');
        return tmp1136.ToString();
      }
    }


    public partial class mng_column_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.@e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @e;
      }

      public mng_column_result()
      {
      }

      public mng_column_result DeepCopy()
      {
        var tmp1138 = new mng_column_result()
        if((E != null) && __isset.@e)
        {
          tmp1138.E = (Exception)this.E.DeepCopy();
        }
        tmp1138.__isset.@e = this.__isset.@e;
        return tmp1138;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1139 = new TStruct("mng_column_result");
          await oprot.WriteStructBeginAsync(tmp1139, cancellationToken);
          var tmp1140 = new TField();

          if(this.__isset.@e)
          {
            if (E != null)
            {
              tmp1140.Name = "E";
              tmp1140.Type = TType.Struct;
              tmp1140.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1140, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is mng_column_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.@e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1141 = new StringBuilder("mng_column_result(");
        int tmp1142 = 0;
        if((E != null) && __isset.@e)
        {
          if(0 < tmp1142++) { tmp1141.Append(", "); }
          tmp1141.Append("E: ");
          E.ToString(tmp1141);
        }
        tmp1141.Append(')');
        return tmp1141.ToString();
      }
    }


    public partial class list_columns_args : TBase
    {
      private SpecSchemas _spec;

      /// <summary>
      /// The Schemas Specifications to match Schema for response
      /// </summary>
      public SpecSchemas Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.@spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @spec;
      }

      public list_columns_args()
      {
      }

      public list_columns_args DeepCopy()
      {
        var tmp1143 = new list_columns_args()
        if((Spec != null) && __isset.@spec)
        {
          tmp1143.Spec = (SpecSchemas)this.Spec.DeepCopy();
        }
        tmp1143.__isset.@spec = this.__isset.@spec;
        return tmp1143;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecSchemas();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1144 = new TStruct("list_columns_args");
          await oprot.WriteStructBeginAsync(tmp1144, cancellationToken);
          var tmp1145 = new TField();
          if((Spec != null) && __isset.@spec)
          {
            tmp1145.Name = "spec";
            tmp1145.Type = TType.Struct;
            tmp1145.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1145, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is list_columns_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@spec == other.__isset.@spec) && ((!__isset.@spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.@spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1146 = new StringBuilder("list_columns_args(");
        int tmp1147 = 0;
        if((Spec != null) && __isset.@spec)
        {
          if(0 < tmp1147++) { tmp1146.Append(", "); }
          tmp1146.Append("Spec: ");
          Spec.ToString(tmp1146);
        }
        tmp1146.Append(')');
        return tmp1146.ToString();
      }
    }


    public partial class list_columns_result : TBase
    {
      private List<Schema> _success;
      private Exception _e;

      public List<Schema> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.@e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
        public bool @e;
      }

      public list_columns_result()
      {
      }

      public list_columns_result DeepCopy()
      {
        var tmp1148 = new list_columns_result()
        if((Success != null) && __isset.@success)
        {
          tmp1148.Success = this.Success.DeepCopy();
        }
        tmp1148.__isset.@success = this.__isset.@success;
        if((E != null) && __isset.@e)
        {
          tmp1148.E = (Exception)this.E.DeepCopy();
        }
        tmp1148.__isset.@e = this.__isset.@e;
        return tmp1148;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list1149 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<Schema>(_list1149.Count);
                    for(int _i1150 = 0; _i1150 < _list1149.Count; ++_i1150)
                    {
                      Schema _elem1151;
                      _elem1151 = new Schema();
                      await _elem1151.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem1151);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1152 = new TStruct("list_columns_result");
          await oprot.WriteStructBeginAsync(tmp1152, cancellationToken);
          var tmp1153 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp1153.Name = "Success";
              tmp1153.Type = TType.List;
              tmp1153.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1153, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (Schema _iter1154 in Success)
              {
                await _iter1154.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.@e)
          {
            if (E != null)
            {
              tmp1153.Name = "E";
              tmp1153.Type = TType.Struct;
              tmp1153.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1153, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is list_columns_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.@e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1155 = new StringBuilder("list_columns_result(");
        int tmp1156 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp1156++) { tmp1155.Append(", "); }
          tmp1155.Append("Success: ");
          Success.ToString(tmp1155);
        }
        if((E != null) && __isset.@e)
        {
          if(0 < tmp1156++) { tmp1155.Append(", "); }
          tmp1155.Append("E: ");
          E.ToString(tmp1155);
        }
        tmp1155.Append(')');
        return tmp1155.ToString();
      }
    }


    public partial class compact_columns_args : TBase
    {
      private SpecSchemas _spec;

      /// <summary>
      /// The Schemas Specifications to match columns to Compact
      /// </summary>
      public SpecSchemas Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.@spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @spec;
      }

      public compact_columns_args()
      {
      }

      public compact_columns_args DeepCopy()
      {
        var tmp1157 = new compact_columns_args()
        if((Spec != null) && __isset.@spec)
        {
          tmp1157.Spec = (SpecSchemas)this.Spec.DeepCopy();
        }
        tmp1157.__isset.@spec = this.__isset.@spec;
        return tmp1157;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecSchemas();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1158 = new TStruct("compact_columns_args");
          await oprot.WriteStructBeginAsync(tmp1158, cancellationToken);
          var tmp1159 = new TField();
          if((Spec != null) && __isset.@spec)
          {
            tmp1159.Name = "spec";
            tmp1159.Type = TType.Struct;
            tmp1159.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1159, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is compact_columns_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@spec == other.__isset.@spec) && ((!__isset.@spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.@spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1160 = new StringBuilder("compact_columns_args(");
        int tmp1161 = 0;
        if((Spec != null) && __isset.@spec)
        {
          if(0 < tmp1161++) { tmp1160.Append(", "); }
          tmp1160.Append("Spec: ");
          Spec.ToString(tmp1160);
        }
        tmp1160.Append(')');
        return tmp1160.ToString();
      }
    }


    public partial class compact_columns_result : TBase
    {
      private List<CompactResult> _success;
      private Exception _e;

      public List<CompactResult> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.@e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
        public bool @e;
      }

      public compact_columns_result()
      {
      }

      public compact_columns_result DeepCopy()
      {
        var tmp1162 = new compact_columns_result()
        if((Success != null) && __isset.@success)
        {
          tmp1162.Success = this.Success.DeepCopy();
        }
        tmp1162.__isset.@success = this.__isset.@success;
        if((E != null) && __isset.@e)
        {
          tmp1162.E = (Exception)this.E.DeepCopy();
        }
        tmp1162.__isset.@e = this.__isset.@e;
        return tmp1162;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list1163 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<CompactResult>(_list1163.Count);
                    for(int _i1164 = 0; _i1164 < _list1163.Count; ++_i1164)
                    {
                      CompactResult _elem1165;
                      _elem1165 = new CompactResult();
                      await _elem1165.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem1165);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1166 = new TStruct("compact_columns_result");
          await oprot.WriteStructBeginAsync(tmp1166, cancellationToken);
          var tmp1167 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp1167.Name = "Success";
              tmp1167.Type = TType.List;
              tmp1167.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1167, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (CompactResult _iter1168 in Success)
              {
                await _iter1168.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.@e)
          {
            if (E != null)
            {
              tmp1167.Name = "E";
              tmp1167.Type = TType.Struct;
              tmp1167.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1167, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is compact_columns_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.@e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1169 = new StringBuilder("compact_columns_result(");
        int tmp1170 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp1170++) { tmp1169.Append(", "); }
          tmp1169.Append("Success: ");
          Success.ToString(tmp1169);
        }
        if((E != null) && __isset.@e)
        {
          if(0 < tmp1170++) { tmp1169.Append(", "); }
          tmp1169.Append("E: ");
          E.ToString(tmp1169);
        }
        tmp1169.Append(')');
        return tmp1169.ToString();
      }
    }


    public partial class scan_args : TBase
    {
      private SpecScan _spec;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.@spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @spec;
      }

      public scan_args()
      {
      }

      public scan_args DeepCopy()
      {
        var tmp1171 = new scan_args()
        if((Spec != null) && __isset.@spec)
        {
          tmp1171.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp1171.__isset.@spec = this.__isset.@spec;
        return tmp1171;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1172 = new TStruct("scan_args");
          await oprot.WriteStructBeginAsync(tmp1172, cancellationToken);
          var tmp1173 = new TField();
          if((Spec != null) && __isset.@spec)
          {
            tmp1173.Name = "spec";
            tmp1173.Type = TType.Struct;
            tmp1173.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1173, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@spec == other.__isset.@spec) && ((!__isset.@spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.@spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1174 = new StringBuilder("scan_args(");
        int tmp1175 = 0;
        if((Spec != null) && __isset.@spec)
        {
          if(0 < tmp1175++) { tmp1174.Append(", "); }
          tmp1174.Append("Spec: ");
          Spec.ToString(tmp1174);
        }
        tmp1174.Append(')');
        return tmp1174.ToString();
      }
    }


    public partial class scan_result : TBase
    {
      private Cells _success;
      private Exception _e;

      public Cells Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.@e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
        public bool @e;
      }

      public scan_result()
      {
      }

      public scan_result DeepCopy()
      {
        var tmp1176 = new scan_result()
        if((Success != null) && __isset.@success)
        {
          tmp1176.Success = (Cells)this.Success.DeepCopy();
        }
        tmp1176.__isset.@success = this.__isset.@success;
        if((E != null) && __isset.@e)
        {
          tmp1176.E = (Exception)this.E.DeepCopy();
        }
        tmp1176.__isset.@e = this.__isset.@e;
        return tmp1176;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new Cells();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1177 = new TStruct("scan_result");
          await oprot.WriteStructBeginAsync(tmp1177, cancellationToken);
          var tmp1178 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp1178.Name = "Success";
              tmp1178.Type = TType.Struct;
              tmp1178.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1178, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.@e)
          {
            if (E != null)
            {
              tmp1178.Name = "E";
              tmp1178.Type = TType.Struct;
              tmp1178.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1178, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.@e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1179 = new StringBuilder("scan_result(");
        int tmp1180 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp1180++) { tmp1179.Append(", "); }
          tmp1179.Append("Success: ");
          Success.ToString(tmp1179);
        }
        if((E != null) && __isset.@e)
        {
          if(0 < tmp1180++) { tmp1179.Append(", "); }
          tmp1179.Append("E: ");
          E.ToString(tmp1179);
        }
        tmp1179.Append(')');
        return tmp1179.ToString();
      }
    }


    public partial class scan_rslt_on_column_args : TBase
    {
      private SpecScan _spec;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.@spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @spec;
      }

      public scan_rslt_on_column_args()
      {
      }

      public scan_rslt_on_column_args DeepCopy()
      {
        var tmp1181 = new scan_rslt_on_column_args()
        if((Spec != null) && __isset.@spec)
        {
          tmp1181.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp1181.__isset.@spec = this.__isset.@spec;
        return tmp1181;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1182 = new TStruct("scan_rslt_on_column_args");
          await oprot.WriteStructBeginAsync(tmp1182, cancellationToken);
          var tmp1183 = new TField();
          if((Spec != null) && __isset.@spec)
          {
            tmp1183.Name = "spec";
            tmp1183.Type = TType.Struct;
            tmp1183.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1183, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_column_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@spec == other.__isset.@spec) && ((!__isset.@spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.@spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1184 = new StringBuilder("scan_rslt_on_column_args(");
        int tmp1185 = 0;
        if((Spec != null) && __isset.@spec)
        {
          if(0 < tmp1185++) { tmp1184.Append(", "); }
          tmp1184.Append("Spec: ");
          Spec.ToString(tmp1184);
        }
        tmp1184.Append(')');
        return tmp1184.ToString();
      }
    }


    public partial class scan_rslt_on_column_result : TBase
    {
      private Dictionary<string, cCells> _success;
      private Exception _e;

      public Dictionary<string, cCells> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.@e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
        public bool @e;
      }

      public scan_rslt_on_column_result()
      {
      }

      public scan_rslt_on_column_result DeepCopy()
      {
        var tmp1186 = new scan_rslt_on_column_result()
        if((Success != null) && __isset.@success)
        {
          tmp1186.Success = this.Success.DeepCopy();
        }
        tmp1186.__isset.@success = this.__isset.@success;
        if((E != null) && __isset.@e)
        {
          tmp1186.E = (Exception)this.E.DeepCopy();
        }
        tmp1186.__isset.@e = this.__isset.@e;
        return tmp1186;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Map)
                {
                  {
                    var _map1187 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Success = new Dictionary<string, cCells>(_map1187.Count);
                    for(int _i1188 = 0; _i1188 < _map1187.Count; ++_i1188)
                    {
                      string _key1189;
                      cCells _val1190;
                      _key1189 = await iprot.ReadStringAsync(cancellationToken);
                      _val1190 = new cCells();
                      await _val1190.ReadAsync(iprot, cancellationToken);
                      Success[_key1189] = _val1190;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1191 = new TStruct("scan_rslt_on_column_result");
          await oprot.WriteStructBeginAsync(tmp1191, cancellationToken);
          var tmp1192 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp1192.Name = "Success";
              tmp1192.Type = TType.Map;
              tmp1192.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1192, cancellationToken);
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Success.Count), cancellationToken);
              foreach (string _iter1193 in Success.Keys)
              {
                await oprot.WriteStringAsync(_iter1193, cancellationToken);
                await Success[_iter1193].WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.@e)
          {
            if (E != null)
            {
              tmp1192.Name = "E";
              tmp1192.Type = TType.Struct;
              tmp1192.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1192, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_column_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.@e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1194 = new StringBuilder("scan_rslt_on_column_result(");
        int tmp1195 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp1195++) { tmp1194.Append(", "); }
          tmp1194.Append("Success: ");
          Success.ToString(tmp1194);
        }
        if((E != null) && __isset.@e)
        {
          if(0 < tmp1195++) { tmp1194.Append(", "); }
          tmp1194.Append("E: ");
          E.ToString(tmp1194);
        }
        tmp1194.Append(')');
        return tmp1194.ToString();
      }
    }


    public partial class scan_rslt_on_key_args : TBase
    {
      private SpecScan _spec;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.@spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @spec;
      }

      public scan_rslt_on_key_args()
      {
      }

      public scan_rslt_on_key_args DeepCopy()
      {
        var tmp1196 = new scan_rslt_on_key_args()
        if((Spec != null) && __isset.@spec)
        {
          tmp1196.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp1196.__isset.@spec = this.__isset.@spec;
        return tmp1196;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1197 = new TStruct("scan_rslt_on_key_args");
          await oprot.WriteStructBeginAsync(tmp1197, cancellationToken);
          var tmp1198 = new TField();
          if((Spec != null) && __isset.@spec)
          {
            tmp1198.Name = "spec";
            tmp1198.Type = TType.Struct;
            tmp1198.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1198, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_key_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@spec == other.__isset.@spec) && ((!__isset.@spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.@spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1199 = new StringBuilder("scan_rslt_on_key_args(");
        int tmp1200 = 0;
        if((Spec != null) && __isset.@spec)
        {
          if(0 < tmp1200++) { tmp1199.Append(", "); }
          tmp1199.Append("Spec: ");
          Spec.ToString(tmp1199);
        }
        tmp1199.Append(')');
        return tmp1199.ToString();
      }
    }


    public partial class scan_rslt_on_key_result : TBase
    {
      private List<kCells> _success;
      private Exception _e;

      public List<kCells> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.@e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
        public bool @e;
      }

      public scan_rslt_on_key_result()
      {
      }

      public scan_rslt_on_key_result DeepCopy()
      {
        var tmp1201 = new scan_rslt_on_key_result()
        if((Success != null) && __isset.@success)
        {
          tmp1201.Success = this.Success.DeepCopy();
        }
        tmp1201.__isset.@success = this.__isset.@success;
        if((E != null) && __isset.@e)
        {
          tmp1201.E = (Exception)this.E.DeepCopy();
        }
        tmp1201.__isset.@e = this.__isset.@e;
        return tmp1201;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list1202 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<kCells>(_list1202.Count);
                    for(int _i1203 = 0; _i1203 < _list1202.Count; ++_i1203)
                    {
                      kCells _elem1204;
                      _elem1204 = new kCells();
                      await _elem1204.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem1204);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1205 = new TStruct("scan_rslt_on_key_result");
          await oprot.WriteStructBeginAsync(tmp1205, cancellationToken);
          var tmp1206 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp1206.Name = "Success";
              tmp1206.Type = TType.List;
              tmp1206.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1206, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (kCells _iter1207 in Success)
              {
                await _iter1207.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.@e)
          {
            if (E != null)
            {
              tmp1206.Name = "E";
              tmp1206.Type = TType.Struct;
              tmp1206.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1206, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_key_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.@e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1208 = new StringBuilder("scan_rslt_on_key_result(");
        int tmp1209 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp1209++) { tmp1208.Append(", "); }
          tmp1208.Append("Success: ");
          Success.ToString(tmp1208);
        }
        if((E != null) && __isset.@e)
        {
          if(0 < tmp1209++) { tmp1208.Append(", "); }
          tmp1208.Append("E: ");
          E.ToString(tmp1208);
        }
        tmp1208.Append(')');
        return tmp1208.ToString();
      }
    }


    public partial class scan_rslt_on_fraction_args : TBase
    {
      private SpecScan _spec;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.@spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @spec;
      }

      public scan_rslt_on_fraction_args()
      {
      }

      public scan_rslt_on_fraction_args DeepCopy()
      {
        var tmp1210 = new scan_rslt_on_fraction_args()
        if((Spec != null) && __isset.@spec)
        {
          tmp1210.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp1210.__isset.@spec = this.__isset.@spec;
        return tmp1210;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1211 = new TStruct("scan_rslt_on_fraction_args");
          await oprot.WriteStructBeginAsync(tmp1211, cancellationToken);
          var tmp1212 = new TField();
          if((Spec != null) && __isset.@spec)
          {
            tmp1212.Name = "spec";
            tmp1212.Type = TType.Struct;
            tmp1212.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1212, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_fraction_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@spec == other.__isset.@spec) && ((!__isset.@spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.@spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1213 = new StringBuilder("scan_rslt_on_fraction_args(");
        int tmp1214 = 0;
        if((Spec != null) && __isset.@spec)
        {
          if(0 < tmp1214++) { tmp1213.Append(", "); }
          tmp1213.Append("Spec: ");
          Spec.ToString(tmp1213);
        }
        tmp1213.Append(')');
        return tmp1213.ToString();
      }
    }


    public partial class scan_rslt_on_fraction_result : TBase
    {
      private FCells _success;
      private Exception _e;

      public FCells Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.@e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
        public bool @e;
      }

      public scan_rslt_on_fraction_result()
      {
      }

      public scan_rslt_on_fraction_result DeepCopy()
      {
        var tmp1215 = new scan_rslt_on_fraction_result()
        if((Success != null) && __isset.@success)
        {
          tmp1215.Success = (FCells)this.Success.DeepCopy();
        }
        tmp1215.__isset.@success = this.__isset.@success;
        if((E != null) && __isset.@e)
        {
          tmp1215.E = (Exception)this.E.DeepCopy();
        }
        tmp1215.__isset.@e = this.__isset.@e;
        return tmp1215;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new FCells();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1216 = new TStruct("scan_rslt_on_fraction_result");
          await oprot.WriteStructBeginAsync(tmp1216, cancellationToken);
          var tmp1217 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp1217.Name = "Success";
              tmp1217.Type = TType.Struct;
              tmp1217.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1217, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.@e)
          {
            if (E != null)
            {
              tmp1217.Name = "E";
              tmp1217.Type = TType.Struct;
              tmp1217.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1217, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_fraction_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.@e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1218 = new StringBuilder("scan_rslt_on_fraction_result(");
        int tmp1219 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp1219++) { tmp1218.Append(", "); }
          tmp1218.Append("Success: ");
          Success.ToString(tmp1218);
        }
        if((E != null) && __isset.@e)
        {
          if(0 < tmp1219++) { tmp1218.Append(", "); }
          tmp1218.Append("E: ");
          E.ToString(tmp1218);
        }
        tmp1218.Append(')');
        return tmp1218.ToString();
      }
    }


    public partial class scan_rslt_on_args : TBase
    {
      private SpecScan _spec;
      private CellsResult _rslt;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.@spec = true;
          this._spec = value;
        }
      }

      /// <summary>
      /// The Type of Cells Result for the response
      /// 
      /// <seealso cref="global::.CellsResult"/>
      /// </summary>
      public CellsResult Rslt
      {
        get
        {
          return _rslt;
        }
        set
        {
          __isset.@rslt = true;
          this._rslt = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @spec;
        public bool @rslt;
      }

      public scan_rslt_on_args()
      {
      }

      public scan_rslt_on_args DeepCopy()
      {
        var tmp1220 = new scan_rslt_on_args()
        if((Spec != null) && __isset.@spec)
        {
          tmp1220.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp1220.__isset.@spec = this.__isset.@spec;
        if(__isset.@rslt)
        {
          tmp1220.Rslt = this.Rslt;
        }
        tmp1220.__isset.@rslt = this.__isset.@rslt;
        return tmp1220;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Rslt = (CellsResult)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1221 = new TStruct("scan_rslt_on_args");
          await oprot.WriteStructBeginAsync(tmp1221, cancellationToken);
          var tmp1222 = new TField();
          if((Spec != null) && __isset.@spec)
          {
            tmp1222.Name = "spec";
            tmp1222.Type = TType.Struct;
            tmp1222.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1222, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.@rslt)
          {
            tmp1222.Name = "rslt";
            tmp1222.Type = TType.I32;
            tmp1222.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp1222, cancellationToken);
            await oprot.WriteI32Async((int)Rslt, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@spec == other.__isset.@spec) && ((!__isset.@spec) || (global::System.Object.Equals(Spec, other.Spec))))
          && ((__isset.@rslt == other.__isset.@rslt) && ((!__isset.@rslt) || (global::System.Object.Equals(Rslt, other.Rslt))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.@spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
          if(__isset.@rslt)
          {
            hashcode = (hashcode * 397) + Rslt.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1223 = new StringBuilder("scan_rslt_on_args(");
        int tmp1224 = 0;
        if((Spec != null) && __isset.@spec)
        {
          if(0 < tmp1224++) { tmp1223.Append(", "); }
          tmp1223.Append("Spec: ");
          Spec.ToString(tmp1223);
        }
        if(__isset.@rslt)
        {
          if(0 < tmp1224++) { tmp1223.Append(", "); }
          tmp1223.Append("Rslt: ");
          Rslt.ToString(tmp1223);
        }
        tmp1223.Append(')');
        return tmp1223.ToString();
      }
    }


    public partial class scan_rslt_on_result : TBase
    {
      private CellsGroup _success;
      private Exception _e;

      public CellsGroup Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }

      /// <summary>
      /// The Base Exception
      /// </summary>
      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.@e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
        public bool @e;
      }

      public scan_rslt_on_result()
      {
      }

      public scan_rslt_on_result DeepCopy()
      {
        var tmp1225 = new scan_rslt_on_result()
        if((Success != null) && __isset.@success)
        {
          tmp1225.Success = (CellsGroup)this.Success.DeepCopy();
        }
        tmp1225.__isset.@success = this.__isset.@success;
        if((E != null) && __isset.@e)
        {
          tmp1225.E = (Exception)this.E.DeepCopy();
        }
        tmp1225.__isset.@e = this.__isset.@e;
        return tmp1225;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new CellsGroup();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1226 = new TStruct("scan_rslt_on_result");
          await oprot.WriteStructBeginAsync(tmp1226, cancellationToken);
          var tmp1227 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp1227.Name = "Success";
              tmp1227.Type = TType.Struct;
              tmp1227.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1227, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.@e)
          {
            if (E != null)
            {
              tmp1227.Name = "E";
              tmp1227.Type = TType.Struct;
              tmp1227.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1227, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.@e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1228 = new StringBuilder("scan_rslt_on_result(");
        int tmp1229 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp1229++) { tmp1228.Append(", "); }
          tmp1228.Append("Success: ");
          Success.ToString(tmp1228);
        }
        if((E != null) && __isset.@e)
        {
          if(0 < tmp1229++) { tmp1228.Append(", "); }
          tmp1228.Append("E: ");
          E.ToString(tmp1228);
        }
        tmp1228.Append(')');
        return tmp1228.ToString();
      }
    }

  }

}
