/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


/// <summary>
/// The Schema matching Pattern
/// </summary>
public partial class SchemaPattern : TBase
{
  private Comp _comp;
  private string _value;

  /// <summary>
  /// Logical comparator to Apply
  /// 
  /// <seealso cref="global::.Comp"/>
  /// </summary>
  public Comp Comp
  {
    get
    {
      return _comp;
    }
    set
    {
      __isset.@comp = true;
      this._comp = value;
    }
  }

  /// <summary>
  /// The patern value to match against
  /// </summary>
  public string Value
  {
    get
    {
      return _value;
    }
    set
    {
      __isset.@value = true;
      this._value = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool @comp;
    public bool @value;
  }

  public SchemaPattern()
  {
  }

  public SchemaPattern DeepCopy()
  {
    var tmp14 = new SchemaPattern()
    if(__isset.@comp)
    {
      tmp14.Comp = this.Comp;
    }
    tmp14.__isset.@comp = this.__isset.@comp;
    if((Value != null) && __isset.@value)
    {
      tmp14.Value = this.Value;
    }
    tmp14.__isset.@value = this.__isset.@value;
    return tmp14;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32)
            {
              Comp = (Comp)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              Value = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp15 = new TStruct("SchemaPattern");
      await oprot.WriteStructBeginAsync(tmp15, cancellationToken);
      var tmp16 = new TField();
      if(__isset.@comp)
      {
        tmp16.Name = "comp";
        tmp16.Type = TType.I32;
        tmp16.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp16, cancellationToken);
        await oprot.WriteI32Async((int)Comp, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Value != null) && __isset.@value)
      {
        tmp16.Name = "value";
        tmp16.Type = TType.String;
        tmp16.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp16, cancellationToken);
        await oprot.WriteStringAsync(Value, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is SchemaPattern other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.@comp == other.__isset.@comp) && ((!__isset.@comp) || (global::System.Object.Equals(Comp, other.Comp))))
      && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.@comp)
      {
        hashcode = (hashcode * 397) + Comp.GetHashCode();
      }
      if((Value != null) && __isset.@value)
      {
        hashcode = (hashcode * 397) + Value.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp17 = new StringBuilder("SchemaPattern(");
    int tmp18 = 0;
    if(__isset.@comp)
    {
      if(0 < tmp18++) { tmp17.Append(", "); }
      tmp17.Append("Comp: ");
      Comp.ToString(tmp17);
    }
    if((Value != null) && __isset.@value)
    {
      if(0 < tmp18++) { tmp17.Append(", "); }
      tmp17.Append("Value: ");
      Value.ToString(tmp17);
    }
    tmp17.Append(')');
    return tmp17.ToString();
  }
}

