/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


/// <summary>
/// The Schema Patterns for the SpecSchemas
/// </summary>
public partial class SchemaPatterns : TBase
{
  private List<SchemaPattern> _names;
  private SchemaTagsPatterns _tags;

  /// <summary>
  /// The Schema patterns for selecting by Column Name
  /// </summary>
  public List<SchemaPattern> Names
  {
    get
    {
      return _names;
    }
    set
    {
      __isset.@names = true;
      this._names = value;
    }
  }

  /// <summary>
  /// The Schema patterns for selecting by Column Tags
  /// </summary>
  public SchemaTagsPatterns Tags
  {
    get
    {
      return _tags;
    }
    set
    {
      __isset.@tags = true;
      this._tags = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool @names;
    public bool @tags;
  }

  public SchemaPatterns()
  {
  }

  public SchemaPatterns DeepCopy()
  {
    var tmp28 = new SchemaPatterns()
    if((Names != null) && __isset.@names)
    {
      tmp28.Names = this.Names.DeepCopy();
    }
    tmp28.__isset.@names = this.__isset.@names;
    if((Tags != null) && __isset.@tags)
    {
      tmp28.Tags = (SchemaTagsPatterns)this.Tags.DeepCopy();
    }
    tmp28.__isset.@tags = this.__isset.@tags;
    return tmp28;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List)
            {
              {
                var _list29 = await iprot.ReadListBeginAsync(cancellationToken);
                Names = new List<SchemaPattern>(_list29.Count);
                for(int _i30 = 0; _i30 < _list29.Count; ++_i30)
                {
                  SchemaPattern _elem31;
                  _elem31 = new SchemaPattern();
                  await _elem31.ReadAsync(iprot, cancellationToken);
                  Names.Add(_elem31);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.Struct)
            {
              Tags = new SchemaTagsPatterns();
              await Tags.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp32 = new TStruct("SchemaPatterns");
      await oprot.WriteStructBeginAsync(tmp32, cancellationToken);
      var tmp33 = new TField();
      if((Names != null) && __isset.@names)
      {
        tmp33.Name = "names";
        tmp33.Type = TType.List;
        tmp33.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp33, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.Struct, Names.Count), cancellationToken);
        foreach (SchemaPattern _iter34 in Names)
        {
          await _iter34.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Tags != null) && __isset.@tags)
      {
        tmp33.Name = "tags";
        tmp33.Type = TType.Struct;
        tmp33.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp33, cancellationToken);
        await Tags.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is SchemaPatterns other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.@names == other.__isset.@names) && ((!__isset.@names) || (TCollections.Equals(Names, other.Names))))
      && ((__isset.@tags == other.__isset.@tags) && ((!__isset.@tags) || (global::System.Object.Equals(Tags, other.Tags))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((Names != null) && __isset.@names)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Names);
      }
      if((Tags != null) && __isset.@tags)
      {
        hashcode = (hashcode * 397) + Tags.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp35 = new StringBuilder("SchemaPatterns(");
    int tmp36 = 0;
    if((Names != null) && __isset.@names)
    {
      if(0 < tmp36++) { tmp35.Append(", "); }
      tmp35.Append("Names: ");
      Names.ToString(tmp35);
    }
    if((Tags != null) && __isset.@tags)
    {
      if(0 < tmp36++) { tmp35.Append(", "); }
      tmp35.Append("Tags: ");
      Tags.ToString(tmp35);
    }
    tmp35.Append(')');
    return tmp35.ToString();
  }
}

