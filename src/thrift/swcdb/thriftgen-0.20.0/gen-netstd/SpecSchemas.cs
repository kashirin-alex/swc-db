/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


/// <summary>
/// The Specs for Schemas for using with list_columns or compact_columns
/// </summary>
public partial class SpecSchemas : TBase
{
  private List<long> _cids;
  private List<string> _names;
  private SchemaPatterns _patterns;

  /// <summary>
  /// The Column IDs
  /// </summary>
  public List<long> Cids
  {
    get
    {
      return _cids;
    }
    set
    {
      __isset.@cids = true;
      this._cids = value;
    }
  }

  /// <summary>
  /// The Column Names
  /// </summary>
  public List<string> Names
  {
    get
    {
      return _names;
    }
    set
    {
      __isset.@names = true;
      this._names = value;
    }
  }

  /// <summary>
  /// The Schema's selector patterns
  /// </summary>
  public SchemaPatterns Patterns
  {
    get
    {
      return _patterns;
    }
    set
    {
      __isset.@patterns = true;
      this._patterns = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool @cids;
    public bool @names;
    public bool @patterns;
  }

  public SpecSchemas()
  {
  }

  public SpecSchemas DeepCopy()
  {
    var tmp37 = new SpecSchemas()
    if((Cids != null) && __isset.@cids)
    {
      tmp37.Cids = this.Cids.DeepCopy();
    }
    tmp37.__isset.@cids = this.__isset.@cids;
    if((Names != null) && __isset.@names)
    {
      tmp37.Names = this.Names.DeepCopy();
    }
    tmp37.__isset.@names = this.__isset.@names;
    if((Patterns != null) && __isset.@patterns)
    {
      tmp37.Patterns = (SchemaPatterns)this.Patterns.DeepCopy();
    }
    tmp37.__isset.@patterns = this.__isset.@patterns;
    return tmp37;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List)
            {
              {
                var _list38 = await iprot.ReadListBeginAsync(cancellationToken);
                Cids = new List<long>(_list38.Count);
                for(int _i39 = 0; _i39 < _list38.Count; ++_i39)
                {
                  long _elem40;
                  _elem40 = await iprot.ReadI64Async(cancellationToken);
                  Cids.Add(_elem40);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.List)
            {
              {
                var _list41 = await iprot.ReadListBeginAsync(cancellationToken);
                Names = new List<string>(_list41.Count);
                for(int _i42 = 0; _i42 < _list41.Count; ++_i42)
                {
                  string _elem43;
                  _elem43 = await iprot.ReadStringAsync(cancellationToken);
                  Names.Add(_elem43);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.Struct)
            {
              Patterns = new SchemaPatterns();
              await Patterns.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp44 = new TStruct("SpecSchemas");
      await oprot.WriteStructBeginAsync(tmp44, cancellationToken);
      var tmp45 = new TField();
      if((Cids != null) && __isset.@cids)
      {
        tmp45.Name = "cids";
        tmp45.Type = TType.List;
        tmp45.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp45, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.I64, Cids.Count), cancellationToken);
        foreach (long _iter46 in Cids)
        {
          await oprot.WriteI64Async(_iter46, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Names != null) && __isset.@names)
      {
        tmp45.Name = "names";
        tmp45.Type = TType.List;
        tmp45.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp45, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.String, Names.Count), cancellationToken);
        foreach (string _iter47 in Names)
        {
          await oprot.WriteStringAsync(_iter47, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Patterns != null) && __isset.@patterns)
      {
        tmp45.Name = "patterns";
        tmp45.Type = TType.Struct;
        tmp45.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp45, cancellationToken);
        await Patterns.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is SpecSchemas other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.@cids == other.__isset.@cids) && ((!__isset.@cids) || (TCollections.Equals(Cids, other.Cids))))
      && ((__isset.@names == other.__isset.@names) && ((!__isset.@names) || (TCollections.Equals(Names, other.Names))))
      && ((__isset.@patterns == other.__isset.@patterns) && ((!__isset.@patterns) || (global::System.Object.Equals(Patterns, other.Patterns))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((Cids != null) && __isset.@cids)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Cids);
      }
      if((Names != null) && __isset.@names)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Names);
      }
      if((Patterns != null) && __isset.@patterns)
      {
        hashcode = (hashcode * 397) + Patterns.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp48 = new StringBuilder("SpecSchemas(");
    int tmp49 = 0;
    if((Cids != null) && __isset.@cids)
    {
      if(0 < tmp49++) { tmp48.Append(", "); }
      tmp48.Append("Cids: ");
      Cids.ToString(tmp48);
    }
    if((Names != null) && __isset.@names)
    {
      if(0 < tmp49++) { tmp48.Append(", "); }
      tmp48.Append("Names: ");
      Names.ToString(tmp48);
    }
    if((Patterns != null) && __isset.@patterns)
    {
      if(0 < tmp49++) { tmp48.Append(", "); }
      tmp48.Append("Patterns: ");
      Patterns.ToString(tmp48);
    }
    tmp48.Append(')');
    return tmp48.ToString();
  }
}

