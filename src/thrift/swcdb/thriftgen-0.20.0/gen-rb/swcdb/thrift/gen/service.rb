#
# Autogenerated by Thrift Compiler (0.20.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'swcdb/thrift/gen/service_types'

module Swcdb
  module Thrift
    module Gen
      module Service
        class Client
          include ::Thrift::Client

          def sql_mng_column(sql)
            send_sql_mng_column(sql)
            recv_sql_mng_column()
          end

          def send_sql_mng_column(sql)
            send_message('sql_mng_column', Sql_mng_column_args, :sql => sql)
          end

          def recv_sql_mng_column()
            fname, mtype, rseqid = receive_message_begin()
            handle_exception(mtype)
            if reply_seqid(rseqid)==false
              raise "seqid reply faild"
            end
            result = receive_message(Sql_mng_column_result)
            raise result.e unless result.e.nil?
            return
          end

          def sql_list_columns(sql)
            send_sql_list_columns(sql)
            return recv_sql_list_columns()
          end

          def send_sql_list_columns(sql)
            send_message('sql_list_columns', Sql_list_columns_args, :sql => sql)
          end

          def recv_sql_list_columns()
            fname, mtype, rseqid = receive_message_begin()
            handle_exception(mtype)
            if reply_seqid(rseqid)==false
              raise "seqid reply faild"
            end
            result = receive_message(Sql_list_columns_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sql_list_columns failed: unknown result')
          end

          def sql_compact_columns(sql)
            send_sql_compact_columns(sql)
            return recv_sql_compact_columns()
          end

          def send_sql_compact_columns(sql)
            send_message('sql_compact_columns', Sql_compact_columns_args, :sql => sql)
          end

          def recv_sql_compact_columns()
            fname, mtype, rseqid = receive_message_begin()
            handle_exception(mtype)
            if reply_seqid(rseqid)==false
              raise "seqid reply faild"
            end
            result = receive_message(Sql_compact_columns_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sql_compact_columns failed: unknown result')
          end

          def sql_select_plain(sql)
            send_sql_select_plain(sql)
            return recv_sql_select_plain()
          end

          def send_sql_select_plain(sql)
            send_message('sql_select_plain', Sql_select_plain_args, :sql => sql)
          end

          def recv_sql_select_plain()
            fname, mtype, rseqid = receive_message_begin()
            handle_exception(mtype)
            if reply_seqid(rseqid)==false
              raise "seqid reply faild"
            end
            result = receive_message(Sql_select_plain_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sql_select_plain failed: unknown result')
          end

          def sql_select_counter(sql)
            send_sql_select_counter(sql)
            return recv_sql_select_counter()
          end

          def send_sql_select_counter(sql)
            send_message('sql_select_counter', Sql_select_counter_args, :sql => sql)
          end

          def recv_sql_select_counter()
            fname, mtype, rseqid = receive_message_begin()
            handle_exception(mtype)
            if reply_seqid(rseqid)==false
              raise "seqid reply faild"
            end
            result = receive_message(Sql_select_counter_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sql_select_counter failed: unknown result')
          end

          def sql_select_serial(sql)
            send_sql_select_serial(sql)
            return recv_sql_select_serial()
          end

          def send_sql_select_serial(sql)
            send_message('sql_select_serial', Sql_select_serial_args, :sql => sql)
          end

          def recv_sql_select_serial()
            fname, mtype, rseqid = receive_message_begin()
            handle_exception(mtype)
            if reply_seqid(rseqid)==false
              raise "seqid reply faild"
            end
            result = receive_message(Sql_select_serial_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sql_select_serial failed: unknown result')
          end

          def sql_select(sql)
            send_sql_select(sql)
            return recv_sql_select()
          end

          def send_sql_select(sql)
            send_message('sql_select', Sql_select_args, :sql => sql)
          end

          def recv_sql_select()
            fname, mtype, rseqid = receive_message_begin()
            handle_exception(mtype)
            if reply_seqid(rseqid)==false
              raise "seqid reply faild"
            end
            result = receive_message(Sql_select_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sql_select failed: unknown result')
          end

          def sql_select_rslt_on_column(sql)
            send_sql_select_rslt_on_column(sql)
            return recv_sql_select_rslt_on_column()
          end

          def send_sql_select_rslt_on_column(sql)
            send_message('sql_select_rslt_on_column', Sql_select_rslt_on_column_args, :sql => sql)
          end

          def recv_sql_select_rslt_on_column()
            fname, mtype, rseqid = receive_message_begin()
            handle_exception(mtype)
            if reply_seqid(rseqid)==false
              raise "seqid reply faild"
            end
            result = receive_message(Sql_select_rslt_on_column_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sql_select_rslt_on_column failed: unknown result')
          end

          def sql_select_rslt_on_key(sql)
            send_sql_select_rslt_on_key(sql)
            return recv_sql_select_rslt_on_key()
          end

          def send_sql_select_rslt_on_key(sql)
            send_message('sql_select_rslt_on_key', Sql_select_rslt_on_key_args, :sql => sql)
          end

          def recv_sql_select_rslt_on_key()
            fname, mtype, rseqid = receive_message_begin()
            handle_exception(mtype)
            if reply_seqid(rseqid)==false
              raise "seqid reply faild"
            end
            result = receive_message(Sql_select_rslt_on_key_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sql_select_rslt_on_key failed: unknown result')
          end

          def sql_select_rslt_on_fraction(sql)
            send_sql_select_rslt_on_fraction(sql)
            return recv_sql_select_rslt_on_fraction()
          end

          def send_sql_select_rslt_on_fraction(sql)
            send_message('sql_select_rslt_on_fraction', Sql_select_rslt_on_fraction_args, :sql => sql)
          end

          def recv_sql_select_rslt_on_fraction()
            fname, mtype, rseqid = receive_message_begin()
            handle_exception(mtype)
            if reply_seqid(rseqid)==false
              raise "seqid reply faild"
            end
            result = receive_message(Sql_select_rslt_on_fraction_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sql_select_rslt_on_fraction failed: unknown result')
          end

          def sql_query(sql, rslt)
            send_sql_query(sql, rslt)
            return recv_sql_query()
          end

          def send_sql_query(sql, rslt)
            send_message('sql_query', Sql_query_args, :sql => sql, :rslt => rslt)
          end

          def recv_sql_query()
            fname, mtype, rseqid = receive_message_begin()
            handle_exception(mtype)
            if reply_seqid(rseqid)==false
              raise "seqid reply faild"
            end
            result = receive_message(Sql_query_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sql_query failed: unknown result')
          end

          def sql_update(sql, updater_id)
            send_sql_update(sql, updater_id)
            recv_sql_update()
          end

          def send_sql_update(sql, updater_id)
            send_message('sql_update', Sql_update_args, :sql => sql, :updater_id => updater_id)
          end

          def recv_sql_update()
            fname, mtype, rseqid = receive_message_begin()
            handle_exception(mtype)
            if reply_seqid(rseqid)==false
              raise "seqid reply faild"
            end
            result = receive_message(Sql_update_result)
            raise result.e unless result.e.nil?
            return
          end

          def exec_sql(sql)
            send_exec_sql(sql)
            return recv_exec_sql()
          end

          def send_exec_sql(sql)
            send_message('exec_sql', Exec_sql_args, :sql => sql)
          end

          def recv_exec_sql()
            fname, mtype, rseqid = receive_message_begin()
            handle_exception(mtype)
            if reply_seqid(rseqid)==false
              raise "seqid reply faild"
            end
            result = receive_message(Exec_sql_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'exec_sql failed: unknown result')
          end

          def updater_create(buffer_size)
            send_updater_create(buffer_size)
            return recv_updater_create()
          end

          def send_updater_create(buffer_size)
            send_message('updater_create', Updater_create_args, :buffer_size => buffer_size)
          end

          def recv_updater_create()
            fname, mtype, rseqid = receive_message_begin()
            handle_exception(mtype)
            if reply_seqid(rseqid)==false
              raise "seqid reply faild"
            end
            result = receive_message(Updater_create_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updater_create failed: unknown result')
          end

          def updater_close(id)
            send_updater_close(id)
            recv_updater_close()
          end

          def send_updater_close(id)
            send_message('updater_close', Updater_close_args, :id => id)
          end

          def recv_updater_close()
            fname, mtype, rseqid = receive_message_begin()
            handle_exception(mtype)
            if reply_seqid(rseqid)==false
              raise "seqid reply faild"
            end
            result = receive_message(Updater_close_result)
            raise result.e unless result.e.nil?
            return
          end

          def update_plain(cells, updater_id)
            send_update_plain(cells, updater_id)
            recv_update_plain()
          end

          def send_update_plain(cells, updater_id)
            send_message('update_plain', Update_plain_args, :cells => cells, :updater_id => updater_id)
          end

          def recv_update_plain()
            fname, mtype, rseqid = receive_message_begin()
            handle_exception(mtype)
            if reply_seqid(rseqid)==false
              raise "seqid reply faild"
            end
            result = receive_message(Update_plain_result)
            raise result.e unless result.e.nil?
            return
          end

          def update_counter(cells, updater_id)
            send_update_counter(cells, updater_id)
            recv_update_counter()
          end

          def send_update_counter(cells, updater_id)
            send_message('update_counter', Update_counter_args, :cells => cells, :updater_id => updater_id)
          end

          def recv_update_counter()
            fname, mtype, rseqid = receive_message_begin()
            handle_exception(mtype)
            if reply_seqid(rseqid)==false
              raise "seqid reply faild"
            end
            result = receive_message(Update_counter_result)
            raise result.e unless result.e.nil?
            return
          end

          def update_serial(cells, updater_id)
            send_update_serial(cells, updater_id)
            recv_update_serial()
          end

          def send_update_serial(cells, updater_id)
            send_message('update_serial', Update_serial_args, :cells => cells, :updater_id => updater_id)
          end

          def recv_update_serial()
            fname, mtype, rseqid = receive_message_begin()
            handle_exception(mtype)
            if reply_seqid(rseqid)==false
              raise "seqid reply faild"
            end
            result = receive_message(Update_serial_result)
            raise result.e unless result.e.nil?
            return
          end

          def update_by_types(plain, counter, serial, updater_id)
            send_update_by_types(plain, counter, serial, updater_id)
            recv_update_by_types()
          end

          def send_update_by_types(plain, counter, serial, updater_id)
            send_message('update_by_types', Update_by_types_args, :plain => plain, :counter => counter, :serial => serial, :updater_id => updater_id)
          end

          def recv_update_by_types()
            fname, mtype, rseqid = receive_message_begin()
            handle_exception(mtype)
            if reply_seqid(rseqid)==false
              raise "seqid reply faild"
            end
            result = receive_message(Update_by_types_result)
            raise result.e unless result.e.nil?
            return
          end

          def mng_column(func, schema)
            send_mng_column(func, schema)
            recv_mng_column()
          end

          def send_mng_column(func, schema)
            send_message('mng_column', Mng_column_args, :func => func, :schema => schema)
          end

          def recv_mng_column()
            fname, mtype, rseqid = receive_message_begin()
            handle_exception(mtype)
            if reply_seqid(rseqid)==false
              raise "seqid reply faild"
            end
            result = receive_message(Mng_column_result)
            raise result.e unless result.e.nil?
            return
          end

          def list_columns(spec)
            send_list_columns(spec)
            return recv_list_columns()
          end

          def send_list_columns(spec)
            send_message('list_columns', List_columns_args, :spec => spec)
          end

          def recv_list_columns()
            fname, mtype, rseqid = receive_message_begin()
            handle_exception(mtype)
            if reply_seqid(rseqid)==false
              raise "seqid reply faild"
            end
            result = receive_message(List_columns_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'list_columns failed: unknown result')
          end

          def compact_columns(spec)
            send_compact_columns(spec)
            return recv_compact_columns()
          end

          def send_compact_columns(spec)
            send_message('compact_columns', Compact_columns_args, :spec => spec)
          end

          def recv_compact_columns()
            fname, mtype, rseqid = receive_message_begin()
            handle_exception(mtype)
            if reply_seqid(rseqid)==false
              raise "seqid reply faild"
            end
            result = receive_message(Compact_columns_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'compact_columns failed: unknown result')
          end

          def scan(spec)
            send_scan(spec)
            return recv_scan()
          end

          def send_scan(spec)
            send_message('scan', Scan_args, :spec => spec)
          end

          def recv_scan()
            fname, mtype, rseqid = receive_message_begin()
            handle_exception(mtype)
            if reply_seqid(rseqid)==false
              raise "seqid reply faild"
            end
            result = receive_message(Scan_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'scan failed: unknown result')
          end

          def scan_rslt_on_column(spec)
            send_scan_rslt_on_column(spec)
            return recv_scan_rslt_on_column()
          end

          def send_scan_rslt_on_column(spec)
            send_message('scan_rslt_on_column', Scan_rslt_on_column_args, :spec => spec)
          end

          def recv_scan_rslt_on_column()
            fname, mtype, rseqid = receive_message_begin()
            handle_exception(mtype)
            if reply_seqid(rseqid)==false
              raise "seqid reply faild"
            end
            result = receive_message(Scan_rslt_on_column_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'scan_rslt_on_column failed: unknown result')
          end

          def scan_rslt_on_key(spec)
            send_scan_rslt_on_key(spec)
            return recv_scan_rslt_on_key()
          end

          def send_scan_rslt_on_key(spec)
            send_message('scan_rslt_on_key', Scan_rslt_on_key_args, :spec => spec)
          end

          def recv_scan_rslt_on_key()
            fname, mtype, rseqid = receive_message_begin()
            handle_exception(mtype)
            if reply_seqid(rseqid)==false
              raise "seqid reply faild"
            end
            result = receive_message(Scan_rslt_on_key_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'scan_rslt_on_key failed: unknown result')
          end

          def scan_rslt_on_fraction(spec)
            send_scan_rslt_on_fraction(spec)
            return recv_scan_rslt_on_fraction()
          end

          def send_scan_rslt_on_fraction(spec)
            send_message('scan_rslt_on_fraction', Scan_rslt_on_fraction_args, :spec => spec)
          end

          def recv_scan_rslt_on_fraction()
            fname, mtype, rseqid = receive_message_begin()
            handle_exception(mtype)
            if reply_seqid(rseqid)==false
              raise "seqid reply faild"
            end
            result = receive_message(Scan_rslt_on_fraction_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'scan_rslt_on_fraction failed: unknown result')
          end

          def scan_rslt_on(spec, rslt)
            send_scan_rslt_on(spec, rslt)
            return recv_scan_rslt_on()
          end

          def send_scan_rslt_on(spec, rslt)
            send_message('scan_rslt_on', Scan_rslt_on_args, :spec => spec, :rslt => rslt)
          end

          def recv_scan_rslt_on()
            fname, mtype, rseqid = receive_message_begin()
            handle_exception(mtype)
            if reply_seqid(rseqid)==false
              raise "seqid reply faild"
            end
            result = receive_message(Scan_rslt_on_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'scan_rslt_on failed: unknown result')
          end

        end

        class Processor
          include ::Thrift::Processor

          def process_sql_mng_column(seqid, iprot, oprot)
            args = read_args(iprot, Sql_mng_column_args)
            result = Sql_mng_column_result.new()
            begin
              @handler.sql_mng_column(args.sql)
            rescue ::Swcdb::Thrift::Gen::Exception => e
              result.e = e
            end
            write_result(result, oprot, 'sql_mng_column', seqid)
          end

          def process_sql_list_columns(seqid, iprot, oprot)
            args = read_args(iprot, Sql_list_columns_args)
            result = Sql_list_columns_result.new()
            begin
              result.success = @handler.sql_list_columns(args.sql)
            rescue ::Swcdb::Thrift::Gen::Exception => e
              result.e = e
            end
            write_result(result, oprot, 'sql_list_columns', seqid)
          end

          def process_sql_compact_columns(seqid, iprot, oprot)
            args = read_args(iprot, Sql_compact_columns_args)
            result = Sql_compact_columns_result.new()
            begin
              result.success = @handler.sql_compact_columns(args.sql)
            rescue ::Swcdb::Thrift::Gen::Exception => e
              result.e = e
            end
            write_result(result, oprot, 'sql_compact_columns', seqid)
          end

          def process_sql_select_plain(seqid, iprot, oprot)
            args = read_args(iprot, Sql_select_plain_args)
            result = Sql_select_plain_result.new()
            begin
              result.success = @handler.sql_select_plain(args.sql)
            rescue ::Swcdb::Thrift::Gen::Exception => e
              result.e = e
            end
            write_result(result, oprot, 'sql_select_plain', seqid)
          end

          def process_sql_select_counter(seqid, iprot, oprot)
            args = read_args(iprot, Sql_select_counter_args)
            result = Sql_select_counter_result.new()
            begin
              result.success = @handler.sql_select_counter(args.sql)
            rescue ::Swcdb::Thrift::Gen::Exception => e
              result.e = e
            end
            write_result(result, oprot, 'sql_select_counter', seqid)
          end

          def process_sql_select_serial(seqid, iprot, oprot)
            args = read_args(iprot, Sql_select_serial_args)
            result = Sql_select_serial_result.new()
            begin
              result.success = @handler.sql_select_serial(args.sql)
            rescue ::Swcdb::Thrift::Gen::Exception => e
              result.e = e
            end
            write_result(result, oprot, 'sql_select_serial', seqid)
          end

          def process_sql_select(seqid, iprot, oprot)
            args = read_args(iprot, Sql_select_args)
            result = Sql_select_result.new()
            begin
              result.success = @handler.sql_select(args.sql)
            rescue ::Swcdb::Thrift::Gen::Exception => e
              result.e = e
            end
            write_result(result, oprot, 'sql_select', seqid)
          end

          def process_sql_select_rslt_on_column(seqid, iprot, oprot)
            args = read_args(iprot, Sql_select_rslt_on_column_args)
            result = Sql_select_rslt_on_column_result.new()
            begin
              result.success = @handler.sql_select_rslt_on_column(args.sql)
            rescue ::Swcdb::Thrift::Gen::Exception => e
              result.e = e
            end
            write_result(result, oprot, 'sql_select_rslt_on_column', seqid)
          end

          def process_sql_select_rslt_on_key(seqid, iprot, oprot)
            args = read_args(iprot, Sql_select_rslt_on_key_args)
            result = Sql_select_rslt_on_key_result.new()
            begin
              result.success = @handler.sql_select_rslt_on_key(args.sql)
            rescue ::Swcdb::Thrift::Gen::Exception => e
              result.e = e
            end
            write_result(result, oprot, 'sql_select_rslt_on_key', seqid)
          end

          def process_sql_select_rslt_on_fraction(seqid, iprot, oprot)
            args = read_args(iprot, Sql_select_rslt_on_fraction_args)
            result = Sql_select_rslt_on_fraction_result.new()
            begin
              result.success = @handler.sql_select_rslt_on_fraction(args.sql)
            rescue ::Swcdb::Thrift::Gen::Exception => e
              result.e = e
            end
            write_result(result, oprot, 'sql_select_rslt_on_fraction', seqid)
          end

          def process_sql_query(seqid, iprot, oprot)
            args = read_args(iprot, Sql_query_args)
            result = Sql_query_result.new()
            begin
              result.success = @handler.sql_query(args.sql, args.rslt)
            rescue ::Swcdb::Thrift::Gen::Exception => e
              result.e = e
            end
            write_result(result, oprot, 'sql_query', seqid)
          end

          def process_sql_update(seqid, iprot, oprot)
            args = read_args(iprot, Sql_update_args)
            result = Sql_update_result.new()
            begin
              @handler.sql_update(args.sql, args.updater_id)
            rescue ::Swcdb::Thrift::Gen::Exception => e
              result.e = e
            end
            write_result(result, oprot, 'sql_update', seqid)
          end

          def process_exec_sql(seqid, iprot, oprot)
            args = read_args(iprot, Exec_sql_args)
            result = Exec_sql_result.new()
            begin
              result.success = @handler.exec_sql(args.sql)
            rescue ::Swcdb::Thrift::Gen::Exception => e
              result.e = e
            end
            write_result(result, oprot, 'exec_sql', seqid)
          end

          def process_updater_create(seqid, iprot, oprot)
            args = read_args(iprot, Updater_create_args)
            result = Updater_create_result.new()
            begin
              result.success = @handler.updater_create(args.buffer_size)
            rescue ::Swcdb::Thrift::Gen::Exception => e
              result.e = e
            end
            write_result(result, oprot, 'updater_create', seqid)
          end

          def process_updater_close(seqid, iprot, oprot)
            args = read_args(iprot, Updater_close_args)
            result = Updater_close_result.new()
            begin
              @handler.updater_close(args.id)
            rescue ::Swcdb::Thrift::Gen::Exception => e
              result.e = e
            end
            write_result(result, oprot, 'updater_close', seqid)
          end

          def process_update_plain(seqid, iprot, oprot)
            args = read_args(iprot, Update_plain_args)
            result = Update_plain_result.new()
            begin
              @handler.update_plain(args.cells, args.updater_id)
            rescue ::Swcdb::Thrift::Gen::Exception => e
              result.e = e
            end
            write_result(result, oprot, 'update_plain', seqid)
          end

          def process_update_counter(seqid, iprot, oprot)
            args = read_args(iprot, Update_counter_args)
            result = Update_counter_result.new()
            begin
              @handler.update_counter(args.cells, args.updater_id)
            rescue ::Swcdb::Thrift::Gen::Exception => e
              result.e = e
            end
            write_result(result, oprot, 'update_counter', seqid)
          end

          def process_update_serial(seqid, iprot, oprot)
            args = read_args(iprot, Update_serial_args)
            result = Update_serial_result.new()
            begin
              @handler.update_serial(args.cells, args.updater_id)
            rescue ::Swcdb::Thrift::Gen::Exception => e
              result.e = e
            end
            write_result(result, oprot, 'update_serial', seqid)
          end

          def process_update_by_types(seqid, iprot, oprot)
            args = read_args(iprot, Update_by_types_args)
            result = Update_by_types_result.new()
            begin
              @handler.update_by_types(args.plain, args.counter, args.serial, args.updater_id)
            rescue ::Swcdb::Thrift::Gen::Exception => e
              result.e = e
            end
            write_result(result, oprot, 'update_by_types', seqid)
          end

          def process_mng_column(seqid, iprot, oprot)
            args = read_args(iprot, Mng_column_args)
            result = Mng_column_result.new()
            begin
              @handler.mng_column(args.func, args.schema)
            rescue ::Swcdb::Thrift::Gen::Exception => e
              result.e = e
            end
            write_result(result, oprot, 'mng_column', seqid)
          end

          def process_list_columns(seqid, iprot, oprot)
            args = read_args(iprot, List_columns_args)
            result = List_columns_result.new()
            begin
              result.success = @handler.list_columns(args.spec)
            rescue ::Swcdb::Thrift::Gen::Exception => e
              result.e = e
            end
            write_result(result, oprot, 'list_columns', seqid)
          end

          def process_compact_columns(seqid, iprot, oprot)
            args = read_args(iprot, Compact_columns_args)
            result = Compact_columns_result.new()
            begin
              result.success = @handler.compact_columns(args.spec)
            rescue ::Swcdb::Thrift::Gen::Exception => e
              result.e = e
            end
            write_result(result, oprot, 'compact_columns', seqid)
          end

          def process_scan(seqid, iprot, oprot)
            args = read_args(iprot, Scan_args)
            result = Scan_result.new()
            begin
              result.success = @handler.scan(args.spec)
            rescue ::Swcdb::Thrift::Gen::Exception => e
              result.e = e
            end
            write_result(result, oprot, 'scan', seqid)
          end

          def process_scan_rslt_on_column(seqid, iprot, oprot)
            args = read_args(iprot, Scan_rslt_on_column_args)
            result = Scan_rslt_on_column_result.new()
            begin
              result.success = @handler.scan_rslt_on_column(args.spec)
            rescue ::Swcdb::Thrift::Gen::Exception => e
              result.e = e
            end
            write_result(result, oprot, 'scan_rslt_on_column', seqid)
          end

          def process_scan_rslt_on_key(seqid, iprot, oprot)
            args = read_args(iprot, Scan_rslt_on_key_args)
            result = Scan_rslt_on_key_result.new()
            begin
              result.success = @handler.scan_rslt_on_key(args.spec)
            rescue ::Swcdb::Thrift::Gen::Exception => e
              result.e = e
            end
            write_result(result, oprot, 'scan_rslt_on_key', seqid)
          end

          def process_scan_rslt_on_fraction(seqid, iprot, oprot)
            args = read_args(iprot, Scan_rslt_on_fraction_args)
            result = Scan_rslt_on_fraction_result.new()
            begin
              result.success = @handler.scan_rslt_on_fraction(args.spec)
            rescue ::Swcdb::Thrift::Gen::Exception => e
              result.e = e
            end
            write_result(result, oprot, 'scan_rslt_on_fraction', seqid)
          end

          def process_scan_rslt_on(seqid, iprot, oprot)
            args = read_args(iprot, Scan_rslt_on_args)
            result = Scan_rslt_on_result.new()
            begin
              result.success = @handler.scan_rslt_on(args.spec, args.rslt)
            rescue ::Swcdb::Thrift::Gen::Exception => e
              result.e = e
            end
            write_result(result, oprot, 'scan_rslt_on', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class Sql_mng_column_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SQL = 1

          FIELDS = {
            # The SQL string to Execute
            SQL => {:type => ::Thrift::Types::STRING, :name => 'sql'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Sql_mng_column_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          E = 1

          FIELDS = {
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Swcdb::Thrift::Gen::Exception}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Sql_list_columns_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SQL = 1

          FIELDS = {
            # The SQL string to Execute
            SQL => {:type => ::Thrift::Types::STRING, :name => 'sql'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Sql_list_columns_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          E = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Swcdb::Thrift::Gen::Schema}},
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Swcdb::Thrift::Gen::Exception}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Sql_compact_columns_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SQL = 1

          FIELDS = {
            # The SQL string to Execute
            SQL => {:type => ::Thrift::Types::STRING, :name => 'sql'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Sql_compact_columns_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          E = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Swcdb::Thrift::Gen::CompactResult}},
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Swcdb::Thrift::Gen::Exception}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Sql_select_plain_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SQL = 1

          FIELDS = {
            # The SQL string to Execute
            SQL => {:type => ::Thrift::Types::STRING, :name => 'sql'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Sql_select_plain_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          E = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Swcdb::Thrift::Gen::CellPlain}},
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Swcdb::Thrift::Gen::Exception}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Sql_select_counter_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SQL = 1

          FIELDS = {
            # The SQL string to Execute
            SQL => {:type => ::Thrift::Types::STRING, :name => 'sql'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Sql_select_counter_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          E = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Swcdb::Thrift::Gen::CellCounter}},
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Swcdb::Thrift::Gen::Exception}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Sql_select_serial_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SQL = 1

          FIELDS = {
            # The SQL string to Execute
            SQL => {:type => ::Thrift::Types::STRING, :name => 'sql'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Sql_select_serial_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          E = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Swcdb::Thrift::Gen::CellSerial}},
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Swcdb::Thrift::Gen::Exception}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Sql_select_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SQL = 1

          FIELDS = {
            # The SQL string to Execute
            SQL => {:type => ::Thrift::Types::STRING, :name => 'sql'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Sql_select_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          E = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Swcdb::Thrift::Gen::Cells},
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Swcdb::Thrift::Gen::Exception}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Sql_select_rslt_on_column_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SQL = 1

          FIELDS = {
            # The SQL string to Execute
            SQL => {:type => ::Thrift::Types::STRING, :name => 'sql'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Sql_select_rslt_on_column_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          E = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Swcdb::Thrift::Gen::CCells}},
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Swcdb::Thrift::Gen::Exception}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Sql_select_rslt_on_key_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SQL = 1

          FIELDS = {
            # The SQL string to Execute
            SQL => {:type => ::Thrift::Types::STRING, :name => 'sql'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Sql_select_rslt_on_key_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          E = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Swcdb::Thrift::Gen::KCells}},
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Swcdb::Thrift::Gen::Exception}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Sql_select_rslt_on_fraction_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SQL = 1

          FIELDS = {
            # The SQL string to Execute
            SQL => {:type => ::Thrift::Types::STRING, :name => 'sql'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Sql_select_rslt_on_fraction_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          E = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Swcdb::Thrift::Gen::FCells},
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Swcdb::Thrift::Gen::Exception}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Sql_query_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SQL = 1
          RSLT = 2

          FIELDS = {
            # The SQL string to Execute
            SQL => {:type => ::Thrift::Types::STRING, :name => 'sql'},
            # The Type of Cells Result for the response
            RSLT => {:type => ::Thrift::Types::I32, :name => 'rslt', :enum_class => ::Swcdb::Thrift::Gen::CellsResult}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @rslt.nil? || ::Swcdb::Thrift::Gen::CellsResult::VALID_VALUES.include?(@rslt)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field rslt!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Sql_query_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          E = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Swcdb::Thrift::Gen::CellsGroup},
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Swcdb::Thrift::Gen::Exception}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Sql_update_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SQL = 1
          UPDATER_ID = 2

          FIELDS = {
            # The SQL string to Execute
            SQL => {:type => ::Thrift::Types::STRING, :name => 'sql'},
            # The Updater ID to work with
            UPDATER_ID => {:type => ::Thrift::Types::I64, :name => 'updater_id', :default => 0}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Sql_update_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          E = 1

          FIELDS = {
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Swcdb::Thrift::Gen::Exception}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Exec_sql_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SQL = 1

          FIELDS = {
            # The SQL string to Execute
            SQL => {:type => ::Thrift::Types::STRING, :name => 'sql'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Exec_sql_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          E = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Swcdb::Thrift::Gen::Result},
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Swcdb::Thrift::Gen::Exception}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Updater_create_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          BUFFER_SIZE = 1

          FIELDS = {
            # The buffer size of the Updater
            BUFFER_SIZE => {:type => ::Thrift::Types::I32, :name => 'buffer_size'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Updater_create_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          E = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Swcdb::Thrift::Gen::Exception}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Updater_close_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          ID = 1

          FIELDS = {
            # The Updater ID to close
            ID => {:type => ::Thrift::Types::I64, :name => 'id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Updater_close_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          E = 1

          FIELDS = {
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Swcdb::Thrift::Gen::Exception}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Update_plain_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          CELLS = 1
          UPDATER_ID = 2

          FIELDS = {
            # The Cells to update
            CELLS => {:type => ::Thrift::Types::MAP, :name => 'cells', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRUCT, :class => ::Swcdb::Thrift::Gen::UCellPlain}}},
            # The Updater ID to use for write
            UPDATER_ID => {:type => ::Thrift::Types::I64, :name => 'updater_id', :default => 0}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Update_plain_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          E = 1

          FIELDS = {
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Swcdb::Thrift::Gen::Exception}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Update_counter_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          CELLS = 1
          UPDATER_ID = 2

          FIELDS = {
            # The Counter Cells to update
            CELLS => {:type => ::Thrift::Types::MAP, :name => 'cells', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRUCT, :class => ::Swcdb::Thrift::Gen::UCellCounter}}},
            # The Updater ID to use for write
            UPDATER_ID => {:type => ::Thrift::Types::I64, :name => 'updater_id', :default => 0}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Update_counter_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          E = 1

          FIELDS = {
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Swcdb::Thrift::Gen::Exception}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Update_serial_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          CELLS = 1
          UPDATER_ID = 2

          FIELDS = {
            # The Serial Cells to update
            CELLS => {:type => ::Thrift::Types::MAP, :name => 'cells', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRUCT, :class => ::Swcdb::Thrift::Gen::UCellSerial}}},
            # The Updater ID to use for write
            UPDATER_ID => {:type => ::Thrift::Types::I64, :name => 'updater_id', :default => 0}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Update_serial_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          E = 1

          FIELDS = {
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Swcdb::Thrift::Gen::Exception}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Update_by_types_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          PLAIN = 1
          COUNTER = 2
          SERIAL = 3
          UPDATER_ID = 4

          FIELDS = {
            # The PLAIN Cells to update
            PLAIN => {:type => ::Thrift::Types::MAP, :name => 'plain', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRUCT, :class => ::Swcdb::Thrift::Gen::UCellPlain}}},
            # The COUNTER Cells to update
            COUNTER => {:type => ::Thrift::Types::MAP, :name => 'counter', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRUCT, :class => ::Swcdb::Thrift::Gen::UCellCounter}}},
            # The SERIAL Cells to update
            SERIAL => {:type => ::Thrift::Types::MAP, :name => 'serial', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRUCT, :class => ::Swcdb::Thrift::Gen::UCellSerial}}},
            # The Updater ID to use for write
            UPDATER_ID => {:type => ::Thrift::Types::I64, :name => 'updater_id', :default => 0}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Update_by_types_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          E = 1

          FIELDS = {
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Swcdb::Thrift::Gen::Exception}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Mng_column_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FUNC = 1
          SCHEMA = 2

          FIELDS = {
            # The Action Function to use
            FUNC => {:type => ::Thrift::Types::I32, :name => 'func', :enum_class => ::Swcdb::Thrift::Gen::SchemaFunc},
            # The Schema for the Action
            SCHEMA => {:type => ::Thrift::Types::STRUCT, :name => 'schema', :class => ::Swcdb::Thrift::Gen::Schema}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @func.nil? || ::Swcdb::Thrift::Gen::SchemaFunc::VALID_VALUES.include?(@func)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field func!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Mng_column_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          E = 1

          FIELDS = {
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Swcdb::Thrift::Gen::Exception}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class List_columns_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SPEC = 1

          FIELDS = {
            # The Schemas Specifications to match Schema for response
            SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'spec', :class => ::Swcdb::Thrift::Gen::SpecSchemas}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class List_columns_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          E = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Swcdb::Thrift::Gen::Schema}},
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Swcdb::Thrift::Gen::Exception}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Compact_columns_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SPEC = 1

          FIELDS = {
            # The Schemas Specifications to match columns to Compact
            SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'spec', :class => ::Swcdb::Thrift::Gen::SpecSchemas}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Compact_columns_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          E = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Swcdb::Thrift::Gen::CompactResult}},
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Swcdb::Thrift::Gen::Exception}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Scan_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SPEC = 1

          FIELDS = {
            # The Scan Specifications for the scan
            SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'spec', :class => ::Swcdb::Thrift::Gen::SpecScan}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Scan_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          E = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Swcdb::Thrift::Gen::Cells},
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Swcdb::Thrift::Gen::Exception}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Scan_rslt_on_column_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SPEC = 1

          FIELDS = {
            # The Scan Specifications for the scan
            SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'spec', :class => ::Swcdb::Thrift::Gen::SpecScan}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Scan_rslt_on_column_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          E = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Swcdb::Thrift::Gen::CCells}},
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Swcdb::Thrift::Gen::Exception}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Scan_rslt_on_key_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SPEC = 1

          FIELDS = {
            # The Scan Specifications for the scan
            SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'spec', :class => ::Swcdb::Thrift::Gen::SpecScan}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Scan_rslt_on_key_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          E = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Swcdb::Thrift::Gen::KCells}},
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Swcdb::Thrift::Gen::Exception}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Scan_rslt_on_fraction_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SPEC = 1

          FIELDS = {
            # The Scan Specifications for the scan
            SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'spec', :class => ::Swcdb::Thrift::Gen::SpecScan}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Scan_rslt_on_fraction_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          E = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Swcdb::Thrift::Gen::FCells},
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Swcdb::Thrift::Gen::Exception}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Scan_rslt_on_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SPEC = 1
          RSLT = 2

          FIELDS = {
            # The Scan Specifications for the scan
            SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'spec', :class => ::Swcdb::Thrift::Gen::SpecScan},
            # The Type of Cells Result for the response
            RSLT => {:type => ::Thrift::Types::I32, :name => 'rslt', :enum_class => ::Swcdb::Thrift::Gen::CellsResult}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @rslt.nil? || ::Swcdb::Thrift::Gen::CellsResult::VALID_VALUES.include?(@rslt)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field rslt!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Scan_rslt_on_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          E = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Swcdb::Thrift::Gen::CellsGroup},
            # The Base Exception
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Swcdb::Thrift::Gen::Exception}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

      end

    end
  end
end
