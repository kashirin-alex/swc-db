/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.swcdb.thrift.gen;

/**
 * The Scan Specifications Flags
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class SpecFlags implements org.apache.thrift.TBase<SpecFlags, SpecFlags._Fields>, java.io.Serializable, Cloneable, Comparable<SpecFlags> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SpecFlags");

  private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField MAX_VERSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("max_versions", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MAX_BUFFER_FIELD_DESC = new org.apache.thrift.protocol.TField("max_buffer", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.BYTE, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SpecFlagsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SpecFlagsTupleSchemeFactory();

  /**
   * Limit to this number of cells
   */
  public long limit; // optional
  /**
   * Scan from this number of cells Offset on matching Cell-Interval
   */
  public long offset; // optional
  /**
   * Select only this number of Versions of a given Cell-Key
   */
  public int max_versions; // optional
  /**
   * return results with reach of this Buffer size in bytes
   */
  public int max_buffer; // optional
  /**
   * The options bit by SpecFlagsOpt
   */
  public byte options; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Limit to this number of cells
     */
    LIMIT((short)1, "limit"),
    /**
     * Scan from this number of cells Offset on matching Cell-Interval
     */
    OFFSET((short)2, "offset"),
    /**
     * Select only this number of Versions of a given Cell-Key
     */
    MAX_VERSIONS((short)3, "max_versions"),
    /**
     * return results with reach of this Buffer size in bytes
     */
    MAX_BUFFER((short)4, "max_buffer"),
    /**
     * The options bit by SpecFlagsOpt
     */
    OPTIONS((short)5, "options");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LIMIT
          return LIMIT;
        case 2: // OFFSET
          return OFFSET;
        case 3: // MAX_VERSIONS
          return MAX_VERSIONS;
        case 4: // MAX_BUFFER
          return MAX_BUFFER;
        case 5: // OPTIONS
          return OPTIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LIMIT_ISSET_ID = 0;
  private static final int __OFFSET_ISSET_ID = 1;
  private static final int __MAX_VERSIONS_ISSET_ID = 2;
  private static final int __MAX_BUFFER_ISSET_ID = 3;
  private static final int __OPTIONS_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.LIMIT,_Fields.OFFSET,_Fields.MAX_VERSIONS,_Fields.MAX_BUFFER,_Fields.OPTIONS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_VERSIONS, new org.apache.thrift.meta_data.FieldMetaData("max_versions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_BUFFER, new org.apache.thrift.meta_data.FieldMetaData("max_buffer", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SpecFlags.class, metaDataMap);
  }

  public SpecFlags() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SpecFlags(SpecFlags other) {
    __isset_bitfield = other.__isset_bitfield;
    this.limit = other.limit;
    this.offset = other.offset;
    this.max_versions = other.max_versions;
    this.max_buffer = other.max_buffer;
    this.options = other.options;
  }

  @Override
  public SpecFlags deepCopy() {
    return new SpecFlags(this);
  }

  @Override
  public void clear() {
    setLimitIsSet(false);
    this.limit = 0;
    setOffsetIsSet(false);
    this.offset = 0;
    setMax_versionsIsSet(false);
    this.max_versions = 0;
    setMax_bufferIsSet(false);
    this.max_buffer = 0;
    setOptionsIsSet(false);
    this.options = 0;
  }

  /**
   * Limit to this number of cells
   */
  public long getLimit() {
    return this.limit;
  }

  /**
   * Limit to this number of cells
   */
  public SpecFlags setLimit(long limit) {
    this.limit = limit;
    setLimitIsSet(true);
    return this;
  }

  public void unsetLimit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  /** Returns true if field limit is set (has been assigned a value) and false otherwise */
  public boolean isSetLimit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  public void setLimitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
  }

  /**
   * Scan from this number of cells Offset on matching Cell-Interval
   */
  public long getOffset() {
    return this.offset;
  }

  /**
   * Scan from this number of cells Offset on matching Cell-Interval
   */
  public SpecFlags setOffset(long offset) {
    this.offset = offset;
    setOffsetIsSet(true);
    return this;
  }

  public void unsetOffset() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  /** Returns true if field offset is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  public void setOffsetIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
  }

  /**
   * Select only this number of Versions of a given Cell-Key
   */
  public int getMax_versions() {
    return this.max_versions;
  }

  /**
   * Select only this number of Versions of a given Cell-Key
   */
  public SpecFlags setMax_versions(int max_versions) {
    this.max_versions = max_versions;
    setMax_versionsIsSet(true);
    return this;
  }

  public void unsetMax_versions() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_VERSIONS_ISSET_ID);
  }

  /** Returns true if field max_versions is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_versions() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_VERSIONS_ISSET_ID);
  }

  public void setMax_versionsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_VERSIONS_ISSET_ID, value);
  }

  /**
   * return results with reach of this Buffer size in bytes
   */
  public int getMax_buffer() {
    return this.max_buffer;
  }

  /**
   * return results with reach of this Buffer size in bytes
   */
  public SpecFlags setMax_buffer(int max_buffer) {
    this.max_buffer = max_buffer;
    setMax_bufferIsSet(true);
    return this;
  }

  public void unsetMax_buffer() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_BUFFER_ISSET_ID);
  }

  /** Returns true if field max_buffer is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_buffer() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_BUFFER_ISSET_ID);
  }

  public void setMax_bufferIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_BUFFER_ISSET_ID, value);
  }

  /**
   * The options bit by SpecFlagsOpt
   */
  public byte getOptions() {
    return this.options;
  }

  /**
   * The options bit by SpecFlagsOpt
   */
  public SpecFlags setOptions(byte options) {
    this.options = options;
    setOptionsIsSet(true);
    return this;
  }

  public void unsetOptions() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OPTIONS_ISSET_ID);
  }

  /** Returns true if field options is set (has been assigned a value) and false otherwise */
  public boolean isSetOptions() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OPTIONS_ISSET_ID);
  }

  public void setOptionsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OPTIONS_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case LIMIT:
      if (value == null) {
        unsetLimit();
      } else {
        setLimit((java.lang.Long)value);
      }
      break;

    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((java.lang.Long)value);
      }
      break;

    case MAX_VERSIONS:
      if (value == null) {
        unsetMax_versions();
      } else {
        setMax_versions((java.lang.Integer)value);
      }
      break;

    case MAX_BUFFER:
      if (value == null) {
        unsetMax_buffer();
      } else {
        setMax_buffer((java.lang.Integer)value);
      }
      break;

    case OPTIONS:
      if (value == null) {
        unsetOptions();
      } else {
        setOptions((java.lang.Byte)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LIMIT:
      return getLimit();

    case OFFSET:
      return getOffset();

    case MAX_VERSIONS:
      return getMax_versions();

    case MAX_BUFFER:
      return getMax_buffer();

    case OPTIONS:
      return getOptions();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LIMIT:
      return isSetLimit();
    case OFFSET:
      return isSetOffset();
    case MAX_VERSIONS:
      return isSetMax_versions();
    case MAX_BUFFER:
      return isSetMax_buffer();
    case OPTIONS:
      return isSetOptions();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof SpecFlags)
      return this.equals((SpecFlags)that);
    return false;
  }

  public boolean equals(SpecFlags that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_limit = true && this.isSetLimit();
    boolean that_present_limit = true && that.isSetLimit();
    if (this_present_limit || that_present_limit) {
      if (!(this_present_limit && that_present_limit))
        return false;
      if (this.limit != that.limit)
        return false;
    }

    boolean this_present_offset = true && this.isSetOffset();
    boolean that_present_offset = true && that.isSetOffset();
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (this.offset != that.offset)
        return false;
    }

    boolean this_present_max_versions = true && this.isSetMax_versions();
    boolean that_present_max_versions = true && that.isSetMax_versions();
    if (this_present_max_versions || that_present_max_versions) {
      if (!(this_present_max_versions && that_present_max_versions))
        return false;
      if (this.max_versions != that.max_versions)
        return false;
    }

    boolean this_present_max_buffer = true && this.isSetMax_buffer();
    boolean that_present_max_buffer = true && that.isSetMax_buffer();
    if (this_present_max_buffer || that_present_max_buffer) {
      if (!(this_present_max_buffer && that_present_max_buffer))
        return false;
      if (this.max_buffer != that.max_buffer)
        return false;
    }

    boolean this_present_options = true && this.isSetOptions();
    boolean that_present_options = true && that.isSetOptions();
    if (this_present_options || that_present_options) {
      if (!(this_present_options && that_present_options))
        return false;
      if (this.options != that.options)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLimit()) ? 131071 : 524287);
    if (isSetLimit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(limit);

    hashCode = hashCode * 8191 + ((isSetOffset()) ? 131071 : 524287);
    if (isSetOffset())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(offset);

    hashCode = hashCode * 8191 + ((isSetMax_versions()) ? 131071 : 524287);
    if (isSetMax_versions())
      hashCode = hashCode * 8191 + max_versions;

    hashCode = hashCode * 8191 + ((isSetMax_buffer()) ? 131071 : 524287);
    if (isSetMax_buffer())
      hashCode = hashCode * 8191 + max_buffer;

    hashCode = hashCode * 8191 + ((isSetOptions()) ? 131071 : 524287);
    if (isSetOptions())
      hashCode = hashCode * 8191 + (int) (options);

    return hashCode;
  }

  @Override
  public int compareTo(SpecFlags other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetLimit(), other.isSetLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOffset(), other.isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMax_versions(), other.isSetMax_versions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_versions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_versions, other.max_versions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMax_buffer(), other.isSetMax_buffer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_buffer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_buffer, other.max_buffer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOptions(), other.isSetOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, other.options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SpecFlags(");
    boolean first = true;

    if (isSetLimit()) {
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
    }
    if (isSetOffset()) {
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
    }
    if (isSetMax_versions()) {
      if (!first) sb.append(", ");
      sb.append("max_versions:");
      sb.append(this.max_versions);
      first = false;
    }
    if (isSetMax_buffer()) {
      if (!first) sb.append(", ");
      sb.append("max_buffer:");
      sb.append(this.max_buffer);
      first = false;
    }
    if (isSetOptions()) {
      if (!first) sb.append(", ");
      sb.append("options:");
      sb.append(this.options);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SpecFlagsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SpecFlagsStandardScheme getScheme() {
      return new SpecFlagsStandardScheme();
    }
  }

  private static class SpecFlagsStandardScheme extends org.apache.thrift.scheme.StandardScheme<SpecFlags> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, SpecFlags struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.limit = iprot.readI64();
              struct.setLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.offset = iprot.readI64();
              struct.setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAX_VERSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_versions = iprot.readI32();
              struct.setMax_versionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MAX_BUFFER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_buffer = iprot.readI32();
              struct.setMax_bufferIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.options = iprot.readByte();
              struct.setOptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, SpecFlags struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetLimit()) {
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI64(struct.limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOffset()) {
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI64(struct.offset);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_versions()) {
        oprot.writeFieldBegin(MAX_VERSIONS_FIELD_DESC);
        oprot.writeI32(struct.max_versions);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_buffer()) {
        oprot.writeFieldBegin(MAX_BUFFER_FIELD_DESC);
        oprot.writeI32(struct.max_buffer);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOptions()) {
        oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
        oprot.writeByte(struct.options);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SpecFlagsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SpecFlagsTupleScheme getScheme() {
      return new SpecFlagsTupleScheme();
    }
  }

  private static class SpecFlagsTupleScheme extends org.apache.thrift.scheme.TupleScheme<SpecFlags> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SpecFlags struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLimit()) {
        optionals.set(0);
      }
      if (struct.isSetOffset()) {
        optionals.set(1);
      }
      if (struct.isSetMax_versions()) {
        optionals.set(2);
      }
      if (struct.isSetMax_buffer()) {
        optionals.set(3);
      }
      if (struct.isSetOptions()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetLimit()) {
        oprot.writeI64(struct.limit);
      }
      if (struct.isSetOffset()) {
        oprot.writeI64(struct.offset);
      }
      if (struct.isSetMax_versions()) {
        oprot.writeI32(struct.max_versions);
      }
      if (struct.isSetMax_buffer()) {
        oprot.writeI32(struct.max_buffer);
      }
      if (struct.isSetOptions()) {
        oprot.writeByte(struct.options);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SpecFlags struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.limit = iprot.readI64();
        struct.setLimitIsSet(true);
      }
      if (incoming.get(1)) {
        struct.offset = iprot.readI64();
        struct.setOffsetIsSet(true);
      }
      if (incoming.get(2)) {
        struct.max_versions = iprot.readI32();
        struct.setMax_versionsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.max_buffer = iprot.readI32();
        struct.setMax_bufferIsSet(true);
      }
      if (incoming.get(4)) {
        struct.options = iprot.readByte();
        struct.setOptionsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

