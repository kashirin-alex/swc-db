/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.swcdb.thrift.gen;

/**
 * The Cells Interval Plain type Specifications with interval-scope Flags
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class SpecIntervalPlain implements org.apache.thrift.TBase<SpecIntervalPlain, SpecIntervalPlain._Fields>, java.io.Serializable, Cloneable, Comparable<SpecIntervalPlain> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SpecIntervalPlain");

  private static final org.apache.thrift.protocol.TField RANGE_BEGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("range_begin", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField RANGE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("range_end", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField OFFSET_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("offset_key", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField OFFSET_REV_FIELD_DESC = new org.apache.thrift.protocol.TField("offset_rev", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField KEY_INTERVALS_FIELD_DESC = new org.apache.thrift.protocol.TField("key_intervals", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("values", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField TS_START_FIELD_DESC = new org.apache.thrift.protocol.TField("ts_start", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField TS_FINISH_FIELD_DESC = new org.apache.thrift.protocol.TField("ts_finish", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField UPDATING_FIELD_DESC = new org.apache.thrift.protocol.TField("updating", org.apache.thrift.protocol.TType.STRUCT, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SpecIntervalPlainStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SpecIntervalPlainTupleSchemeFactory();

  /**
   * Begin of Ranges evaluation with this Key inclusive
   */
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> range_begin; // required
  /**
   * End of Ranges evaluation with this Key inclusive
   */
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> range_end; // required
  /**
   * Offset Cell Key of a Scan, select cells from this key inclusive
   */
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> offset_key; // required
  /**
   * Offset Cell Timestamp of a Scan, select cells after this timestamp
   */
  public long offset_rev; // optional
  /**
   * The Key Intervals
   */
  public @org.apache.thrift.annotation.Nullable java.util.List<SpecKeyInterval> key_intervals; // required
  /**
   * The Cell Value Specifications, cell-value match for plain type
   */
  public @org.apache.thrift.annotation.Nullable java.util.List<SpecValuePlain> values; // required
  /**
   * The Timestamp Start Spec, the start of cells-interval timestamp match
   */
  public @org.apache.thrift.annotation.Nullable SpecTimestamp ts_start; // optional
  /**
   * The Timestamp Finish Spec, the finish of cells-interval timestamp match
   */
  public @org.apache.thrift.annotation.Nullable SpecTimestamp ts_finish; // optional
  /**
   * The Interval Flags Specification
   */
  public @org.apache.thrift.annotation.Nullable SpecFlags flags; // optional
  /**
   * The Interval Options Specification
   * 
   * @see SpecIntervalOptions
   */
  public @org.apache.thrift.annotation.Nullable SpecIntervalOptions options; // optional
  /**
   * The Value spec of an Updating Interval
   */
  public @org.apache.thrift.annotation.Nullable SpecIntervalUpdatePlain updating; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Begin of Ranges evaluation with this Key inclusive
     */
    RANGE_BEGIN((short)1, "range_begin"),
    /**
     * End of Ranges evaluation with this Key inclusive
     */
    RANGE_END((short)2, "range_end"),
    /**
     * Offset Cell Key of a Scan, select cells from this key inclusive
     */
    OFFSET_KEY((short)3, "offset_key"),
    /**
     * Offset Cell Timestamp of a Scan, select cells after this timestamp
     */
    OFFSET_REV((short)4, "offset_rev"),
    /**
     * The Key Intervals
     */
    KEY_INTERVALS((short)5, "key_intervals"),
    /**
     * The Cell Value Specifications, cell-value match for plain type
     */
    VALUES((short)6, "values"),
    /**
     * The Timestamp Start Spec, the start of cells-interval timestamp match
     */
    TS_START((short)7, "ts_start"),
    /**
     * The Timestamp Finish Spec, the finish of cells-interval timestamp match
     */
    TS_FINISH((short)8, "ts_finish"),
    /**
     * The Interval Flags Specification
     */
    FLAGS((short)9, "flags"),
    /**
     * The Interval Options Specification
     * 
     * @see SpecIntervalOptions
     */
    OPTIONS((short)10, "options"),
    /**
     * The Value spec of an Updating Interval
     */
    UPDATING((short)11, "updating");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RANGE_BEGIN
          return RANGE_BEGIN;
        case 2: // RANGE_END
          return RANGE_END;
        case 3: // OFFSET_KEY
          return OFFSET_KEY;
        case 4: // OFFSET_REV
          return OFFSET_REV;
        case 5: // KEY_INTERVALS
          return KEY_INTERVALS;
        case 6: // VALUES
          return VALUES;
        case 7: // TS_START
          return TS_START;
        case 8: // TS_FINISH
          return TS_FINISH;
        case 9: // FLAGS
          return FLAGS;
        case 10: // OPTIONS
          return OPTIONS;
        case 11: // UPDATING
          return UPDATING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OFFSET_REV_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.OFFSET_REV,_Fields.TS_START,_Fields.TS_FINISH,_Fields.FLAGS,_Fields.OPTIONS,_Fields.UPDATING};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RANGE_BEGIN, new org.apache.thrift.meta_data.FieldMetaData("range_begin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.RANGE_END, new org.apache.thrift.meta_data.FieldMetaData("range_end", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.OFFSET_KEY, new org.apache.thrift.meta_data.FieldMetaData("offset_key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.OFFSET_REV, new org.apache.thrift.meta_data.FieldMetaData("offset_rev", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.KEY_INTERVALS, new org.apache.thrift.meta_data.FieldMetaData("key_intervals", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SpecKeyInterval.class))));
    tmpMap.put(_Fields.VALUES, new org.apache.thrift.meta_data.FieldMetaData("values", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SpecValuePlain.class))));
    tmpMap.put(_Fields.TS_START, new org.apache.thrift.meta_data.FieldMetaData("ts_start", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SpecTimestamp.class)));
    tmpMap.put(_Fields.TS_FINISH, new org.apache.thrift.meta_data.FieldMetaData("ts_finish", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SpecTimestamp.class)));
    tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SpecFlags.class)));
    tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SpecIntervalOptions.class)));
    tmpMap.put(_Fields.UPDATING, new org.apache.thrift.meta_data.FieldMetaData("updating", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SpecIntervalUpdatePlain.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SpecIntervalPlain.class, metaDataMap);
  }

  public SpecIntervalPlain() {
  }

  public SpecIntervalPlain(
    java.util.List<java.nio.ByteBuffer> range_begin,
    java.util.List<java.nio.ByteBuffer> range_end,
    java.util.List<java.nio.ByteBuffer> offset_key,
    java.util.List<SpecKeyInterval> key_intervals,
    java.util.List<SpecValuePlain> values)
  {
    this();
    this.range_begin = range_begin;
    this.range_end = range_end;
    this.offset_key = offset_key;
    this.key_intervals = key_intervals;
    this.values = values;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SpecIntervalPlain(SpecIntervalPlain other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRange_begin()) {
      java.util.List<java.nio.ByteBuffer> __this__range_begin = new java.util.ArrayList<java.nio.ByteBuffer>(other.range_begin);
      this.range_begin = __this__range_begin;
    }
    if (other.isSetRange_end()) {
      java.util.List<java.nio.ByteBuffer> __this__range_end = new java.util.ArrayList<java.nio.ByteBuffer>(other.range_end);
      this.range_end = __this__range_end;
    }
    if (other.isSetOffset_key()) {
      java.util.List<java.nio.ByteBuffer> __this__offset_key = new java.util.ArrayList<java.nio.ByteBuffer>(other.offset_key);
      this.offset_key = __this__offset_key;
    }
    this.offset_rev = other.offset_rev;
    if (other.isSetKey_intervals()) {
      java.util.List<SpecKeyInterval> __this__key_intervals = new java.util.ArrayList<SpecKeyInterval>(other.key_intervals.size());
      for (SpecKeyInterval other_element : other.key_intervals) {
        __this__key_intervals.add(new SpecKeyInterval(other_element));
      }
      this.key_intervals = __this__key_intervals;
    }
    if (other.isSetValues()) {
      java.util.List<SpecValuePlain> __this__values = new java.util.ArrayList<SpecValuePlain>(other.values.size());
      for (SpecValuePlain other_element : other.values) {
        __this__values.add(new SpecValuePlain(other_element));
      }
      this.values = __this__values;
    }
    if (other.isSetTs_start()) {
      this.ts_start = new SpecTimestamp(other.ts_start);
    }
    if (other.isSetTs_finish()) {
      this.ts_finish = new SpecTimestamp(other.ts_finish);
    }
    if (other.isSetFlags()) {
      this.flags = new SpecFlags(other.flags);
    }
    if (other.isSetOptions()) {
      this.options = other.options;
    }
    if (other.isSetUpdating()) {
      this.updating = new SpecIntervalUpdatePlain(other.updating);
    }
  }

  @Override
  public SpecIntervalPlain deepCopy() {
    return new SpecIntervalPlain(this);
  }

  @Override
  public void clear() {
    this.range_begin = null;
    this.range_end = null;
    this.offset_key = null;
    setOffset_revIsSet(false);
    this.offset_rev = 0;
    this.key_intervals = null;
    this.values = null;
    this.ts_start = null;
    this.ts_finish = null;
    this.flags = null;
    this.options = null;
    this.updating = null;
  }

  public int getRange_beginSize() {
    return (this.range_begin == null) ? 0 : this.range_begin.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getRange_beginIterator() {
    return (this.range_begin == null) ? null : this.range_begin.iterator();
  }

  public void addToRange_begin(java.nio.ByteBuffer elem) {
    if (this.range_begin == null) {
      this.range_begin = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.range_begin.add(elem);
  }

  /**
   * Begin of Ranges evaluation with this Key inclusive
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getRange_begin() {
    return this.range_begin;
  }

  /**
   * Begin of Ranges evaluation with this Key inclusive
   */
  public SpecIntervalPlain setRange_begin(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> range_begin) {
    this.range_begin = range_begin;
    return this;
  }

  public void unsetRange_begin() {
    this.range_begin = null;
  }

  /** Returns true if field range_begin is set (has been assigned a value) and false otherwise */
  public boolean isSetRange_begin() {
    return this.range_begin != null;
  }

  public void setRange_beginIsSet(boolean value) {
    if (!value) {
      this.range_begin = null;
    }
  }

  public int getRange_endSize() {
    return (this.range_end == null) ? 0 : this.range_end.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getRange_endIterator() {
    return (this.range_end == null) ? null : this.range_end.iterator();
  }

  public void addToRange_end(java.nio.ByteBuffer elem) {
    if (this.range_end == null) {
      this.range_end = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.range_end.add(elem);
  }

  /**
   * End of Ranges evaluation with this Key inclusive
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getRange_end() {
    return this.range_end;
  }

  /**
   * End of Ranges evaluation with this Key inclusive
   */
  public SpecIntervalPlain setRange_end(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> range_end) {
    this.range_end = range_end;
    return this;
  }

  public void unsetRange_end() {
    this.range_end = null;
  }

  /** Returns true if field range_end is set (has been assigned a value) and false otherwise */
  public boolean isSetRange_end() {
    return this.range_end != null;
  }

  public void setRange_endIsSet(boolean value) {
    if (!value) {
      this.range_end = null;
    }
  }

  public int getOffset_keySize() {
    return (this.offset_key == null) ? 0 : this.offset_key.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getOffset_keyIterator() {
    return (this.offset_key == null) ? null : this.offset_key.iterator();
  }

  public void addToOffset_key(java.nio.ByteBuffer elem) {
    if (this.offset_key == null) {
      this.offset_key = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.offset_key.add(elem);
  }

  /**
   * Offset Cell Key of a Scan, select cells from this key inclusive
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getOffset_key() {
    return this.offset_key;
  }

  /**
   * Offset Cell Key of a Scan, select cells from this key inclusive
   */
  public SpecIntervalPlain setOffset_key(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> offset_key) {
    this.offset_key = offset_key;
    return this;
  }

  public void unsetOffset_key() {
    this.offset_key = null;
  }

  /** Returns true if field offset_key is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset_key() {
    return this.offset_key != null;
  }

  public void setOffset_keyIsSet(boolean value) {
    if (!value) {
      this.offset_key = null;
    }
  }

  /**
   * Offset Cell Timestamp of a Scan, select cells after this timestamp
   */
  public long getOffset_rev() {
    return this.offset_rev;
  }

  /**
   * Offset Cell Timestamp of a Scan, select cells after this timestamp
   */
  public SpecIntervalPlain setOffset_rev(long offset_rev) {
    this.offset_rev = offset_rev;
    setOffset_revIsSet(true);
    return this;
  }

  public void unsetOffset_rev() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OFFSET_REV_ISSET_ID);
  }

  /** Returns true if field offset_rev is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset_rev() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OFFSET_REV_ISSET_ID);
  }

  public void setOffset_revIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OFFSET_REV_ISSET_ID, value);
  }

  public int getKey_intervalsSize() {
    return (this.key_intervals == null) ? 0 : this.key_intervals.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<SpecKeyInterval> getKey_intervalsIterator() {
    return (this.key_intervals == null) ? null : this.key_intervals.iterator();
  }

  public void addToKey_intervals(SpecKeyInterval elem) {
    if (this.key_intervals == null) {
      this.key_intervals = new java.util.ArrayList<SpecKeyInterval>();
    }
    this.key_intervals.add(elem);
  }

  /**
   * The Key Intervals
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.List<SpecKeyInterval> getKey_intervals() {
    return this.key_intervals;
  }

  /**
   * The Key Intervals
   */
  public SpecIntervalPlain setKey_intervals(@org.apache.thrift.annotation.Nullable java.util.List<SpecKeyInterval> key_intervals) {
    this.key_intervals = key_intervals;
    return this;
  }

  public void unsetKey_intervals() {
    this.key_intervals = null;
  }

  /** Returns true if field key_intervals is set (has been assigned a value) and false otherwise */
  public boolean isSetKey_intervals() {
    return this.key_intervals != null;
  }

  public void setKey_intervalsIsSet(boolean value) {
    if (!value) {
      this.key_intervals = null;
    }
  }

  public int getValuesSize() {
    return (this.values == null) ? 0 : this.values.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<SpecValuePlain> getValuesIterator() {
    return (this.values == null) ? null : this.values.iterator();
  }

  public void addToValues(SpecValuePlain elem) {
    if (this.values == null) {
      this.values = new java.util.ArrayList<SpecValuePlain>();
    }
    this.values.add(elem);
  }

  /**
   * The Cell Value Specifications, cell-value match for plain type
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.List<SpecValuePlain> getValues() {
    return this.values;
  }

  /**
   * The Cell Value Specifications, cell-value match for plain type
   */
  public SpecIntervalPlain setValues(@org.apache.thrift.annotation.Nullable java.util.List<SpecValuePlain> values) {
    this.values = values;
    return this;
  }

  public void unsetValues() {
    this.values = null;
  }

  /** Returns true if field values is set (has been assigned a value) and false otherwise */
  public boolean isSetValues() {
    return this.values != null;
  }

  public void setValuesIsSet(boolean value) {
    if (!value) {
      this.values = null;
    }
  }

  /**
   * The Timestamp Start Spec, the start of cells-interval timestamp match
   */
  @org.apache.thrift.annotation.Nullable
  public SpecTimestamp getTs_start() {
    return this.ts_start;
  }

  /**
   * The Timestamp Start Spec, the start of cells-interval timestamp match
   */
  public SpecIntervalPlain setTs_start(@org.apache.thrift.annotation.Nullable SpecTimestamp ts_start) {
    this.ts_start = ts_start;
    return this;
  }

  public void unsetTs_start() {
    this.ts_start = null;
  }

  /** Returns true if field ts_start is set (has been assigned a value) and false otherwise */
  public boolean isSetTs_start() {
    return this.ts_start != null;
  }

  public void setTs_startIsSet(boolean value) {
    if (!value) {
      this.ts_start = null;
    }
  }

  /**
   * The Timestamp Finish Spec, the finish of cells-interval timestamp match
   */
  @org.apache.thrift.annotation.Nullable
  public SpecTimestamp getTs_finish() {
    return this.ts_finish;
  }

  /**
   * The Timestamp Finish Spec, the finish of cells-interval timestamp match
   */
  public SpecIntervalPlain setTs_finish(@org.apache.thrift.annotation.Nullable SpecTimestamp ts_finish) {
    this.ts_finish = ts_finish;
    return this;
  }

  public void unsetTs_finish() {
    this.ts_finish = null;
  }

  /** Returns true if field ts_finish is set (has been assigned a value) and false otherwise */
  public boolean isSetTs_finish() {
    return this.ts_finish != null;
  }

  public void setTs_finishIsSet(boolean value) {
    if (!value) {
      this.ts_finish = null;
    }
  }

  /**
   * The Interval Flags Specification
   */
  @org.apache.thrift.annotation.Nullable
  public SpecFlags getFlags() {
    return this.flags;
  }

  /**
   * The Interval Flags Specification
   */
  public SpecIntervalPlain setFlags(@org.apache.thrift.annotation.Nullable SpecFlags flags) {
    this.flags = flags;
    return this;
  }

  public void unsetFlags() {
    this.flags = null;
  }

  /** Returns true if field flags is set (has been assigned a value) and false otherwise */
  public boolean isSetFlags() {
    return this.flags != null;
  }

  public void setFlagsIsSet(boolean value) {
    if (!value) {
      this.flags = null;
    }
  }

  /**
   * The Interval Options Specification
   * 
   * @see SpecIntervalOptions
   */
  @org.apache.thrift.annotation.Nullable
  public SpecIntervalOptions getOptions() {
    return this.options;
  }

  /**
   * The Interval Options Specification
   * 
   * @see SpecIntervalOptions
   */
  public SpecIntervalPlain setOptions(@org.apache.thrift.annotation.Nullable SpecIntervalOptions options) {
    this.options = options;
    return this;
  }

  public void unsetOptions() {
    this.options = null;
  }

  /** Returns true if field options is set (has been assigned a value) and false otherwise */
  public boolean isSetOptions() {
    return this.options != null;
  }

  public void setOptionsIsSet(boolean value) {
    if (!value) {
      this.options = null;
    }
  }

  /**
   * The Value spec of an Updating Interval
   */
  @org.apache.thrift.annotation.Nullable
  public SpecIntervalUpdatePlain getUpdating() {
    return this.updating;
  }

  /**
   * The Value spec of an Updating Interval
   */
  public SpecIntervalPlain setUpdating(@org.apache.thrift.annotation.Nullable SpecIntervalUpdatePlain updating) {
    this.updating = updating;
    return this;
  }

  public void unsetUpdating() {
    this.updating = null;
  }

  /** Returns true if field updating is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdating() {
    return this.updating != null;
  }

  public void setUpdatingIsSet(boolean value) {
    if (!value) {
      this.updating = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case RANGE_BEGIN:
      if (value == null) {
        unsetRange_begin();
      } else {
        setRange_begin((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case RANGE_END:
      if (value == null) {
        unsetRange_end();
      } else {
        setRange_end((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case OFFSET_KEY:
      if (value == null) {
        unsetOffset_key();
      } else {
        setOffset_key((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case OFFSET_REV:
      if (value == null) {
        unsetOffset_rev();
      } else {
        setOffset_rev((java.lang.Long)value);
      }
      break;

    case KEY_INTERVALS:
      if (value == null) {
        unsetKey_intervals();
      } else {
        setKey_intervals((java.util.List<SpecKeyInterval>)value);
      }
      break;

    case VALUES:
      if (value == null) {
        unsetValues();
      } else {
        setValues((java.util.List<SpecValuePlain>)value);
      }
      break;

    case TS_START:
      if (value == null) {
        unsetTs_start();
      } else {
        setTs_start((SpecTimestamp)value);
      }
      break;

    case TS_FINISH:
      if (value == null) {
        unsetTs_finish();
      } else {
        setTs_finish((SpecTimestamp)value);
      }
      break;

    case FLAGS:
      if (value == null) {
        unsetFlags();
      } else {
        setFlags((SpecFlags)value);
      }
      break;

    case OPTIONS:
      if (value == null) {
        unsetOptions();
      } else {
        setOptions((SpecIntervalOptions)value);
      }
      break;

    case UPDATING:
      if (value == null) {
        unsetUpdating();
      } else {
        setUpdating((SpecIntervalUpdatePlain)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case RANGE_BEGIN:
      return getRange_begin();

    case RANGE_END:
      return getRange_end();

    case OFFSET_KEY:
      return getOffset_key();

    case OFFSET_REV:
      return getOffset_rev();

    case KEY_INTERVALS:
      return getKey_intervals();

    case VALUES:
      return getValues();

    case TS_START:
      return getTs_start();

    case TS_FINISH:
      return getTs_finish();

    case FLAGS:
      return getFlags();

    case OPTIONS:
      return getOptions();

    case UPDATING:
      return getUpdating();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case RANGE_BEGIN:
      return isSetRange_begin();
    case RANGE_END:
      return isSetRange_end();
    case OFFSET_KEY:
      return isSetOffset_key();
    case OFFSET_REV:
      return isSetOffset_rev();
    case KEY_INTERVALS:
      return isSetKey_intervals();
    case VALUES:
      return isSetValues();
    case TS_START:
      return isSetTs_start();
    case TS_FINISH:
      return isSetTs_finish();
    case FLAGS:
      return isSetFlags();
    case OPTIONS:
      return isSetOptions();
    case UPDATING:
      return isSetUpdating();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof SpecIntervalPlain)
      return this.equals((SpecIntervalPlain)that);
    return false;
  }

  public boolean equals(SpecIntervalPlain that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_range_begin = true && this.isSetRange_begin();
    boolean that_present_range_begin = true && that.isSetRange_begin();
    if (this_present_range_begin || that_present_range_begin) {
      if (!(this_present_range_begin && that_present_range_begin))
        return false;
      if (!this.range_begin.equals(that.range_begin))
        return false;
    }

    boolean this_present_range_end = true && this.isSetRange_end();
    boolean that_present_range_end = true && that.isSetRange_end();
    if (this_present_range_end || that_present_range_end) {
      if (!(this_present_range_end && that_present_range_end))
        return false;
      if (!this.range_end.equals(that.range_end))
        return false;
    }

    boolean this_present_offset_key = true && this.isSetOffset_key();
    boolean that_present_offset_key = true && that.isSetOffset_key();
    if (this_present_offset_key || that_present_offset_key) {
      if (!(this_present_offset_key && that_present_offset_key))
        return false;
      if (!this.offset_key.equals(that.offset_key))
        return false;
    }

    boolean this_present_offset_rev = true && this.isSetOffset_rev();
    boolean that_present_offset_rev = true && that.isSetOffset_rev();
    if (this_present_offset_rev || that_present_offset_rev) {
      if (!(this_present_offset_rev && that_present_offset_rev))
        return false;
      if (this.offset_rev != that.offset_rev)
        return false;
    }

    boolean this_present_key_intervals = true && this.isSetKey_intervals();
    boolean that_present_key_intervals = true && that.isSetKey_intervals();
    if (this_present_key_intervals || that_present_key_intervals) {
      if (!(this_present_key_intervals && that_present_key_intervals))
        return false;
      if (!this.key_intervals.equals(that.key_intervals))
        return false;
    }

    boolean this_present_values = true && this.isSetValues();
    boolean that_present_values = true && that.isSetValues();
    if (this_present_values || that_present_values) {
      if (!(this_present_values && that_present_values))
        return false;
      if (!this.values.equals(that.values))
        return false;
    }

    boolean this_present_ts_start = true && this.isSetTs_start();
    boolean that_present_ts_start = true && that.isSetTs_start();
    if (this_present_ts_start || that_present_ts_start) {
      if (!(this_present_ts_start && that_present_ts_start))
        return false;
      if (!this.ts_start.equals(that.ts_start))
        return false;
    }

    boolean this_present_ts_finish = true && this.isSetTs_finish();
    boolean that_present_ts_finish = true && that.isSetTs_finish();
    if (this_present_ts_finish || that_present_ts_finish) {
      if (!(this_present_ts_finish && that_present_ts_finish))
        return false;
      if (!this.ts_finish.equals(that.ts_finish))
        return false;
    }

    boolean this_present_flags = true && this.isSetFlags();
    boolean that_present_flags = true && that.isSetFlags();
    if (this_present_flags || that_present_flags) {
      if (!(this_present_flags && that_present_flags))
        return false;
      if (!this.flags.equals(that.flags))
        return false;
    }

    boolean this_present_options = true && this.isSetOptions();
    boolean that_present_options = true && that.isSetOptions();
    if (this_present_options || that_present_options) {
      if (!(this_present_options && that_present_options))
        return false;
      if (!this.options.equals(that.options))
        return false;
    }

    boolean this_present_updating = true && this.isSetUpdating();
    boolean that_present_updating = true && that.isSetUpdating();
    if (this_present_updating || that_present_updating) {
      if (!(this_present_updating && that_present_updating))
        return false;
      if (!this.updating.equals(that.updating))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetRange_begin()) ? 131071 : 524287);
    if (isSetRange_begin())
      hashCode = hashCode * 8191 + range_begin.hashCode();

    hashCode = hashCode * 8191 + ((isSetRange_end()) ? 131071 : 524287);
    if (isSetRange_end())
      hashCode = hashCode * 8191 + range_end.hashCode();

    hashCode = hashCode * 8191 + ((isSetOffset_key()) ? 131071 : 524287);
    if (isSetOffset_key())
      hashCode = hashCode * 8191 + offset_key.hashCode();

    hashCode = hashCode * 8191 + ((isSetOffset_rev()) ? 131071 : 524287);
    if (isSetOffset_rev())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(offset_rev);

    hashCode = hashCode * 8191 + ((isSetKey_intervals()) ? 131071 : 524287);
    if (isSetKey_intervals())
      hashCode = hashCode * 8191 + key_intervals.hashCode();

    hashCode = hashCode * 8191 + ((isSetValues()) ? 131071 : 524287);
    if (isSetValues())
      hashCode = hashCode * 8191 + values.hashCode();

    hashCode = hashCode * 8191 + ((isSetTs_start()) ? 131071 : 524287);
    if (isSetTs_start())
      hashCode = hashCode * 8191 + ts_start.hashCode();

    hashCode = hashCode * 8191 + ((isSetTs_finish()) ? 131071 : 524287);
    if (isSetTs_finish())
      hashCode = hashCode * 8191 + ts_finish.hashCode();

    hashCode = hashCode * 8191 + ((isSetFlags()) ? 131071 : 524287);
    if (isSetFlags())
      hashCode = hashCode * 8191 + flags.hashCode();

    hashCode = hashCode * 8191 + ((isSetOptions()) ? 131071 : 524287);
    if (isSetOptions())
      hashCode = hashCode * 8191 + options.getValue();

    hashCode = hashCode * 8191 + ((isSetUpdating()) ? 131071 : 524287);
    if (isSetUpdating())
      hashCode = hashCode * 8191 + updating.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SpecIntervalPlain other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetRange_begin(), other.isSetRange_begin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRange_begin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.range_begin, other.range_begin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRange_end(), other.isSetRange_end());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRange_end()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.range_end, other.range_end);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOffset_key(), other.isSetOffset_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset_key, other.offset_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOffset_rev(), other.isSetOffset_rev());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset_rev()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset_rev, other.offset_rev);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKey_intervals(), other.isSetKey_intervals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey_intervals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_intervals, other.key_intervals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetValues(), other.isSetValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.values, other.values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTs_start(), other.isSetTs_start());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTs_start()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ts_start, other.ts_start);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTs_finish(), other.isSetTs_finish());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTs_finish()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ts_finish, other.ts_finish);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFlags(), other.isSetFlags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, other.flags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOptions(), other.isSetOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, other.options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUpdating(), other.isSetUpdating());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdating()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updating, other.updating);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SpecIntervalPlain(");
    boolean first = true;

    sb.append("range_begin:");
    if (this.range_begin == null) {
      sb.append("null");
    } else {
      sb.append(this.range_begin);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("range_end:");
    if (this.range_end == null) {
      sb.append("null");
    } else {
      sb.append(this.range_end);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("offset_key:");
    if (this.offset_key == null) {
      sb.append("null");
    } else {
      sb.append(this.offset_key);
    }
    first = false;
    if (isSetOffset_rev()) {
      if (!first) sb.append(", ");
      sb.append("offset_rev:");
      sb.append(this.offset_rev);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("key_intervals:");
    if (this.key_intervals == null) {
      sb.append("null");
    } else {
      sb.append(this.key_intervals);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("values:");
    if (this.values == null) {
      sb.append("null");
    } else {
      sb.append(this.values);
    }
    first = false;
    if (isSetTs_start()) {
      if (!first) sb.append(", ");
      sb.append("ts_start:");
      if (this.ts_start == null) {
        sb.append("null");
      } else {
        sb.append(this.ts_start);
      }
      first = false;
    }
    if (isSetTs_finish()) {
      if (!first) sb.append(", ");
      sb.append("ts_finish:");
      if (this.ts_finish == null) {
        sb.append("null");
      } else {
        sb.append(this.ts_finish);
      }
      first = false;
    }
    if (isSetFlags()) {
      if (!first) sb.append(", ");
      sb.append("flags:");
      if (this.flags == null) {
        sb.append("null");
      } else {
        sb.append(this.flags);
      }
      first = false;
    }
    if (isSetOptions()) {
      if (!first) sb.append(", ");
      sb.append("options:");
      if (this.options == null) {
        sb.append("null");
      } else {
        sb.append(this.options);
      }
      first = false;
    }
    if (isSetUpdating()) {
      if (!first) sb.append(", ");
      sb.append("updating:");
      if (this.updating == null) {
        sb.append("null");
      } else {
        sb.append(this.updating);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (ts_start != null) {
      ts_start.validate();
    }
    if (ts_finish != null) {
      ts_finish.validate();
    }
    if (flags != null) {
      flags.validate();
    }
    if (updating != null) {
      updating.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SpecIntervalPlainStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SpecIntervalPlainStandardScheme getScheme() {
      return new SpecIntervalPlainStandardScheme();
    }
  }

  private static class SpecIntervalPlainStandardScheme extends org.apache.thrift.scheme.StandardScheme<SpecIntervalPlain> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, SpecIntervalPlain struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RANGE_BEGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                struct.range_begin = new java.util.ArrayList<java.nio.ByteBuffer>(_list104.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem105;
                for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                {
                  _elem105 = iprot.readBinary();
                  struct.range_begin.add(_elem105);
                }
                iprot.readListEnd();
              }
              struct.setRange_beginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RANGE_END
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list107 = iprot.readListBegin();
                struct.range_end = new java.util.ArrayList<java.nio.ByteBuffer>(_list107.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem108;
                for (int _i109 = 0; _i109 < _list107.size; ++_i109)
                {
                  _elem108 = iprot.readBinary();
                  struct.range_end.add(_elem108);
                }
                iprot.readListEnd();
              }
              struct.setRange_endIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OFFSET_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list110 = iprot.readListBegin();
                struct.offset_key = new java.util.ArrayList<java.nio.ByteBuffer>(_list110.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem111;
                for (int _i112 = 0; _i112 < _list110.size; ++_i112)
                {
                  _elem111 = iprot.readBinary();
                  struct.offset_key.add(_elem111);
                }
                iprot.readListEnd();
              }
              struct.setOffset_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OFFSET_REV
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.offset_rev = iprot.readI64();
              struct.setOffset_revIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // KEY_INTERVALS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list113 = iprot.readListBegin();
                struct.key_intervals = new java.util.ArrayList<SpecKeyInterval>(_list113.size);
                @org.apache.thrift.annotation.Nullable SpecKeyInterval _elem114;
                for (int _i115 = 0; _i115 < _list113.size; ++_i115)
                {
                  _elem114 = new SpecKeyInterval();
                  _elem114.read(iprot);
                  struct.key_intervals.add(_elem114);
                }
                iprot.readListEnd();
              }
              struct.setKey_intervalsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list116 = iprot.readListBegin();
                struct.values = new java.util.ArrayList<SpecValuePlain>(_list116.size);
                @org.apache.thrift.annotation.Nullable SpecValuePlain _elem117;
                for (int _i118 = 0; _i118 < _list116.size; ++_i118)
                {
                  _elem117 = new SpecValuePlain();
                  _elem117.read(iprot);
                  struct.values.add(_elem117);
                }
                iprot.readListEnd();
              }
              struct.setValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TS_START
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ts_start = new SpecTimestamp();
              struct.ts_start.read(iprot);
              struct.setTs_startIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TS_FINISH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ts_finish = new SpecTimestamp();
              struct.ts_finish.read(iprot);
              struct.setTs_finishIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FLAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.flags = new SpecFlags();
              struct.flags.read(iprot);
              struct.setFlagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.options = org.swcdb.thrift.gen.SpecIntervalOptions.findByValue(iprot.readI32());
              struct.setOptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UPDATING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.updating = new SpecIntervalUpdatePlain();
              struct.updating.read(iprot);
              struct.setUpdatingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, SpecIntervalPlain struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.range_begin != null) {
        oprot.writeFieldBegin(RANGE_BEGIN_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.range_begin.size()));
          for (java.nio.ByteBuffer _iter119 : struct.range_begin)
          {
            oprot.writeBinary(_iter119);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.range_end != null) {
        oprot.writeFieldBegin(RANGE_END_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.range_end.size()));
          for (java.nio.ByteBuffer _iter120 : struct.range_end)
          {
            oprot.writeBinary(_iter120);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.offset_key != null) {
        oprot.writeFieldBegin(OFFSET_KEY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.offset_key.size()));
          for (java.nio.ByteBuffer _iter121 : struct.offset_key)
          {
            oprot.writeBinary(_iter121);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetOffset_rev()) {
        oprot.writeFieldBegin(OFFSET_REV_FIELD_DESC);
        oprot.writeI64(struct.offset_rev);
        oprot.writeFieldEnd();
      }
      if (struct.key_intervals != null) {
        oprot.writeFieldBegin(KEY_INTERVALS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.key_intervals.size()));
          for (SpecKeyInterval _iter122 : struct.key_intervals)
          {
            _iter122.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.values != null) {
        oprot.writeFieldBegin(VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.values.size()));
          for (SpecValuePlain _iter123 : struct.values)
          {
            _iter123.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.ts_start != null) {
        if (struct.isSetTs_start()) {
          oprot.writeFieldBegin(TS_START_FIELD_DESC);
          struct.ts_start.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ts_finish != null) {
        if (struct.isSetTs_finish()) {
          oprot.writeFieldBegin(TS_FINISH_FIELD_DESC);
          struct.ts_finish.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.flags != null) {
        if (struct.isSetFlags()) {
          oprot.writeFieldBegin(FLAGS_FIELD_DESC);
          struct.flags.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.options != null) {
        if (struct.isSetOptions()) {
          oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
          oprot.writeI32(struct.options.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.updating != null) {
        if (struct.isSetUpdating()) {
          oprot.writeFieldBegin(UPDATING_FIELD_DESC);
          struct.updating.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SpecIntervalPlainTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SpecIntervalPlainTupleScheme getScheme() {
      return new SpecIntervalPlainTupleScheme();
    }
  }

  private static class SpecIntervalPlainTupleScheme extends org.apache.thrift.scheme.TupleScheme<SpecIntervalPlain> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SpecIntervalPlain struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRange_begin()) {
        optionals.set(0);
      }
      if (struct.isSetRange_end()) {
        optionals.set(1);
      }
      if (struct.isSetOffset_key()) {
        optionals.set(2);
      }
      if (struct.isSetOffset_rev()) {
        optionals.set(3);
      }
      if (struct.isSetKey_intervals()) {
        optionals.set(4);
      }
      if (struct.isSetValues()) {
        optionals.set(5);
      }
      if (struct.isSetTs_start()) {
        optionals.set(6);
      }
      if (struct.isSetTs_finish()) {
        optionals.set(7);
      }
      if (struct.isSetFlags()) {
        optionals.set(8);
      }
      if (struct.isSetOptions()) {
        optionals.set(9);
      }
      if (struct.isSetUpdating()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetRange_begin()) {
        {
          oprot.writeI32(struct.range_begin.size());
          for (java.nio.ByteBuffer _iter124 : struct.range_begin)
          {
            oprot.writeBinary(_iter124);
          }
        }
      }
      if (struct.isSetRange_end()) {
        {
          oprot.writeI32(struct.range_end.size());
          for (java.nio.ByteBuffer _iter125 : struct.range_end)
          {
            oprot.writeBinary(_iter125);
          }
        }
      }
      if (struct.isSetOffset_key()) {
        {
          oprot.writeI32(struct.offset_key.size());
          for (java.nio.ByteBuffer _iter126 : struct.offset_key)
          {
            oprot.writeBinary(_iter126);
          }
        }
      }
      if (struct.isSetOffset_rev()) {
        oprot.writeI64(struct.offset_rev);
      }
      if (struct.isSetKey_intervals()) {
        {
          oprot.writeI32(struct.key_intervals.size());
          for (SpecKeyInterval _iter127 : struct.key_intervals)
          {
            _iter127.write(oprot);
          }
        }
      }
      if (struct.isSetValues()) {
        {
          oprot.writeI32(struct.values.size());
          for (SpecValuePlain _iter128 : struct.values)
          {
            _iter128.write(oprot);
          }
        }
      }
      if (struct.isSetTs_start()) {
        struct.ts_start.write(oprot);
      }
      if (struct.isSetTs_finish()) {
        struct.ts_finish.write(oprot);
      }
      if (struct.isSetFlags()) {
        struct.flags.write(oprot);
      }
      if (struct.isSetOptions()) {
        oprot.writeI32(struct.options.getValue());
      }
      if (struct.isSetUpdating()) {
        struct.updating.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SpecIntervalPlain struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list129 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.range_begin = new java.util.ArrayList<java.nio.ByteBuffer>(_list129.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem130;
          for (int _i131 = 0; _i131 < _list129.size; ++_i131)
          {
            _elem130 = iprot.readBinary();
            struct.range_begin.add(_elem130);
          }
        }
        struct.setRange_beginIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list132 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.range_end = new java.util.ArrayList<java.nio.ByteBuffer>(_list132.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem133;
          for (int _i134 = 0; _i134 < _list132.size; ++_i134)
          {
            _elem133 = iprot.readBinary();
            struct.range_end.add(_elem133);
          }
        }
        struct.setRange_endIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list135 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.offset_key = new java.util.ArrayList<java.nio.ByteBuffer>(_list135.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem136;
          for (int _i137 = 0; _i137 < _list135.size; ++_i137)
          {
            _elem136 = iprot.readBinary();
            struct.offset_key.add(_elem136);
          }
        }
        struct.setOffset_keyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.offset_rev = iprot.readI64();
        struct.setOffset_revIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list138 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.key_intervals = new java.util.ArrayList<SpecKeyInterval>(_list138.size);
          @org.apache.thrift.annotation.Nullable SpecKeyInterval _elem139;
          for (int _i140 = 0; _i140 < _list138.size; ++_i140)
          {
            _elem139 = new SpecKeyInterval();
            _elem139.read(iprot);
            struct.key_intervals.add(_elem139);
          }
        }
        struct.setKey_intervalsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list141 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.values = new java.util.ArrayList<SpecValuePlain>(_list141.size);
          @org.apache.thrift.annotation.Nullable SpecValuePlain _elem142;
          for (int _i143 = 0; _i143 < _list141.size; ++_i143)
          {
            _elem142 = new SpecValuePlain();
            _elem142.read(iprot);
            struct.values.add(_elem142);
          }
        }
        struct.setValuesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ts_start = new SpecTimestamp();
        struct.ts_start.read(iprot);
        struct.setTs_startIsSet(true);
      }
      if (incoming.get(7)) {
        struct.ts_finish = new SpecTimestamp();
        struct.ts_finish.read(iprot);
        struct.setTs_finishIsSet(true);
      }
      if (incoming.get(8)) {
        struct.flags = new SpecFlags();
        struct.flags.read(iprot);
        struct.setFlagsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.options = org.swcdb.thrift.gen.SpecIntervalOptions.findByValue(iprot.readI32());
        struct.setOptionsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.updating = new SpecIntervalUpdatePlain();
        struct.updating.read(iprot);
        struct.setUpdatingIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

