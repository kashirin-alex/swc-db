/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.swcdb.thrift.gen;

/**
 * The Serial Value Cell field
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class CellValueSerial implements org.apache.thrift.TBase<CellValueSerial, CellValueSerial._Fields>, java.io.Serializable, Cloneable, Comparable<CellValueSerial> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CellValueSerial");

  private static final org.apache.thrift.protocol.TField FIELD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("field_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField V_INT64_FIELD_DESC = new org.apache.thrift.protocol.TField("v_int64", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField V_DOUBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("v_double", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField V_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("v_bytes", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField V_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("v_key", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField V_LI_FIELD_DESC = new org.apache.thrift.protocol.TField("v_li", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField V_LB_FIELD_DESC = new org.apache.thrift.protocol.TField("v_lb", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CellValueSerialStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CellValueSerialTupleSchemeFactory();

  /**
   * The Field ID, a single ID can have any/all the field types
   */
  public int field_id; // required
  /**
   * The INT64 type field
   */
  public long v_int64; // optional
  /**
   * The DOUBLE type field
   */
  public double v_double; // optional
  /**
   * The BYTES type field
   */
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer v_bytes; // optional
  /**
   * The Cell KEY type field
   */
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> v_key; // optional
  /**
   * The LIST INT64 type field
   */
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> v_li; // optional
  /**
   * The LIST BYTES type field
   */
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> v_lb; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The Field ID, a single ID can have any/all the field types
     */
    FIELD_ID((short)1, "field_id"),
    /**
     * The INT64 type field
     */
    V_INT64((short)2, "v_int64"),
    /**
     * The DOUBLE type field
     */
    V_DOUBLE((short)3, "v_double"),
    /**
     * The BYTES type field
     */
    V_BYTES((short)4, "v_bytes"),
    /**
     * The Cell KEY type field
     */
    V_KEY((short)5, "v_key"),
    /**
     * The LIST INT64 type field
     */
    V_LI((short)6, "v_li"),
    /**
     * The LIST BYTES type field
     */
    V_LB((short)7, "v_lb");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIELD_ID
          return FIELD_ID;
        case 2: // V_INT64
          return V_INT64;
        case 3: // V_DOUBLE
          return V_DOUBLE;
        case 4: // V_BYTES
          return V_BYTES;
        case 5: // V_KEY
          return V_KEY;
        case 6: // V_LI
          return V_LI;
        case 7: // V_LB
          return V_LB;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FIELD_ID_ISSET_ID = 0;
  private static final int __V_INT64_ISSET_ID = 1;
  private static final int __V_DOUBLE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.V_INT64,_Fields.V_DOUBLE,_Fields.V_BYTES,_Fields.V_KEY,_Fields.V_LI,_Fields.V_LB};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIELD_ID, new org.apache.thrift.meta_data.FieldMetaData("field_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.V_INT64, new org.apache.thrift.meta_data.FieldMetaData("v_int64", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.V_DOUBLE, new org.apache.thrift.meta_data.FieldMetaData("v_double", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.V_BYTES, new org.apache.thrift.meta_data.FieldMetaData("v_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.V_KEY, new org.apache.thrift.meta_data.FieldMetaData("v_key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "Key")));
    tmpMap.put(_Fields.V_LI, new org.apache.thrift.meta_data.FieldMetaData("v_li", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.V_LB, new org.apache.thrift.meta_data.FieldMetaData("v_lb", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CellValueSerial.class, metaDataMap);
  }

  public CellValueSerial() {
  }

  public CellValueSerial(
    int field_id)
  {
    this();
    this.field_id = field_id;
    setField_idIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CellValueSerial(CellValueSerial other) {
    __isset_bitfield = other.__isset_bitfield;
    this.field_id = other.field_id;
    this.v_int64 = other.v_int64;
    this.v_double = other.v_double;
    if (other.isSetV_bytes()) {
      this.v_bytes = org.apache.thrift.TBaseHelper.copyBinary(other.v_bytes);
    }
    if (other.isSetV_key()) {
      java.util.List<java.nio.ByteBuffer> __this__v_key = new java.util.ArrayList<java.nio.ByteBuffer>(other.v_key);
      this.v_key = __this__v_key;
    }
    if (other.isSetV_li()) {
      java.util.List<java.lang.Long> __this__v_li = new java.util.ArrayList<java.lang.Long>(other.v_li);
      this.v_li = __this__v_li;
    }
    if (other.isSetV_lb()) {
      java.util.List<java.nio.ByteBuffer> __this__v_lb = new java.util.ArrayList<java.nio.ByteBuffer>(other.v_lb);
      this.v_lb = __this__v_lb;
    }
  }

  @Override
  public CellValueSerial deepCopy() {
    return new CellValueSerial(this);
  }

  @Override
  public void clear() {
    setField_idIsSet(false);
    this.field_id = 0;
    setV_int64IsSet(false);
    this.v_int64 = 0;
    setV_doubleIsSet(false);
    this.v_double = 0.0;
    this.v_bytes = null;
    this.v_key = null;
    this.v_li = null;
    this.v_lb = null;
  }

  /**
   * The Field ID, a single ID can have any/all the field types
   */
  public int getField_id() {
    return this.field_id;
  }

  /**
   * The Field ID, a single ID can have any/all the field types
   */
  public CellValueSerial setField_id(int field_id) {
    this.field_id = field_id;
    setField_idIsSet(true);
    return this;
  }

  public void unsetField_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FIELD_ID_ISSET_ID);
  }

  /** Returns true if field field_id is set (has been assigned a value) and false otherwise */
  public boolean isSetField_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FIELD_ID_ISSET_ID);
  }

  public void setField_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FIELD_ID_ISSET_ID, value);
  }

  /**
   * The INT64 type field
   */
  public long getV_int64() {
    return this.v_int64;
  }

  /**
   * The INT64 type field
   */
  public CellValueSerial setV_int64(long v_int64) {
    this.v_int64 = v_int64;
    setV_int64IsSet(true);
    return this;
  }

  public void unsetV_int64() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __V_INT64_ISSET_ID);
  }

  /** Returns true if field v_int64 is set (has been assigned a value) and false otherwise */
  public boolean isSetV_int64() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __V_INT64_ISSET_ID);
  }

  public void setV_int64IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __V_INT64_ISSET_ID, value);
  }

  /**
   * The DOUBLE type field
   */
  public double getV_double() {
    return this.v_double;
  }

  /**
   * The DOUBLE type field
   */
  public CellValueSerial setV_double(double v_double) {
    this.v_double = v_double;
    setV_doubleIsSet(true);
    return this;
  }

  public void unsetV_double() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __V_DOUBLE_ISSET_ID);
  }

  /** Returns true if field v_double is set (has been assigned a value) and false otherwise */
  public boolean isSetV_double() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __V_DOUBLE_ISSET_ID);
  }

  public void setV_doubleIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __V_DOUBLE_ISSET_ID, value);
  }

  /**
   * The BYTES type field
   */
  public byte[] getV_bytes() {
    setV_bytes(org.apache.thrift.TBaseHelper.rightSize(v_bytes));
    return v_bytes == null ? null : v_bytes.array();
  }

  public java.nio.ByteBuffer bufferForV_bytes() {
    return org.apache.thrift.TBaseHelper.copyBinary(v_bytes);
  }

  /**
   * The BYTES type field
   */
  public CellValueSerial setV_bytes(byte[] v_bytes) {
    this.v_bytes = v_bytes == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(v_bytes.clone());
    return this;
  }

  public CellValueSerial setV_bytes(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer v_bytes) {
    this.v_bytes = org.apache.thrift.TBaseHelper.copyBinary(v_bytes);
    return this;
  }

  public void unsetV_bytes() {
    this.v_bytes = null;
  }

  /** Returns true if field v_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetV_bytes() {
    return this.v_bytes != null;
  }

  public void setV_bytesIsSet(boolean value) {
    if (!value) {
      this.v_bytes = null;
    }
  }

  public int getV_keySize() {
    return (this.v_key == null) ? 0 : this.v_key.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getV_keyIterator() {
    return (this.v_key == null) ? null : this.v_key.iterator();
  }

  public void addToV_key(java.nio.ByteBuffer elem) {
    if (this.v_key == null) {
      this.v_key = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.v_key.add(elem);
  }

  /**
   * The Cell KEY type field
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getV_key() {
    return this.v_key;
  }

  /**
   * The Cell KEY type field
   */
  public CellValueSerial setV_key(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> v_key) {
    this.v_key = v_key;
    return this;
  }

  public void unsetV_key() {
    this.v_key = null;
  }

  /** Returns true if field v_key is set (has been assigned a value) and false otherwise */
  public boolean isSetV_key() {
    return this.v_key != null;
  }

  public void setV_keyIsSet(boolean value) {
    if (!value) {
      this.v_key = null;
    }
  }

  public int getV_liSize() {
    return (this.v_li == null) ? 0 : this.v_li.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Long> getV_liIterator() {
    return (this.v_li == null) ? null : this.v_li.iterator();
  }

  public void addToV_li(long elem) {
    if (this.v_li == null) {
      this.v_li = new java.util.ArrayList<java.lang.Long>();
    }
    this.v_li.add(elem);
  }

  /**
   * The LIST INT64 type field
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Long> getV_li() {
    return this.v_li;
  }

  /**
   * The LIST INT64 type field
   */
  public CellValueSerial setV_li(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> v_li) {
    this.v_li = v_li;
    return this;
  }

  public void unsetV_li() {
    this.v_li = null;
  }

  /** Returns true if field v_li is set (has been assigned a value) and false otherwise */
  public boolean isSetV_li() {
    return this.v_li != null;
  }

  public void setV_liIsSet(boolean value) {
    if (!value) {
      this.v_li = null;
    }
  }

  public int getV_lbSize() {
    return (this.v_lb == null) ? 0 : this.v_lb.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getV_lbIterator() {
    return (this.v_lb == null) ? null : this.v_lb.iterator();
  }

  public void addToV_lb(java.nio.ByteBuffer elem) {
    if (this.v_lb == null) {
      this.v_lb = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.v_lb.add(elem);
  }

  /**
   * The LIST BYTES type field
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getV_lb() {
    return this.v_lb;
  }

  /**
   * The LIST BYTES type field
   */
  public CellValueSerial setV_lb(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> v_lb) {
    this.v_lb = v_lb;
    return this;
  }

  public void unsetV_lb() {
    this.v_lb = null;
  }

  /** Returns true if field v_lb is set (has been assigned a value) and false otherwise */
  public boolean isSetV_lb() {
    return this.v_lb != null;
  }

  public void setV_lbIsSet(boolean value) {
    if (!value) {
      this.v_lb = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case FIELD_ID:
      if (value == null) {
        unsetField_id();
      } else {
        setField_id((java.lang.Integer)value);
      }
      break;

    case V_INT64:
      if (value == null) {
        unsetV_int64();
      } else {
        setV_int64((java.lang.Long)value);
      }
      break;

    case V_DOUBLE:
      if (value == null) {
        unsetV_double();
      } else {
        setV_double((java.lang.Double)value);
      }
      break;

    case V_BYTES:
      if (value == null) {
        unsetV_bytes();
      } else {
        if (value instanceof byte[]) {
          setV_bytes((byte[])value);
        } else {
          setV_bytes((java.nio.ByteBuffer)value);
        }
      }
      break;

    case V_KEY:
      if (value == null) {
        unsetV_key();
      } else {
        setV_key((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case V_LI:
      if (value == null) {
        unsetV_li();
      } else {
        setV_li((java.util.List<java.lang.Long>)value);
      }
      break;

    case V_LB:
      if (value == null) {
        unsetV_lb();
      } else {
        setV_lb((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FIELD_ID:
      return getField_id();

    case V_INT64:
      return getV_int64();

    case V_DOUBLE:
      return getV_double();

    case V_BYTES:
      return getV_bytes();

    case V_KEY:
      return getV_key();

    case V_LI:
      return getV_li();

    case V_LB:
      return getV_lb();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FIELD_ID:
      return isSetField_id();
    case V_INT64:
      return isSetV_int64();
    case V_DOUBLE:
      return isSetV_double();
    case V_BYTES:
      return isSetV_bytes();
    case V_KEY:
      return isSetV_key();
    case V_LI:
      return isSetV_li();
    case V_LB:
      return isSetV_lb();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof CellValueSerial)
      return this.equals((CellValueSerial)that);
    return false;
  }

  public boolean equals(CellValueSerial that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_field_id = true;
    boolean that_present_field_id = true;
    if (this_present_field_id || that_present_field_id) {
      if (!(this_present_field_id && that_present_field_id))
        return false;
      if (this.field_id != that.field_id)
        return false;
    }

    boolean this_present_v_int64 = true && this.isSetV_int64();
    boolean that_present_v_int64 = true && that.isSetV_int64();
    if (this_present_v_int64 || that_present_v_int64) {
      if (!(this_present_v_int64 && that_present_v_int64))
        return false;
      if (this.v_int64 != that.v_int64)
        return false;
    }

    boolean this_present_v_double = true && this.isSetV_double();
    boolean that_present_v_double = true && that.isSetV_double();
    if (this_present_v_double || that_present_v_double) {
      if (!(this_present_v_double && that_present_v_double))
        return false;
      if (this.v_double != that.v_double)
        return false;
    }

    boolean this_present_v_bytes = true && this.isSetV_bytes();
    boolean that_present_v_bytes = true && that.isSetV_bytes();
    if (this_present_v_bytes || that_present_v_bytes) {
      if (!(this_present_v_bytes && that_present_v_bytes))
        return false;
      if (!this.v_bytes.equals(that.v_bytes))
        return false;
    }

    boolean this_present_v_key = true && this.isSetV_key();
    boolean that_present_v_key = true && that.isSetV_key();
    if (this_present_v_key || that_present_v_key) {
      if (!(this_present_v_key && that_present_v_key))
        return false;
      if (!this.v_key.equals(that.v_key))
        return false;
    }

    boolean this_present_v_li = true && this.isSetV_li();
    boolean that_present_v_li = true && that.isSetV_li();
    if (this_present_v_li || that_present_v_li) {
      if (!(this_present_v_li && that_present_v_li))
        return false;
      if (!this.v_li.equals(that.v_li))
        return false;
    }

    boolean this_present_v_lb = true && this.isSetV_lb();
    boolean that_present_v_lb = true && that.isSetV_lb();
    if (this_present_v_lb || that_present_v_lb) {
      if (!(this_present_v_lb && that_present_v_lb))
        return false;
      if (!this.v_lb.equals(that.v_lb))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + field_id;

    hashCode = hashCode * 8191 + ((isSetV_int64()) ? 131071 : 524287);
    if (isSetV_int64())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(v_int64);

    hashCode = hashCode * 8191 + ((isSetV_double()) ? 131071 : 524287);
    if (isSetV_double())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(v_double);

    hashCode = hashCode * 8191 + ((isSetV_bytes()) ? 131071 : 524287);
    if (isSetV_bytes())
      hashCode = hashCode * 8191 + v_bytes.hashCode();

    hashCode = hashCode * 8191 + ((isSetV_key()) ? 131071 : 524287);
    if (isSetV_key())
      hashCode = hashCode * 8191 + v_key.hashCode();

    hashCode = hashCode * 8191 + ((isSetV_li()) ? 131071 : 524287);
    if (isSetV_li())
      hashCode = hashCode * 8191 + v_li.hashCode();

    hashCode = hashCode * 8191 + ((isSetV_lb()) ? 131071 : 524287);
    if (isSetV_lb())
      hashCode = hashCode * 8191 + v_lb.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(CellValueSerial other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetField_id(), other.isSetField_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field_id, other.field_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetV_int64(), other.isSetV_int64());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetV_int64()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v_int64, other.v_int64);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetV_double(), other.isSetV_double());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetV_double()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v_double, other.v_double);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetV_bytes(), other.isSetV_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetV_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v_bytes, other.v_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetV_key(), other.isSetV_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetV_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v_key, other.v_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetV_li(), other.isSetV_li());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetV_li()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v_li, other.v_li);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetV_lb(), other.isSetV_lb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetV_lb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v_lb, other.v_lb);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CellValueSerial(");
    boolean first = true;

    sb.append("field_id:");
    sb.append(this.field_id);
    first = false;
    if (isSetV_int64()) {
      if (!first) sb.append(", ");
      sb.append("v_int64:");
      sb.append(this.v_int64);
      first = false;
    }
    if (isSetV_double()) {
      if (!first) sb.append(", ");
      sb.append("v_double:");
      sb.append(this.v_double);
      first = false;
    }
    if (isSetV_bytes()) {
      if (!first) sb.append(", ");
      sb.append("v_bytes:");
      if (this.v_bytes == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.v_bytes, sb);
      }
      first = false;
    }
    if (isSetV_key()) {
      if (!first) sb.append(", ");
      sb.append("v_key:");
      if (this.v_key == null) {
        sb.append("null");
      } else {
        sb.append(this.v_key);
      }
      first = false;
    }
    if (isSetV_li()) {
      if (!first) sb.append(", ");
      sb.append("v_li:");
      if (this.v_li == null) {
        sb.append("null");
      } else {
        sb.append(this.v_li);
      }
      first = false;
    }
    if (isSetV_lb()) {
      if (!first) sb.append(", ");
      sb.append("v_lb:");
      if (this.v_lb == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.v_lb, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CellValueSerialStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public CellValueSerialStandardScheme getScheme() {
      return new CellValueSerialStandardScheme();
    }
  }

  private static class CellValueSerialStandardScheme extends org.apache.thrift.scheme.StandardScheme<CellValueSerial> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, CellValueSerial struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIELD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.field_id = iprot.readI32();
              struct.setField_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // V_INT64
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.v_int64 = iprot.readI64();
              struct.setV_int64IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // V_DOUBLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.v_double = iprot.readDouble();
              struct.setV_doubleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // V_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.v_bytes = iprot.readBinary();
              struct.setV_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // V_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list288 = iprot.readListBegin();
                struct.v_key = new java.util.ArrayList<java.nio.ByteBuffer>(_list288.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem289;
                for (int _i290 = 0; _i290 < _list288.size; ++_i290)
                {
                  _elem289 = iprot.readBinary();
                  struct.v_key.add(_elem289);
                }
                iprot.readListEnd();
              }
              struct.setV_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // V_LI
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list291 = iprot.readListBegin();
                struct.v_li = new java.util.ArrayList<java.lang.Long>(_list291.size);
                long _elem292;
                for (int _i293 = 0; _i293 < _list291.size; ++_i293)
                {
                  _elem292 = iprot.readI64();
                  struct.v_li.add(_elem292);
                }
                iprot.readListEnd();
              }
              struct.setV_liIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // V_LB
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list294 = iprot.readListBegin();
                struct.v_lb = new java.util.ArrayList<java.nio.ByteBuffer>(_list294.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem295;
                for (int _i296 = 0; _i296 < _list294.size; ++_i296)
                {
                  _elem295 = iprot.readBinary();
                  struct.v_lb.add(_elem295);
                }
                iprot.readListEnd();
              }
              struct.setV_lbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, CellValueSerial struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FIELD_ID_FIELD_DESC);
      oprot.writeI32(struct.field_id);
      oprot.writeFieldEnd();
      if (struct.isSetV_int64()) {
        oprot.writeFieldBegin(V_INT64_FIELD_DESC);
        oprot.writeI64(struct.v_int64);
        oprot.writeFieldEnd();
      }
      if (struct.isSetV_double()) {
        oprot.writeFieldBegin(V_DOUBLE_FIELD_DESC);
        oprot.writeDouble(struct.v_double);
        oprot.writeFieldEnd();
      }
      if (struct.v_bytes != null) {
        if (struct.isSetV_bytes()) {
          oprot.writeFieldBegin(V_BYTES_FIELD_DESC);
          oprot.writeBinary(struct.v_bytes);
          oprot.writeFieldEnd();
        }
      }
      if (struct.v_key != null) {
        if (struct.isSetV_key()) {
          oprot.writeFieldBegin(V_KEY_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.v_key.size()));
            for (java.nio.ByteBuffer _iter297 : struct.v_key)
            {
              oprot.writeBinary(_iter297);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.v_li != null) {
        if (struct.isSetV_li()) {
          oprot.writeFieldBegin(V_LI_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.v_li.size()));
            for (long _iter298 : struct.v_li)
            {
              oprot.writeI64(_iter298);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.v_lb != null) {
        if (struct.isSetV_lb()) {
          oprot.writeFieldBegin(V_LB_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.v_lb.size()));
            for (java.nio.ByteBuffer _iter299 : struct.v_lb)
            {
              oprot.writeBinary(_iter299);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CellValueSerialTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public CellValueSerialTupleScheme getScheme() {
      return new CellValueSerialTupleScheme();
    }
  }

  private static class CellValueSerialTupleScheme extends org.apache.thrift.scheme.TupleScheme<CellValueSerial> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CellValueSerial struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetField_id()) {
        optionals.set(0);
      }
      if (struct.isSetV_int64()) {
        optionals.set(1);
      }
      if (struct.isSetV_double()) {
        optionals.set(2);
      }
      if (struct.isSetV_bytes()) {
        optionals.set(3);
      }
      if (struct.isSetV_key()) {
        optionals.set(4);
      }
      if (struct.isSetV_li()) {
        optionals.set(5);
      }
      if (struct.isSetV_lb()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetField_id()) {
        oprot.writeI32(struct.field_id);
      }
      if (struct.isSetV_int64()) {
        oprot.writeI64(struct.v_int64);
      }
      if (struct.isSetV_double()) {
        oprot.writeDouble(struct.v_double);
      }
      if (struct.isSetV_bytes()) {
        oprot.writeBinary(struct.v_bytes);
      }
      if (struct.isSetV_key()) {
        {
          oprot.writeI32(struct.v_key.size());
          for (java.nio.ByteBuffer _iter300 : struct.v_key)
          {
            oprot.writeBinary(_iter300);
          }
        }
      }
      if (struct.isSetV_li()) {
        {
          oprot.writeI32(struct.v_li.size());
          for (long _iter301 : struct.v_li)
          {
            oprot.writeI64(_iter301);
          }
        }
      }
      if (struct.isSetV_lb()) {
        {
          oprot.writeI32(struct.v_lb.size());
          for (java.nio.ByteBuffer _iter302 : struct.v_lb)
          {
            oprot.writeBinary(_iter302);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CellValueSerial struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.field_id = iprot.readI32();
        struct.setField_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.v_int64 = iprot.readI64();
        struct.setV_int64IsSet(true);
      }
      if (incoming.get(2)) {
        struct.v_double = iprot.readDouble();
        struct.setV_doubleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.v_bytes = iprot.readBinary();
        struct.setV_bytesIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list303 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.v_key = new java.util.ArrayList<java.nio.ByteBuffer>(_list303.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem304;
          for (int _i305 = 0; _i305 < _list303.size; ++_i305)
          {
            _elem304 = iprot.readBinary();
            struct.v_key.add(_elem304);
          }
        }
        struct.setV_keyIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list306 = iprot.readListBegin(org.apache.thrift.protocol.TType.I64);
          struct.v_li = new java.util.ArrayList<java.lang.Long>(_list306.size);
          long _elem307;
          for (int _i308 = 0; _i308 < _list306.size; ++_i308)
          {
            _elem307 = iprot.readI64();
            struct.v_li.add(_elem307);
          }
        }
        struct.setV_liIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list309 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.v_lb = new java.util.ArrayList<java.nio.ByteBuffer>(_list309.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem310;
          for (int _i311 = 0; _i311 < _list309.size; ++_i311)
          {
            _elem310 = iprot.readBinary();
            struct.v_lb.add(_elem310);
          }
        }
        struct.setV_lbIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

