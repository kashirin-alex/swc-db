/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.swcdb.thrift.gen;


/**
 * LIST Operations for Serial Field Update of array/list/bytes with LIST-op in the inner SERIAL fields
 */
public enum FU_LIST_OP implements org.apache.thrift.TEnum {
  /**
   * Supported by field-types: BYTES, LIST_BYTES, LIST_INT64. Replaces with the update value
   */
  REPLACE(0),
  /**
   * Supported by field-types: BYTES, LIST_BYTES, LIST_INT64. Appends the update value to a field value
   */
  APPEND(1),
  /**
   * Supported by field-types: BYTES, LIST_BYTES, LIST_INT64. Prepends the update value to a field value
   */
  PREPEND(2),
  /**
   * Supported by field-types: BYTES, LIST_BYTES, LIST_INT64. Insert the update value at position in a field value (appends if pos above value)
   */
  INSERT(3),
  /**
   * Supported by field-types: BYTES, LIST_BYTES, LIST_INT64. Overwrites a field value at position with new value (appends if pos above value)
   */
  OVERWRITE(4),
  /**
   * Supported by field-types: BYTES, LIST_BYTES, LIST_INT64. Erases the position in a field value
   */
  ERASE(5),
  /**
   * Supported by field-types: LIST_BYTES, LIST_INT64. The field value items have CTRL_VALUE_SET/DEL OP
   */
  BY_UNIQUE(6),
  /**
   * Supported by field-types: LIST_BYTES, LIST_INT64. The field value items have CTRL_VALUE_SET/DEL OP and Comparator
   */
  BY_COND(7),
  /**
   * Supported by field-types: LIST_BYTES, LIST_INT64. The field value is with Postion and OP in items
   */
  BY_INDEX(8);

  private final int value;

  private FU_LIST_OP(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  @Override
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  @org.apache.thrift.annotation.Nullable
  public static FU_LIST_OP findByValue(int value) { 
    switch (value) {
      case 0:
        return REPLACE;
      case 1:
        return APPEND;
      case 2:
        return PREPEND;
      case 3:
        return INSERT;
      case 4:
        return OVERWRITE;
      case 5:
        return ERASE;
      case 6:
        return BY_UNIQUE;
      case 7:
        return BY_COND;
      case 8:
        return BY_INDEX;
      default:
        return null;
    }
  }
}
