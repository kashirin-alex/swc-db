/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.swcdb.thrift.gen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class SpecValueSerialField implements org.apache.thrift.TBase<SpecValueSerialField, SpecValueSerialField._Fields>, java.io.Serializable, Cloneable, Comparable<SpecValueSerialField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SpecValueSerialField");

  private static final org.apache.thrift.protocol.TField FIELD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("field_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SPEC_INT64_FIELD_DESC = new org.apache.thrift.protocol.TField("spec_int64", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField SPEC_DOUBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("spec_double", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField SPEC_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("spec_bytes", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField SPEC_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("spec_key", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField SPEC_LI_FIELD_DESC = new org.apache.thrift.protocol.TField("spec_li", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField SPEC_LB_FIELD_DESC = new org.apache.thrift.protocol.TField("spec_lb", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SpecValueSerialFieldStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SpecValueSerialFieldTupleSchemeFactory();

  /**
   * The Field Id of the Value Field
   */
  public int field_id; // required
  /**
   * The specifications of Int64 for the field
   */
  public @org.apache.thrift.annotation.Nullable SpecValueSerial_INT64 spec_int64; // optional
  /**
   * The specifications of Double for the field
   */
  public @org.apache.thrift.annotation.Nullable SpecValueSerial_DOUBLE spec_double; // optional
  /**
   * The specifications of Bytes for the field
   */
  public @org.apache.thrift.annotation.Nullable SpecValueSerial_BYTES spec_bytes; // required
  /**
   * The specifications of Cell-Key for the field
   */
  public @org.apache.thrift.annotation.Nullable SpecValueSerial_KEY spec_key; // required
  /**
   * The specifications of List Int64 for the field
   */
  public @org.apache.thrift.annotation.Nullable SpecValueSerial_LI spec_li; // required
  /**
   * The specifications of List Bytes for the field
   */
  public @org.apache.thrift.annotation.Nullable SpecValueSerial_LB spec_lb; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The Field Id of the Value Field
     */
    FIELD_ID((short)1, "field_id"),
    /**
     * The specifications of Int64 for the field
     */
    SPEC_INT64((short)2, "spec_int64"),
    /**
     * The specifications of Double for the field
     */
    SPEC_DOUBLE((short)3, "spec_double"),
    /**
     * The specifications of Bytes for the field
     */
    SPEC_BYTES((short)4, "spec_bytes"),
    /**
     * The specifications of Cell-Key for the field
     */
    SPEC_KEY((short)5, "spec_key"),
    /**
     * The specifications of List Int64 for the field
     */
    SPEC_LI((short)6, "spec_li"),
    /**
     * The specifications of List Bytes for the field
     */
    SPEC_LB((short)7, "spec_lb");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIELD_ID
          return FIELD_ID;
        case 2: // SPEC_INT64
          return SPEC_INT64;
        case 3: // SPEC_DOUBLE
          return SPEC_DOUBLE;
        case 4: // SPEC_BYTES
          return SPEC_BYTES;
        case 5: // SPEC_KEY
          return SPEC_KEY;
        case 6: // SPEC_LI
          return SPEC_LI;
        case 7: // SPEC_LB
          return SPEC_LB;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FIELD_ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SPEC_INT64,_Fields.SPEC_DOUBLE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIELD_ID, new org.apache.thrift.meta_data.FieldMetaData("field_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPEC_INT64, new org.apache.thrift.meta_data.FieldMetaData("spec_int64", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SpecValueSerial_INT64.class)));
    tmpMap.put(_Fields.SPEC_DOUBLE, new org.apache.thrift.meta_data.FieldMetaData("spec_double", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SpecValueSerial_DOUBLE.class)));
    tmpMap.put(_Fields.SPEC_BYTES, new org.apache.thrift.meta_data.FieldMetaData("spec_bytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SpecValueSerial_BYTES.class)));
    tmpMap.put(_Fields.SPEC_KEY, new org.apache.thrift.meta_data.FieldMetaData("spec_key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SpecValueSerial_KEY.class)));
    tmpMap.put(_Fields.SPEC_LI, new org.apache.thrift.meta_data.FieldMetaData("spec_li", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SpecValueSerial_LI.class)));
    tmpMap.put(_Fields.SPEC_LB, new org.apache.thrift.meta_data.FieldMetaData("spec_lb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SpecValueSerial_LB.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SpecValueSerialField.class, metaDataMap);
  }

  public SpecValueSerialField() {
  }

  public SpecValueSerialField(
    int field_id,
    SpecValueSerial_BYTES spec_bytes,
    SpecValueSerial_KEY spec_key,
    SpecValueSerial_LI spec_li,
    SpecValueSerial_LB spec_lb)
  {
    this();
    this.field_id = field_id;
    setField_idIsSet(true);
    this.spec_bytes = spec_bytes;
    this.spec_key = spec_key;
    this.spec_li = spec_li;
    this.spec_lb = spec_lb;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SpecValueSerialField(SpecValueSerialField other) {
    __isset_bitfield = other.__isset_bitfield;
    this.field_id = other.field_id;
    if (other.isSetSpec_int64()) {
      this.spec_int64 = new SpecValueSerial_INT64(other.spec_int64);
    }
    if (other.isSetSpec_double()) {
      this.spec_double = new SpecValueSerial_DOUBLE(other.spec_double);
    }
    if (other.isSetSpec_bytes()) {
      this.spec_bytes = new SpecValueSerial_BYTES(other.spec_bytes);
    }
    if (other.isSetSpec_key()) {
      this.spec_key = new SpecValueSerial_KEY(other.spec_key);
    }
    if (other.isSetSpec_li()) {
      this.spec_li = new SpecValueSerial_LI(other.spec_li);
    }
    if (other.isSetSpec_lb()) {
      this.spec_lb = new SpecValueSerial_LB(other.spec_lb);
    }
  }

  @Override
  public SpecValueSerialField deepCopy() {
    return new SpecValueSerialField(this);
  }

  @Override
  public void clear() {
    setField_idIsSet(false);
    this.field_id = 0;
    this.spec_int64 = null;
    this.spec_double = null;
    this.spec_bytes = null;
    this.spec_key = null;
    this.spec_li = null;
    this.spec_lb = null;
  }

  /**
   * The Field Id of the Value Field
   */
  public int getField_id() {
    return this.field_id;
  }

  /**
   * The Field Id of the Value Field
   */
  public SpecValueSerialField setField_id(int field_id) {
    this.field_id = field_id;
    setField_idIsSet(true);
    return this;
  }

  public void unsetField_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FIELD_ID_ISSET_ID);
  }

  /** Returns true if field field_id is set (has been assigned a value) and false otherwise */
  public boolean isSetField_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FIELD_ID_ISSET_ID);
  }

  public void setField_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FIELD_ID_ISSET_ID, value);
  }

  /**
   * The specifications of Int64 for the field
   */
  @org.apache.thrift.annotation.Nullable
  public SpecValueSerial_INT64 getSpec_int64() {
    return this.spec_int64;
  }

  /**
   * The specifications of Int64 for the field
   */
  public SpecValueSerialField setSpec_int64(@org.apache.thrift.annotation.Nullable SpecValueSerial_INT64 spec_int64) {
    this.spec_int64 = spec_int64;
    return this;
  }

  public void unsetSpec_int64() {
    this.spec_int64 = null;
  }

  /** Returns true if field spec_int64 is set (has been assigned a value) and false otherwise */
  public boolean isSetSpec_int64() {
    return this.spec_int64 != null;
  }

  public void setSpec_int64IsSet(boolean value) {
    if (!value) {
      this.spec_int64 = null;
    }
  }

  /**
   * The specifications of Double for the field
   */
  @org.apache.thrift.annotation.Nullable
  public SpecValueSerial_DOUBLE getSpec_double() {
    return this.spec_double;
  }

  /**
   * The specifications of Double for the field
   */
  public SpecValueSerialField setSpec_double(@org.apache.thrift.annotation.Nullable SpecValueSerial_DOUBLE spec_double) {
    this.spec_double = spec_double;
    return this;
  }

  public void unsetSpec_double() {
    this.spec_double = null;
  }

  /** Returns true if field spec_double is set (has been assigned a value) and false otherwise */
  public boolean isSetSpec_double() {
    return this.spec_double != null;
  }

  public void setSpec_doubleIsSet(boolean value) {
    if (!value) {
      this.spec_double = null;
    }
  }

  /**
   * The specifications of Bytes for the field
   */
  @org.apache.thrift.annotation.Nullable
  public SpecValueSerial_BYTES getSpec_bytes() {
    return this.spec_bytes;
  }

  /**
   * The specifications of Bytes for the field
   */
  public SpecValueSerialField setSpec_bytes(@org.apache.thrift.annotation.Nullable SpecValueSerial_BYTES spec_bytes) {
    this.spec_bytes = spec_bytes;
    return this;
  }

  public void unsetSpec_bytes() {
    this.spec_bytes = null;
  }

  /** Returns true if field spec_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetSpec_bytes() {
    return this.spec_bytes != null;
  }

  public void setSpec_bytesIsSet(boolean value) {
    if (!value) {
      this.spec_bytes = null;
    }
  }

  /**
   * The specifications of Cell-Key for the field
   */
  @org.apache.thrift.annotation.Nullable
  public SpecValueSerial_KEY getSpec_key() {
    return this.spec_key;
  }

  /**
   * The specifications of Cell-Key for the field
   */
  public SpecValueSerialField setSpec_key(@org.apache.thrift.annotation.Nullable SpecValueSerial_KEY spec_key) {
    this.spec_key = spec_key;
    return this;
  }

  public void unsetSpec_key() {
    this.spec_key = null;
  }

  /** Returns true if field spec_key is set (has been assigned a value) and false otherwise */
  public boolean isSetSpec_key() {
    return this.spec_key != null;
  }

  public void setSpec_keyIsSet(boolean value) {
    if (!value) {
      this.spec_key = null;
    }
  }

  /**
   * The specifications of List Int64 for the field
   */
  @org.apache.thrift.annotation.Nullable
  public SpecValueSerial_LI getSpec_li() {
    return this.spec_li;
  }

  /**
   * The specifications of List Int64 for the field
   */
  public SpecValueSerialField setSpec_li(@org.apache.thrift.annotation.Nullable SpecValueSerial_LI spec_li) {
    this.spec_li = spec_li;
    return this;
  }

  public void unsetSpec_li() {
    this.spec_li = null;
  }

  /** Returns true if field spec_li is set (has been assigned a value) and false otherwise */
  public boolean isSetSpec_li() {
    return this.spec_li != null;
  }

  public void setSpec_liIsSet(boolean value) {
    if (!value) {
      this.spec_li = null;
    }
  }

  /**
   * The specifications of List Bytes for the field
   */
  @org.apache.thrift.annotation.Nullable
  public SpecValueSerial_LB getSpec_lb() {
    return this.spec_lb;
  }

  /**
   * The specifications of List Bytes for the field
   */
  public SpecValueSerialField setSpec_lb(@org.apache.thrift.annotation.Nullable SpecValueSerial_LB spec_lb) {
    this.spec_lb = spec_lb;
    return this;
  }

  public void unsetSpec_lb() {
    this.spec_lb = null;
  }

  /** Returns true if field spec_lb is set (has been assigned a value) and false otherwise */
  public boolean isSetSpec_lb() {
    return this.spec_lb != null;
  }

  public void setSpec_lbIsSet(boolean value) {
    if (!value) {
      this.spec_lb = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case FIELD_ID:
      if (value == null) {
        unsetField_id();
      } else {
        setField_id((java.lang.Integer)value);
      }
      break;

    case SPEC_INT64:
      if (value == null) {
        unsetSpec_int64();
      } else {
        setSpec_int64((SpecValueSerial_INT64)value);
      }
      break;

    case SPEC_DOUBLE:
      if (value == null) {
        unsetSpec_double();
      } else {
        setSpec_double((SpecValueSerial_DOUBLE)value);
      }
      break;

    case SPEC_BYTES:
      if (value == null) {
        unsetSpec_bytes();
      } else {
        setSpec_bytes((SpecValueSerial_BYTES)value);
      }
      break;

    case SPEC_KEY:
      if (value == null) {
        unsetSpec_key();
      } else {
        setSpec_key((SpecValueSerial_KEY)value);
      }
      break;

    case SPEC_LI:
      if (value == null) {
        unsetSpec_li();
      } else {
        setSpec_li((SpecValueSerial_LI)value);
      }
      break;

    case SPEC_LB:
      if (value == null) {
        unsetSpec_lb();
      } else {
        setSpec_lb((SpecValueSerial_LB)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FIELD_ID:
      return getField_id();

    case SPEC_INT64:
      return getSpec_int64();

    case SPEC_DOUBLE:
      return getSpec_double();

    case SPEC_BYTES:
      return getSpec_bytes();

    case SPEC_KEY:
      return getSpec_key();

    case SPEC_LI:
      return getSpec_li();

    case SPEC_LB:
      return getSpec_lb();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FIELD_ID:
      return isSetField_id();
    case SPEC_INT64:
      return isSetSpec_int64();
    case SPEC_DOUBLE:
      return isSetSpec_double();
    case SPEC_BYTES:
      return isSetSpec_bytes();
    case SPEC_KEY:
      return isSetSpec_key();
    case SPEC_LI:
      return isSetSpec_li();
    case SPEC_LB:
      return isSetSpec_lb();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof SpecValueSerialField)
      return this.equals((SpecValueSerialField)that);
    return false;
  }

  public boolean equals(SpecValueSerialField that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_field_id = true;
    boolean that_present_field_id = true;
    if (this_present_field_id || that_present_field_id) {
      if (!(this_present_field_id && that_present_field_id))
        return false;
      if (this.field_id != that.field_id)
        return false;
    }

    boolean this_present_spec_int64 = true && this.isSetSpec_int64();
    boolean that_present_spec_int64 = true && that.isSetSpec_int64();
    if (this_present_spec_int64 || that_present_spec_int64) {
      if (!(this_present_spec_int64 && that_present_spec_int64))
        return false;
      if (!this.spec_int64.equals(that.spec_int64))
        return false;
    }

    boolean this_present_spec_double = true && this.isSetSpec_double();
    boolean that_present_spec_double = true && that.isSetSpec_double();
    if (this_present_spec_double || that_present_spec_double) {
      if (!(this_present_spec_double && that_present_spec_double))
        return false;
      if (!this.spec_double.equals(that.spec_double))
        return false;
    }

    boolean this_present_spec_bytes = true && this.isSetSpec_bytes();
    boolean that_present_spec_bytes = true && that.isSetSpec_bytes();
    if (this_present_spec_bytes || that_present_spec_bytes) {
      if (!(this_present_spec_bytes && that_present_spec_bytes))
        return false;
      if (!this.spec_bytes.equals(that.spec_bytes))
        return false;
    }

    boolean this_present_spec_key = true && this.isSetSpec_key();
    boolean that_present_spec_key = true && that.isSetSpec_key();
    if (this_present_spec_key || that_present_spec_key) {
      if (!(this_present_spec_key && that_present_spec_key))
        return false;
      if (!this.spec_key.equals(that.spec_key))
        return false;
    }

    boolean this_present_spec_li = true && this.isSetSpec_li();
    boolean that_present_spec_li = true && that.isSetSpec_li();
    if (this_present_spec_li || that_present_spec_li) {
      if (!(this_present_spec_li && that_present_spec_li))
        return false;
      if (!this.spec_li.equals(that.spec_li))
        return false;
    }

    boolean this_present_spec_lb = true && this.isSetSpec_lb();
    boolean that_present_spec_lb = true && that.isSetSpec_lb();
    if (this_present_spec_lb || that_present_spec_lb) {
      if (!(this_present_spec_lb && that_present_spec_lb))
        return false;
      if (!this.spec_lb.equals(that.spec_lb))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + field_id;

    hashCode = hashCode * 8191 + ((isSetSpec_int64()) ? 131071 : 524287);
    if (isSetSpec_int64())
      hashCode = hashCode * 8191 + spec_int64.hashCode();

    hashCode = hashCode * 8191 + ((isSetSpec_double()) ? 131071 : 524287);
    if (isSetSpec_double())
      hashCode = hashCode * 8191 + spec_double.hashCode();

    hashCode = hashCode * 8191 + ((isSetSpec_bytes()) ? 131071 : 524287);
    if (isSetSpec_bytes())
      hashCode = hashCode * 8191 + spec_bytes.hashCode();

    hashCode = hashCode * 8191 + ((isSetSpec_key()) ? 131071 : 524287);
    if (isSetSpec_key())
      hashCode = hashCode * 8191 + spec_key.hashCode();

    hashCode = hashCode * 8191 + ((isSetSpec_li()) ? 131071 : 524287);
    if (isSetSpec_li())
      hashCode = hashCode * 8191 + spec_li.hashCode();

    hashCode = hashCode * 8191 + ((isSetSpec_lb()) ? 131071 : 524287);
    if (isSetSpec_lb())
      hashCode = hashCode * 8191 + spec_lb.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SpecValueSerialField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetField_id(), other.isSetField_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field_id, other.field_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpec_int64(), other.isSetSpec_int64());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpec_int64()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spec_int64, other.spec_int64);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpec_double(), other.isSetSpec_double());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpec_double()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spec_double, other.spec_double);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpec_bytes(), other.isSetSpec_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpec_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spec_bytes, other.spec_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpec_key(), other.isSetSpec_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpec_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spec_key, other.spec_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpec_li(), other.isSetSpec_li());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpec_li()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spec_li, other.spec_li);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpec_lb(), other.isSetSpec_lb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpec_lb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spec_lb, other.spec_lb);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SpecValueSerialField(");
    boolean first = true;

    sb.append("field_id:");
    sb.append(this.field_id);
    first = false;
    if (isSetSpec_int64()) {
      if (!first) sb.append(", ");
      sb.append("spec_int64:");
      if (this.spec_int64 == null) {
        sb.append("null");
      } else {
        sb.append(this.spec_int64);
      }
      first = false;
    }
    if (isSetSpec_double()) {
      if (!first) sb.append(", ");
      sb.append("spec_double:");
      if (this.spec_double == null) {
        sb.append("null");
      } else {
        sb.append(this.spec_double);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("spec_bytes:");
    if (this.spec_bytes == null) {
      sb.append("null");
    } else {
      sb.append(this.spec_bytes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("spec_key:");
    if (this.spec_key == null) {
      sb.append("null");
    } else {
      sb.append(this.spec_key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("spec_li:");
    if (this.spec_li == null) {
      sb.append("null");
    } else {
      sb.append(this.spec_li);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("spec_lb:");
    if (this.spec_lb == null) {
      sb.append("null");
    } else {
      sb.append(this.spec_lb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (spec_int64 != null) {
      spec_int64.validate();
    }
    if (spec_double != null) {
      spec_double.validate();
    }
    if (spec_bytes != null) {
      spec_bytes.validate();
    }
    if (spec_key != null) {
      spec_key.validate();
    }
    if (spec_li != null) {
      spec_li.validate();
    }
    if (spec_lb != null) {
      spec_lb.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SpecValueSerialFieldStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SpecValueSerialFieldStandardScheme getScheme() {
      return new SpecValueSerialFieldStandardScheme();
    }
  }

  private static class SpecValueSerialFieldStandardScheme extends org.apache.thrift.scheme.StandardScheme<SpecValueSerialField> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, SpecValueSerialField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIELD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.field_id = iprot.readI32();
              struct.setField_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SPEC_INT64
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.spec_int64 = new SpecValueSerial_INT64();
              struct.spec_int64.read(iprot);
              struct.setSpec_int64IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SPEC_DOUBLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.spec_double = new SpecValueSerial_DOUBLE();
              struct.spec_double.read(iprot);
              struct.setSpec_doubleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SPEC_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.spec_bytes = new SpecValueSerial_BYTES();
              struct.spec_bytes.read(iprot);
              struct.setSpec_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SPEC_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.spec_key = new SpecValueSerial_KEY();
              struct.spec_key.read(iprot);
              struct.setSpec_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SPEC_LI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.spec_li = new SpecValueSerial_LI();
              struct.spec_li.read(iprot);
              struct.setSpec_liIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SPEC_LB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.spec_lb = new SpecValueSerial_LB();
              struct.spec_lb.read(iprot);
              struct.setSpec_lbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, SpecValueSerialField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FIELD_ID_FIELD_DESC);
      oprot.writeI32(struct.field_id);
      oprot.writeFieldEnd();
      if (struct.spec_int64 != null) {
        if (struct.isSetSpec_int64()) {
          oprot.writeFieldBegin(SPEC_INT64_FIELD_DESC);
          struct.spec_int64.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.spec_double != null) {
        if (struct.isSetSpec_double()) {
          oprot.writeFieldBegin(SPEC_DOUBLE_FIELD_DESC);
          struct.spec_double.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.spec_bytes != null) {
        oprot.writeFieldBegin(SPEC_BYTES_FIELD_DESC);
        struct.spec_bytes.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.spec_key != null) {
        oprot.writeFieldBegin(SPEC_KEY_FIELD_DESC);
        struct.spec_key.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.spec_li != null) {
        oprot.writeFieldBegin(SPEC_LI_FIELD_DESC);
        struct.spec_li.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.spec_lb != null) {
        oprot.writeFieldBegin(SPEC_LB_FIELD_DESC);
        struct.spec_lb.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SpecValueSerialFieldTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SpecValueSerialFieldTupleScheme getScheme() {
      return new SpecValueSerialFieldTupleScheme();
    }
  }

  private static class SpecValueSerialFieldTupleScheme extends org.apache.thrift.scheme.TupleScheme<SpecValueSerialField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SpecValueSerialField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetField_id()) {
        optionals.set(0);
      }
      if (struct.isSetSpec_int64()) {
        optionals.set(1);
      }
      if (struct.isSetSpec_double()) {
        optionals.set(2);
      }
      if (struct.isSetSpec_bytes()) {
        optionals.set(3);
      }
      if (struct.isSetSpec_key()) {
        optionals.set(4);
      }
      if (struct.isSetSpec_li()) {
        optionals.set(5);
      }
      if (struct.isSetSpec_lb()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetField_id()) {
        oprot.writeI32(struct.field_id);
      }
      if (struct.isSetSpec_int64()) {
        struct.spec_int64.write(oprot);
      }
      if (struct.isSetSpec_double()) {
        struct.spec_double.write(oprot);
      }
      if (struct.isSetSpec_bytes()) {
        struct.spec_bytes.write(oprot);
      }
      if (struct.isSetSpec_key()) {
        struct.spec_key.write(oprot);
      }
      if (struct.isSetSpec_li()) {
        struct.spec_li.write(oprot);
      }
      if (struct.isSetSpec_lb()) {
        struct.spec_lb.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SpecValueSerialField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.field_id = iprot.readI32();
        struct.setField_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.spec_int64 = new SpecValueSerial_INT64();
        struct.spec_int64.read(iprot);
        struct.setSpec_int64IsSet(true);
      }
      if (incoming.get(2)) {
        struct.spec_double = new SpecValueSerial_DOUBLE();
        struct.spec_double.read(iprot);
        struct.setSpec_doubleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.spec_bytes = new SpecValueSerial_BYTES();
        struct.spec_bytes.read(iprot);
        struct.setSpec_bytesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.spec_key = new SpecValueSerial_KEY();
        struct.spec_key.read(iprot);
        struct.setSpec_keyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.spec_li = new SpecValueSerial_LI();
        struct.spec_li.read(iprot);
        struct.setSpec_liIsSet(true);
      }
      if (incoming.get(6)) {
        struct.spec_lb = new SpecValueSerial_LB();
        struct.spec_lb.read(iprot);
        struct.setSpec_lbIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

