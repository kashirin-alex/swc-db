/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.swcdb.thrift.gen;

/**
 * A Grouped Cells result for results of scan, determined by the request's CellsResult enum
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class CellsGroup implements org.apache.thrift.TBase<CellsGroup, CellsGroup._Fields>, java.io.Serializable, Cloneable, Comparable<CellsGroup> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CellsGroup");

  private static final org.apache.thrift.protocol.TField CELLS_FIELD_DESC = new org.apache.thrift.protocol.TField("cells", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CCELLS_FIELD_DESC = new org.apache.thrift.protocol.TField("ccells", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField KCELLS_FIELD_DESC = new org.apache.thrift.protocol.TField("kcells", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField FCELLS_FIELD_DESC = new org.apache.thrift.protocol.TField("fcells", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CellsGroupStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CellsGroupTupleSchemeFactory();

  /**
   * The Cells in a list, defined as Cell items in a list-container
   */
  public @org.apache.thrift.annotation.Nullable Cells cells; // required
  /**
   * The Columns Cells in a map-container, defined as cCells items by Column Name
   */
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,cCells> ccells; // required
  /**
   * The Keys Cells in a list, defined as kCells items in a list-container
   */
  public @org.apache.thrift.annotation.Nullable java.util.List<kCells> kcells; // required
  /**
   * The Fraction Cells in struct FCells
   */
  public @org.apache.thrift.annotation.Nullable FCells fcells; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The Cells in a list, defined as Cell items in a list-container
     */
    CELLS((short)1, "cells"),
    /**
     * The Columns Cells in a map-container, defined as cCells items by Column Name
     */
    CCELLS((short)2, "ccells"),
    /**
     * The Keys Cells in a list, defined as kCells items in a list-container
     */
    KCELLS((short)3, "kcells"),
    /**
     * The Fraction Cells in struct FCells
     */
    FCELLS((short)4, "fcells");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CELLS
          return CELLS;
        case 2: // CCELLS
          return CCELLS;
        case 3: // KCELLS
          return KCELLS;
        case 4: // FCELLS
          return FCELLS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CELLS, new org.apache.thrift.meta_data.FieldMetaData("cells", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Cells.class)));
    tmpMap.put(_Fields.CCELLS, new org.apache.thrift.meta_data.FieldMetaData("ccells", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.MAP        , "CCells")));
    tmpMap.put(_Fields.KCELLS, new org.apache.thrift.meta_data.FieldMetaData("kcells", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "KCells")));
    tmpMap.put(_Fields.FCELLS, new org.apache.thrift.meta_data.FieldMetaData("fcells", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FCells.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CellsGroup.class, metaDataMap);
  }

  public CellsGroup() {
  }

  public CellsGroup(
    Cells cells,
    java.util.Map<java.lang.String,cCells> ccells,
    java.util.List<kCells> kcells,
    FCells fcells)
  {
    this();
    this.cells = cells;
    this.ccells = ccells;
    this.kcells = kcells;
    this.fcells = fcells;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CellsGroup(CellsGroup other) {
    if (other.isSetCells()) {
      this.cells = new Cells(other.cells);
    }
    if (other.isSetCcells()) {
      java.util.Map<java.lang.String,cCells> __this__ccells = new java.util.HashMap<java.lang.String,cCells>(other.ccells.size());
      for (java.util.Map.Entry<java.lang.String, cCells> other_element : other.ccells.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        cCells other_element_value = other_element.getValue();

        java.lang.String __this__ccells_copy_key = other_element_key;

        cCells __this__ccells_copy_value = new cCells(other_element_value);

        __this__ccells.put(__this__ccells_copy_key, __this__ccells_copy_value);
      }
      this.ccells = __this__ccells;
    }
    if (other.isSetKcells()) {
      java.util.List<kCells> __this__kcells = new java.util.ArrayList<kCells>(other.kcells.size());
      for (kCells other_element : other.kcells) {
        __this__kcells.add(new kCells(other_element));
      }
      this.kcells = __this__kcells;
    }
    if (other.isSetFcells()) {
      this.fcells = new FCells(other.fcells);
    }
  }

  @Override
  public CellsGroup deepCopy() {
    return new CellsGroup(this);
  }

  @Override
  public void clear() {
    this.cells = null;
    this.ccells = null;
    this.kcells = null;
    this.fcells = null;
  }

  /**
   * The Cells in a list, defined as Cell items in a list-container
   */
  @org.apache.thrift.annotation.Nullable
  public Cells getCells() {
    return this.cells;
  }

  /**
   * The Cells in a list, defined as Cell items in a list-container
   */
  public CellsGroup setCells(@org.apache.thrift.annotation.Nullable Cells cells) {
    this.cells = cells;
    return this;
  }

  public void unsetCells() {
    this.cells = null;
  }

  /** Returns true if field cells is set (has been assigned a value) and false otherwise */
  public boolean isSetCells() {
    return this.cells != null;
  }

  public void setCellsIsSet(boolean value) {
    if (!value) {
      this.cells = null;
    }
  }

  public int getCcellsSize() {
    return (this.ccells == null) ? 0 : this.ccells.size();
  }

  public void putToCcells(java.lang.String key, cCells val) {
    if (this.ccells == null) {
      this.ccells = new java.util.HashMap<java.lang.String,cCells>();
    }
    this.ccells.put(key, val);
  }

  /**
   * The Columns Cells in a map-container, defined as cCells items by Column Name
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,cCells> getCcells() {
    return this.ccells;
  }

  /**
   * The Columns Cells in a map-container, defined as cCells items by Column Name
   */
  public CellsGroup setCcells(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,cCells> ccells) {
    this.ccells = ccells;
    return this;
  }

  public void unsetCcells() {
    this.ccells = null;
  }

  /** Returns true if field ccells is set (has been assigned a value) and false otherwise */
  public boolean isSetCcells() {
    return this.ccells != null;
  }

  public void setCcellsIsSet(boolean value) {
    if (!value) {
      this.ccells = null;
    }
  }

  public int getKcellsSize() {
    return (this.kcells == null) ? 0 : this.kcells.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<kCells> getKcellsIterator() {
    return (this.kcells == null) ? null : this.kcells.iterator();
  }

  public void addToKcells(kCells elem) {
    if (this.kcells == null) {
      this.kcells = new java.util.ArrayList<kCells>();
    }
    this.kcells.add(elem);
  }

  /**
   * The Keys Cells in a list, defined as kCells items in a list-container
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.List<kCells> getKcells() {
    return this.kcells;
  }

  /**
   * The Keys Cells in a list, defined as kCells items in a list-container
   */
  public CellsGroup setKcells(@org.apache.thrift.annotation.Nullable java.util.List<kCells> kcells) {
    this.kcells = kcells;
    return this;
  }

  public void unsetKcells() {
    this.kcells = null;
  }

  /** Returns true if field kcells is set (has been assigned a value) and false otherwise */
  public boolean isSetKcells() {
    return this.kcells != null;
  }

  public void setKcellsIsSet(boolean value) {
    if (!value) {
      this.kcells = null;
    }
  }

  /**
   * The Fraction Cells in struct FCells
   */
  @org.apache.thrift.annotation.Nullable
  public FCells getFcells() {
    return this.fcells;
  }

  /**
   * The Fraction Cells in struct FCells
   */
  public CellsGroup setFcells(@org.apache.thrift.annotation.Nullable FCells fcells) {
    this.fcells = fcells;
    return this;
  }

  public void unsetFcells() {
    this.fcells = null;
  }

  /** Returns true if field fcells is set (has been assigned a value) and false otherwise */
  public boolean isSetFcells() {
    return this.fcells != null;
  }

  public void setFcellsIsSet(boolean value) {
    if (!value) {
      this.fcells = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CELLS:
      if (value == null) {
        unsetCells();
      } else {
        setCells((Cells)value);
      }
      break;

    case CCELLS:
      if (value == null) {
        unsetCcells();
      } else {
        setCcells((java.util.Map<java.lang.String,cCells>)value);
      }
      break;

    case KCELLS:
      if (value == null) {
        unsetKcells();
      } else {
        setKcells((java.util.List<kCells>)value);
      }
      break;

    case FCELLS:
      if (value == null) {
        unsetFcells();
      } else {
        setFcells((FCells)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CELLS:
      return getCells();

    case CCELLS:
      return getCcells();

    case KCELLS:
      return getKcells();

    case FCELLS:
      return getFcells();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CELLS:
      return isSetCells();
    case CCELLS:
      return isSetCcells();
    case KCELLS:
      return isSetKcells();
    case FCELLS:
      return isSetFcells();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof CellsGroup)
      return this.equals((CellsGroup)that);
    return false;
  }

  public boolean equals(CellsGroup that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_cells = true && this.isSetCells();
    boolean that_present_cells = true && that.isSetCells();
    if (this_present_cells || that_present_cells) {
      if (!(this_present_cells && that_present_cells))
        return false;
      if (!this.cells.equals(that.cells))
        return false;
    }

    boolean this_present_ccells = true && this.isSetCcells();
    boolean that_present_ccells = true && that.isSetCcells();
    if (this_present_ccells || that_present_ccells) {
      if (!(this_present_ccells && that_present_ccells))
        return false;
      if (!this.ccells.equals(that.ccells))
        return false;
    }

    boolean this_present_kcells = true && this.isSetKcells();
    boolean that_present_kcells = true && that.isSetKcells();
    if (this_present_kcells || that_present_kcells) {
      if (!(this_present_kcells && that_present_kcells))
        return false;
      if (!this.kcells.equals(that.kcells))
        return false;
    }

    boolean this_present_fcells = true && this.isSetFcells();
    boolean that_present_fcells = true && that.isSetFcells();
    if (this_present_fcells || that_present_fcells) {
      if (!(this_present_fcells && that_present_fcells))
        return false;
      if (!this.fcells.equals(that.fcells))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCells()) ? 131071 : 524287);
    if (isSetCells())
      hashCode = hashCode * 8191 + cells.hashCode();

    hashCode = hashCode * 8191 + ((isSetCcells()) ? 131071 : 524287);
    if (isSetCcells())
      hashCode = hashCode * 8191 + ccells.hashCode();

    hashCode = hashCode * 8191 + ((isSetKcells()) ? 131071 : 524287);
    if (isSetKcells())
      hashCode = hashCode * 8191 + kcells.hashCode();

    hashCode = hashCode * 8191 + ((isSetFcells()) ? 131071 : 524287);
    if (isSetFcells())
      hashCode = hashCode * 8191 + fcells.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(CellsGroup other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetCells(), other.isSetCells());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCells()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cells, other.cells);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCcells(), other.isSetCcells());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCcells()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ccells, other.ccells);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKcells(), other.isSetKcells());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKcells()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kcells, other.kcells);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFcells(), other.isSetFcells());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFcells()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fcells, other.fcells);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CellsGroup(");
    boolean first = true;

    sb.append("cells:");
    if (this.cells == null) {
      sb.append("null");
    } else {
      sb.append(this.cells);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ccells:");
    if (this.ccells == null) {
      sb.append("null");
    } else {
      sb.append(this.ccells);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("kcells:");
    if (this.kcells == null) {
      sb.append("null");
    } else {
      sb.append(this.kcells);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fcells:");
    if (this.fcells == null) {
      sb.append("null");
    } else {
      sb.append(this.fcells);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cells != null) {
      cells.validate();
    }
    if (fcells != null) {
      fcells.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CellsGroupStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public CellsGroupStandardScheme getScheme() {
      return new CellsGroupStandardScheme();
    }
  }

  private static class CellsGroupStandardScheme extends org.apache.thrift.scheme.StandardScheme<CellsGroup> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, CellsGroup struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CELLS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cells = new Cells();
              struct.cells.read(iprot);
              struct.setCellsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CCELLS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map546 = iprot.readMapBegin();
                struct.ccells = new java.util.HashMap<java.lang.String,cCells>(2*_map546.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key547;
                @org.apache.thrift.annotation.Nullable cCells _val548;
                for (int _i549 = 0; _i549 < _map546.size; ++_i549)
                {
                  _key547 = iprot.readString();
                  _val548 = new cCells();
                  _val548.read(iprot);
                  struct.ccells.put(_key547, _val548);
                }
                iprot.readMapEnd();
              }
              struct.setCcellsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // KCELLS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list550 = iprot.readListBegin();
                struct.kcells = new java.util.ArrayList<kCells>(_list550.size);
                @org.apache.thrift.annotation.Nullable kCells _elem551;
                for (int _i552 = 0; _i552 < _list550.size; ++_i552)
                {
                  _elem551 = new kCells();
                  _elem551.read(iprot);
                  struct.kcells.add(_elem551);
                }
                iprot.readListEnd();
              }
              struct.setKcellsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FCELLS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fcells = new FCells();
              struct.fcells.read(iprot);
              struct.setFcellsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, CellsGroup struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cells != null) {
        oprot.writeFieldBegin(CELLS_FIELD_DESC);
        struct.cells.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.ccells != null) {
        oprot.writeFieldBegin(CCELLS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.ccells.size()));
          for (java.util.Map.Entry<java.lang.String, cCells> _iter553 : struct.ccells.entrySet())
          {
            oprot.writeString(_iter553.getKey());
            _iter553.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.kcells != null) {
        oprot.writeFieldBegin(KCELLS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.kcells.size()));
          for (kCells _iter554 : struct.kcells)
          {
            _iter554.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.fcells != null) {
        oprot.writeFieldBegin(FCELLS_FIELD_DESC);
        struct.fcells.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CellsGroupTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public CellsGroupTupleScheme getScheme() {
      return new CellsGroupTupleScheme();
    }
  }

  private static class CellsGroupTupleScheme extends org.apache.thrift.scheme.TupleScheme<CellsGroup> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CellsGroup struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCells()) {
        optionals.set(0);
      }
      if (struct.isSetCcells()) {
        optionals.set(1);
      }
      if (struct.isSetKcells()) {
        optionals.set(2);
      }
      if (struct.isSetFcells()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCells()) {
        struct.cells.write(oprot);
      }
      if (struct.isSetCcells()) {
        {
          oprot.writeI32(struct.ccells.size());
          for (java.util.Map.Entry<java.lang.String, cCells> _iter555 : struct.ccells.entrySet())
          {
            oprot.writeString(_iter555.getKey());
            _iter555.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetKcells()) {
        {
          oprot.writeI32(struct.kcells.size());
          for (kCells _iter556 : struct.kcells)
          {
            _iter556.write(oprot);
          }
        }
      }
      if (struct.isSetFcells()) {
        struct.fcells.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CellsGroup struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.cells = new Cells();
        struct.cells.read(iprot);
        struct.setCellsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map557 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT); 
          struct.ccells = new java.util.HashMap<java.lang.String,cCells>(2*_map557.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key558;
          @org.apache.thrift.annotation.Nullable cCells _val559;
          for (int _i560 = 0; _i560 < _map557.size; ++_i560)
          {
            _key558 = iprot.readString();
            _val559 = new cCells();
            _val559.read(iprot);
            struct.ccells.put(_key558, _val559);
          }
        }
        struct.setCcellsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list561 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.kcells = new java.util.ArrayList<kCells>(_list561.size);
          @org.apache.thrift.annotation.Nullable kCells _elem562;
          for (int _i563 = 0; _i563 < _list561.size; ++_i563)
          {
            _elem562 = new kCells();
            _elem562.read(iprot);
            struct.kcells.add(_elem562);
          }
        }
        struct.setKcellsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fcells = new FCells();
        struct.fcells.read(iprot);
        struct.setFcellsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

