/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Broker_H
#define Broker_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "Broker_types.h"
#include "Service.h"

namespace SWC { namespace Thrift {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class BrokerIf : virtual public  ::SWC::Thrift::ServiceIf {
 public:
  virtual ~BrokerIf() {}
};

class BrokerIfFactory : virtual public  ::SWC::Thrift::ServiceIfFactory {
 public:
  typedef BrokerIf Handler;

  virtual ~BrokerIfFactory() {}

  virtual BrokerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) override = 0;
  virtual void releaseHandler( ::SWC::Thrift::ServiceIf* /* handler */) override = 0;
  };

class BrokerIfSingletonFactory : virtual public BrokerIfFactory {
 public:
  BrokerIfSingletonFactory(const ::std::shared_ptr<BrokerIf>& iface) : iface_(iface) {}
  virtual ~BrokerIfSingletonFactory() {}

  virtual BrokerIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler( ::SWC::Thrift::ServiceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<BrokerIf> iface_;
};

class BrokerNull : virtual public BrokerIf , virtual public  ::SWC::Thrift::ServiceNull {
 public:
  virtual ~BrokerNull() {}
};

class BrokerClient : virtual public BrokerIf, public  ::SWC::Thrift::ServiceClient {
 public:
  BrokerClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::SWC::Thrift::ServiceClient(prot, prot) {}
  BrokerClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::SWC::Thrift::ServiceClient(iprot, oprot) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
};

class BrokerProcessor : public  ::SWC::Thrift::ServiceProcessor {
 protected:
  ::std::shared_ptr<BrokerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (BrokerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
 public:
  BrokerProcessor(::std::shared_ptr<BrokerIf> iface) :
     ::SWC::Thrift::ServiceProcessor(iface),
    iface_(iface) {
  }

  virtual ~BrokerProcessor() {}
};

class BrokerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  BrokerProcessorFactory(const ::std::shared_ptr< BrokerIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< BrokerIfFactory > handlerFactory_;
};

class BrokerMultiface : virtual public BrokerIf, public  ::SWC::Thrift::ServiceMultiface {
 public:
  BrokerMultiface(std::vector<std::shared_ptr<BrokerIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<std::shared_ptr<BrokerIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::SWC::Thrift::ServiceMultiface::add(*iter);
    }
  }
  virtual ~BrokerMultiface() {}
 protected:
  std::vector<std::shared_ptr<BrokerIf> > ifaces_;
  BrokerMultiface() {}
  void add(::std::shared_ptr<BrokerIf> iface) {
     ::SWC::Thrift::ServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class BrokerConcurrentClient : virtual public BrokerIf, public  ::SWC::Thrift::ServiceConcurrentClient {
 public:
  BrokerConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) :
     ::SWC::Thrift::ServiceConcurrentClient(prot, prot, sync) {}
  BrokerConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) :     ::SWC::Thrift::ServiceConcurrentClient(iprot, oprot, sync) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
