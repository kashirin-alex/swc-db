/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.18.1)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


/// <summary>
/// The Column Cells for results on Columns of scan
/// </summary>
public partial class cCells : TBase
{
  private List<CCellPlain> _plain_cells;
  private List<CCellCounter> _counter_cells;
  private List<CCellSerial> _serial_cells;

  /// <summary>
  /// The Plain type Cells, defined as CCellPlain items in a list-container
  /// </summary>
  public List<CCellPlain> Plain_cells
  {
    get
    {
      return _plain_cells;
    }
    set
    {
      __isset.plain_cells = true;
      this._plain_cells = value;
    }
  }

  /// <summary>
  /// The Counter type Cells, defined as CCellCounter items in a list-container
  /// </summary>
  public List<CCellCounter> Counter_cells
  {
    get
    {
      return _counter_cells;
    }
    set
    {
      __isset.counter_cells = true;
      this._counter_cells = value;
    }
  }

  /// <summary>
  /// The Serial type Cells, defined as CCellSerial items in a list-container
  /// </summary>
  public List<CCellSerial> Serial_cells
  {
    get
    {
      return _serial_cells;
    }
    set
    {
      __isset.serial_cells = true;
      this._serial_cells = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool plain_cells;
    public bool counter_cells;
    public bool serial_cells;
  }

  public cCells()
  {
  }

  public cCells DeepCopy()
  {
    var tmp460 = new cCells();
    if((Plain_cells != null) && __isset.plain_cells)
    {
      tmp460.Plain_cells = this.Plain_cells.DeepCopy();
    }
    tmp460.__isset.plain_cells = this.__isset.plain_cells;
    if((Counter_cells != null) && __isset.counter_cells)
    {
      tmp460.Counter_cells = this.Counter_cells.DeepCopy();
    }
    tmp460.__isset.counter_cells = this.__isset.counter_cells;
    if((Serial_cells != null) && __isset.serial_cells)
    {
      tmp460.Serial_cells = this.Serial_cells.DeepCopy();
    }
    tmp460.__isset.serial_cells = this.__isset.serial_cells;
    return tmp460;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List)
            {
              {
                var _list461 = await iprot.ReadListBeginAsync(cancellationToken);
                Plain_cells = new List<CCellPlain>(_list461.Count);
                for(int _i462 = 0; _i462 < _list461.Count; ++_i462)
                {
                  CCellPlain _elem463;
                  _elem463 = new CCellPlain();
                  await _elem463.ReadAsync(iprot, cancellationToken);
                  Plain_cells.Add(_elem463);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.List)
            {
              {
                var _list464 = await iprot.ReadListBeginAsync(cancellationToken);
                Counter_cells = new List<CCellCounter>(_list464.Count);
                for(int _i465 = 0; _i465 < _list464.Count; ++_i465)
                {
                  CCellCounter _elem466;
                  _elem466 = new CCellCounter();
                  await _elem466.ReadAsync(iprot, cancellationToken);
                  Counter_cells.Add(_elem466);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.List)
            {
              {
                var _list467 = await iprot.ReadListBeginAsync(cancellationToken);
                Serial_cells = new List<CCellSerial>(_list467.Count);
                for(int _i468 = 0; _i468 < _list467.Count; ++_i468)
                {
                  CCellSerial _elem469;
                  _elem469 = new CCellSerial();
                  await _elem469.ReadAsync(iprot, cancellationToken);
                  Serial_cells.Add(_elem469);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp470 = new TStruct("cCells");
      await oprot.WriteStructBeginAsync(tmp470, cancellationToken);
      var tmp471 = new TField();
      if((Plain_cells != null) && __isset.plain_cells)
      {
        tmp471.Name = "plain_cells";
        tmp471.Type = TType.List;
        tmp471.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp471, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.Struct, Plain_cells.Count), cancellationToken);
        foreach (CCellPlain _iter472 in Plain_cells)
        {
          await _iter472.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Counter_cells != null) && __isset.counter_cells)
      {
        tmp471.Name = "counter_cells";
        tmp471.Type = TType.List;
        tmp471.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp471, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.Struct, Counter_cells.Count), cancellationToken);
        foreach (CCellCounter _iter473 in Counter_cells)
        {
          await _iter473.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Serial_cells != null) && __isset.serial_cells)
      {
        tmp471.Name = "serial_cells";
        tmp471.Type = TType.List;
        tmp471.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp471, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.Struct, Serial_cells.Count), cancellationToken);
        foreach (CCellSerial _iter474 in Serial_cells)
        {
          await _iter474.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is cCells other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.plain_cells == other.__isset.plain_cells) && ((!__isset.plain_cells) || (TCollections.Equals(Plain_cells, other.Plain_cells))))
      && ((__isset.counter_cells == other.__isset.counter_cells) && ((!__isset.counter_cells) || (TCollections.Equals(Counter_cells, other.Counter_cells))))
      && ((__isset.serial_cells == other.__isset.serial_cells) && ((!__isset.serial_cells) || (TCollections.Equals(Serial_cells, other.Serial_cells))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((Plain_cells != null) && __isset.plain_cells)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Plain_cells);
      }
      if((Counter_cells != null) && __isset.counter_cells)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Counter_cells);
      }
      if((Serial_cells != null) && __isset.serial_cells)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Serial_cells);
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp475 = new StringBuilder("cCells(");
    int tmp476 = 0;
    if((Plain_cells != null) && __isset.plain_cells)
    {
      if(0 < tmp476++) { tmp475.Append(", "); }
      tmp475.Append("Plain_cells: ");
      Plain_cells.ToString(tmp475);
    }
    if((Counter_cells != null) && __isset.counter_cells)
    {
      if(0 < tmp476++) { tmp475.Append(", "); }
      tmp475.Append("Counter_cells: ");
      Counter_cells.ToString(tmp475);
    }
    if((Serial_cells != null) && __isset.serial_cells)
    {
      if(0 < tmp476++) { tmp475.Append(", "); }
      tmp475.Append("Serial_cells: ");
      Serial_cells.ToString(tmp475);
    }
    tmp475.Append(')');
    return tmp475.ToString();
  }
}

