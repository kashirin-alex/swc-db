#
# Autogenerated by Thrift Compiler (0.18.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:twisted,slots,no_utf8strings
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from zope.interface import Interface, implementer
from twisted.internet import defer
from thrift.transport import TTwisted
all_structs = []


class Iface(Interface):
    """
    The SWC-DB Thrift Service

    """
    def sql_mng_column(sql):
        """
        The direct SQL method to Manage Column.

        Parameters:
         - sql: The SQL string to Execute

        """
        pass

    def sql_list_columns(sql):
        """
        The direct SQL method to List Columns

        Parameters:
         - sql: The SQL string to Execute

        """
        pass

    def sql_compact_columns(sql):
        """
        The direct SQL method to Compact Columns

        Parameters:
         - sql: The SQL string to Execute

        """
        pass

    def sql_select_plain(sql):
        """
        The direct SQL method to select cells with result in CellsPlain.

        Parameters:
         - sql: The SQL string to Execute

        """
        pass

    def sql_select_counter(sql):
        """
        The direct SQL method to select cells with result in CellsCounter.

        Parameters:
         - sql: The SQL string to Execute

        """
        pass

    def sql_select_serial(sql):
        """
        The direct SQL method to select cells with result in CellsSerial.

        Parameters:
         - sql: The SQL string to Execute

        """
        pass

    def sql_select(sql):
        """
        The direct SQL method to select cells with result in Cells List.

        Parameters:
         - sql: The SQL string to Execute

        """
        pass

    def sql_select_rslt_on_column(sql):
        """
        The direct SQL method to select cells with result in Columns Cells map.

        Parameters:
         - sql: The SQL string to Execute

        """
        pass

    def sql_select_rslt_on_key(sql):
        """
        The direct SQL method to select cells with result in Key Cells list.

        Parameters:
         - sql: The SQL string to Execute

        """
        pass

    def sql_select_rslt_on_fraction(sql):
        """
        The direct SQL method to select cells with result in Fractons Cells.

        Parameters:
         - sql: The SQL string to Execute

        """
        pass

    def sql_query(sql, rslt):
        """
        The SQL method to select cells with result set by the request's type of CellsResult.

        Parameters:
         - sql: The SQL string to Execute
         - rslt: The Type of Cells Result for the response

        """
        pass

    def sql_update(sql, updater_id):
        """
        The direct SQL method to update cells optionally to work with updater-id.

        Parameters:
         - sql: The SQL string to Execute
         - updater_id: The Updater ID to work with

        """
        pass

    def exec_sql(sql):
        """
        The SQL method to execute any query.

        Parameters:
         - sql: The SQL string to Execute

        """
        pass

    def updater_create(buffer_size):
        """
        The method to Create an Updater ID with buffering size in bytes.

        Parameters:
         - buffer_size: The buffer size of the Updater

        """
        pass

    def updater_close(id):
        """
        The method to Close an Updater ID.

        Parameters:
         - id: The Updater ID to close

        """
        pass

    def update_plain(cells, updater_id):
        """
        The direct method to update cells with cell in Update-Columns-Cells-Plain,
        optionally to work with updater-id.

        Parameters:
         - cells: The Cells to update
         - updater_id: The Updater ID to use for write

        """
        pass

    def update_counter(cells, updater_id):
        """
        The direct method to update cells with cell in Update-Columns-Cells-Counter,
        optionally to work with updater-id.

        Parameters:
         - cells: The Counter Cells to update
         - updater_id: The Updater ID to use for write

        """
        pass

    def update_serial(cells, updater_id):
        """
        The direct method to update cells with cell in Update-Columns-Cells-Serial,
        optionally to work with updater-id.

        Parameters:
         - cells: The Serial Cells to update
         - updater_id: The Updater ID to use for write

        """
        pass

    def update_by_types(plain, counter, serial, updater_id):
        """
        The method is to update cells by several Column-Types,
        optionally to work with updater-id.

        Parameters:
         - plain: The PLAIN Cells to update
         - counter: The COUNTER Cells to update
         - serial: The SERIAL Cells to update
         - updater_id: The Updater ID to use for write

        """
        pass

    def mng_column(func, schema):
        """
        The direct method to Manage Column

        Parameters:
         - func: The Action Function to use
         - schema: The Schema for the Action

        """
        pass

    def list_columns(spec):
        """
        The direct method to List Columns

        Parameters:
         - spec: The Schemas Specifications to match Schema for response

        """
        pass

    def compact_columns(spec):
        """
        The direct method to Compact Columns

        Parameters:
         - spec: The Schemas Specifications to match columns to Compact

        """
        pass

    def scan(spec):
        """
        The direct method to select cells with result in Cells List.

        Parameters:
         - spec: The Scan Specifications for the scan

        """
        pass

    def scan_rslt_on_column(spec):
        """
        The direct method to select cells with result in Columns Cells map.

        Parameters:
         - spec: The Scan Specifications for the scan

        """
        pass

    def scan_rslt_on_key(spec):
        """
        The direct method to select cells with result in Key Cells list.

        Parameters:
         - spec: The Scan Specifications for the scan

        """
        pass

    def scan_rslt_on_fraction(spec):
        """
        The direct method to select cells with result in Fractons Cells.

        Parameters:
         - spec: The Scan Specifications for the scan

        """
        pass

    def scan_rslt_on(spec, rslt):
        """
        The method to select cells with result set by the request's type of CellsResult.

        Parameters:
         - spec: The Scan Specifications for the scan
         - rslt: The Type of Cells Result for the response

        """
        pass


@implementer(Iface)
class Client(object):

    """
    The SWC-DB Thrift Service

    """
    def __init__(self, transport, oprot_factory):
        self._transport = transport
        self._oprot_factory = oprot_factory
        self._seqid = 0
        self._reqs = {}

    def sql_mng_column(self, sql):
        """
        The direct SQL method to Manage Column.

        Parameters:
         - sql: The SQL string to Execute

        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_sql_mng_column, sql)
        d.addCallbacks(
            callback=self.cb_send_sql_mng_column,
            callbackArgs=(seqid,),
            errback=self.eb_send_sql_mng_column,
            errbackArgs=(seqid,))
        return d

    def cb_send_sql_mng_column(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_sql_mng_column(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_sql_mng_column(self, sql):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('sql_mng_column', TMessageType.CALL, self._seqid)
        args = sql_mng_column_args()
        args.sql = sql
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_sql_mng_column(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = sql_mng_column_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            return d.errback(result.e)
        return d.callback(None)

    def sql_list_columns(self, sql):
        """
        The direct SQL method to List Columns

        Parameters:
         - sql: The SQL string to Execute

        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_sql_list_columns, sql)
        d.addCallbacks(
            callback=self.cb_send_sql_list_columns,
            callbackArgs=(seqid,),
            errback=self.eb_send_sql_list_columns,
            errbackArgs=(seqid,))
        return d

    def cb_send_sql_list_columns(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_sql_list_columns(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_sql_list_columns(self, sql):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('sql_list_columns', TMessageType.CALL, self._seqid)
        args = sql_list_columns_args()
        args.sql = sql
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_sql_list_columns(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = sql_list_columns_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        if result.e is not None:
            return d.errback(result.e)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "sql_list_columns failed: unknown result"))

    def sql_compact_columns(self, sql):
        """
        The direct SQL method to Compact Columns

        Parameters:
         - sql: The SQL string to Execute

        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_sql_compact_columns, sql)
        d.addCallbacks(
            callback=self.cb_send_sql_compact_columns,
            callbackArgs=(seqid,),
            errback=self.eb_send_sql_compact_columns,
            errbackArgs=(seqid,))
        return d

    def cb_send_sql_compact_columns(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_sql_compact_columns(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_sql_compact_columns(self, sql):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('sql_compact_columns', TMessageType.CALL, self._seqid)
        args = sql_compact_columns_args()
        args.sql = sql
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_sql_compact_columns(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = sql_compact_columns_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        if result.e is not None:
            return d.errback(result.e)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "sql_compact_columns failed: unknown result"))

    def sql_select_plain(self, sql):
        """
        The direct SQL method to select cells with result in CellsPlain.

        Parameters:
         - sql: The SQL string to Execute

        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_sql_select_plain, sql)
        d.addCallbacks(
            callback=self.cb_send_sql_select_plain,
            callbackArgs=(seqid,),
            errback=self.eb_send_sql_select_plain,
            errbackArgs=(seqid,))
        return d

    def cb_send_sql_select_plain(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_sql_select_plain(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_sql_select_plain(self, sql):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('sql_select_plain', TMessageType.CALL, self._seqid)
        args = sql_select_plain_args()
        args.sql = sql
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_sql_select_plain(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = sql_select_plain_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        if result.e is not None:
            return d.errback(result.e)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "sql_select_plain failed: unknown result"))

    def sql_select_counter(self, sql):
        """
        The direct SQL method to select cells with result in CellsCounter.

        Parameters:
         - sql: The SQL string to Execute

        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_sql_select_counter, sql)
        d.addCallbacks(
            callback=self.cb_send_sql_select_counter,
            callbackArgs=(seqid,),
            errback=self.eb_send_sql_select_counter,
            errbackArgs=(seqid,))
        return d

    def cb_send_sql_select_counter(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_sql_select_counter(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_sql_select_counter(self, sql):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('sql_select_counter', TMessageType.CALL, self._seqid)
        args = sql_select_counter_args()
        args.sql = sql
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_sql_select_counter(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = sql_select_counter_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        if result.e is not None:
            return d.errback(result.e)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "sql_select_counter failed: unknown result"))

    def sql_select_serial(self, sql):
        """
        The direct SQL method to select cells with result in CellsSerial.

        Parameters:
         - sql: The SQL string to Execute

        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_sql_select_serial, sql)
        d.addCallbacks(
            callback=self.cb_send_sql_select_serial,
            callbackArgs=(seqid,),
            errback=self.eb_send_sql_select_serial,
            errbackArgs=(seqid,))
        return d

    def cb_send_sql_select_serial(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_sql_select_serial(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_sql_select_serial(self, sql):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('sql_select_serial', TMessageType.CALL, self._seqid)
        args = sql_select_serial_args()
        args.sql = sql
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_sql_select_serial(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = sql_select_serial_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        if result.e is not None:
            return d.errback(result.e)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "sql_select_serial failed: unknown result"))

    def sql_select(self, sql):
        """
        The direct SQL method to select cells with result in Cells List.

        Parameters:
         - sql: The SQL string to Execute

        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_sql_select, sql)
        d.addCallbacks(
            callback=self.cb_send_sql_select,
            callbackArgs=(seqid,),
            errback=self.eb_send_sql_select,
            errbackArgs=(seqid,))
        return d

    def cb_send_sql_select(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_sql_select(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_sql_select(self, sql):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('sql_select', TMessageType.CALL, self._seqid)
        args = sql_select_args()
        args.sql = sql
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_sql_select(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = sql_select_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        if result.e is not None:
            return d.errback(result.e)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "sql_select failed: unknown result"))

    def sql_select_rslt_on_column(self, sql):
        """
        The direct SQL method to select cells with result in Columns Cells map.

        Parameters:
         - sql: The SQL string to Execute

        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_sql_select_rslt_on_column, sql)
        d.addCallbacks(
            callback=self.cb_send_sql_select_rslt_on_column,
            callbackArgs=(seqid,),
            errback=self.eb_send_sql_select_rslt_on_column,
            errbackArgs=(seqid,))
        return d

    def cb_send_sql_select_rslt_on_column(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_sql_select_rslt_on_column(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_sql_select_rslt_on_column(self, sql):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('sql_select_rslt_on_column', TMessageType.CALL, self._seqid)
        args = sql_select_rslt_on_column_args()
        args.sql = sql
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_sql_select_rslt_on_column(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = sql_select_rslt_on_column_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        if result.e is not None:
            return d.errback(result.e)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "sql_select_rslt_on_column failed: unknown result"))

    def sql_select_rslt_on_key(self, sql):
        """
        The direct SQL method to select cells with result in Key Cells list.

        Parameters:
         - sql: The SQL string to Execute

        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_sql_select_rslt_on_key, sql)
        d.addCallbacks(
            callback=self.cb_send_sql_select_rslt_on_key,
            callbackArgs=(seqid,),
            errback=self.eb_send_sql_select_rslt_on_key,
            errbackArgs=(seqid,))
        return d

    def cb_send_sql_select_rslt_on_key(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_sql_select_rslt_on_key(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_sql_select_rslt_on_key(self, sql):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('sql_select_rslt_on_key', TMessageType.CALL, self._seqid)
        args = sql_select_rslt_on_key_args()
        args.sql = sql
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_sql_select_rslt_on_key(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = sql_select_rslt_on_key_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        if result.e is not None:
            return d.errback(result.e)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "sql_select_rslt_on_key failed: unknown result"))

    def sql_select_rslt_on_fraction(self, sql):
        """
        The direct SQL method to select cells with result in Fractons Cells.

        Parameters:
         - sql: The SQL string to Execute

        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_sql_select_rslt_on_fraction, sql)
        d.addCallbacks(
            callback=self.cb_send_sql_select_rslt_on_fraction,
            callbackArgs=(seqid,),
            errback=self.eb_send_sql_select_rslt_on_fraction,
            errbackArgs=(seqid,))
        return d

    def cb_send_sql_select_rslt_on_fraction(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_sql_select_rslt_on_fraction(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_sql_select_rslt_on_fraction(self, sql):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('sql_select_rslt_on_fraction', TMessageType.CALL, self._seqid)
        args = sql_select_rslt_on_fraction_args()
        args.sql = sql
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_sql_select_rslt_on_fraction(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = sql_select_rslt_on_fraction_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        if result.e is not None:
            return d.errback(result.e)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "sql_select_rslt_on_fraction failed: unknown result"))

    def sql_query(self, sql, rslt):
        """
        The SQL method to select cells with result set by the request's type of CellsResult.

        Parameters:
         - sql: The SQL string to Execute
         - rslt: The Type of Cells Result for the response

        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_sql_query, sql, rslt)
        d.addCallbacks(
            callback=self.cb_send_sql_query,
            callbackArgs=(seqid,),
            errback=self.eb_send_sql_query,
            errbackArgs=(seqid,))
        return d

    def cb_send_sql_query(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_sql_query(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_sql_query(self, sql, rslt):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('sql_query', TMessageType.CALL, self._seqid)
        args = sql_query_args()
        args.sql = sql
        args.rslt = rslt
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_sql_query(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = sql_query_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        if result.e is not None:
            return d.errback(result.e)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "sql_query failed: unknown result"))

    def sql_update(self, sql, updater_id):
        """
        The direct SQL method to update cells optionally to work with updater-id.

        Parameters:
         - sql: The SQL string to Execute
         - updater_id: The Updater ID to work with

        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_sql_update, sql, updater_id)
        d.addCallbacks(
            callback=self.cb_send_sql_update,
            callbackArgs=(seqid,),
            errback=self.eb_send_sql_update,
            errbackArgs=(seqid,))
        return d

    def cb_send_sql_update(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_sql_update(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_sql_update(self, sql, updater_id):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('sql_update', TMessageType.CALL, self._seqid)
        args = sql_update_args()
        args.sql = sql
        args.updater_id = updater_id
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_sql_update(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = sql_update_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            return d.errback(result.e)
        return d.callback(None)

    def exec_sql(self, sql):
        """
        The SQL method to execute any query.

        Parameters:
         - sql: The SQL string to Execute

        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_exec_sql, sql)
        d.addCallbacks(
            callback=self.cb_send_exec_sql,
            callbackArgs=(seqid,),
            errback=self.eb_send_exec_sql,
            errbackArgs=(seqid,))
        return d

    def cb_send_exec_sql(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_exec_sql(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_exec_sql(self, sql):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('exec_sql', TMessageType.CALL, self._seqid)
        args = exec_sql_args()
        args.sql = sql
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_exec_sql(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = exec_sql_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        if result.e is not None:
            return d.errback(result.e)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "exec_sql failed: unknown result"))

    def updater_create(self, buffer_size):
        """
        The method to Create an Updater ID with buffering size in bytes.

        Parameters:
         - buffer_size: The buffer size of the Updater

        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_updater_create, buffer_size)
        d.addCallbacks(
            callback=self.cb_send_updater_create,
            callbackArgs=(seqid,),
            errback=self.eb_send_updater_create,
            errbackArgs=(seqid,))
        return d

    def cb_send_updater_create(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_updater_create(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_updater_create(self, buffer_size):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('updater_create', TMessageType.CALL, self._seqid)
        args = updater_create_args()
        args.buffer_size = buffer_size
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_updater_create(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = updater_create_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        if result.e is not None:
            return d.errback(result.e)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "updater_create failed: unknown result"))

    def updater_close(self, id):
        """
        The method to Close an Updater ID.

        Parameters:
         - id: The Updater ID to close

        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_updater_close, id)
        d.addCallbacks(
            callback=self.cb_send_updater_close,
            callbackArgs=(seqid,),
            errback=self.eb_send_updater_close,
            errbackArgs=(seqid,))
        return d

    def cb_send_updater_close(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_updater_close(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_updater_close(self, id):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('updater_close', TMessageType.CALL, self._seqid)
        args = updater_close_args()
        args.id = id
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_updater_close(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = updater_close_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            return d.errback(result.e)
        return d.callback(None)

    def update_plain(self, cells, updater_id):
        """
        The direct method to update cells with cell in Update-Columns-Cells-Plain,
        optionally to work with updater-id.

        Parameters:
         - cells: The Cells to update
         - updater_id: The Updater ID to use for write

        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_update_plain, cells, updater_id)
        d.addCallbacks(
            callback=self.cb_send_update_plain,
            callbackArgs=(seqid,),
            errback=self.eb_send_update_plain,
            errbackArgs=(seqid,))
        return d

    def cb_send_update_plain(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_update_plain(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_update_plain(self, cells, updater_id):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('update_plain', TMessageType.CALL, self._seqid)
        args = update_plain_args()
        args.cells = cells
        args.updater_id = updater_id
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_update_plain(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = update_plain_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            return d.errback(result.e)
        return d.callback(None)

    def update_counter(self, cells, updater_id):
        """
        The direct method to update cells with cell in Update-Columns-Cells-Counter,
        optionally to work with updater-id.

        Parameters:
         - cells: The Counter Cells to update
         - updater_id: The Updater ID to use for write

        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_update_counter, cells, updater_id)
        d.addCallbacks(
            callback=self.cb_send_update_counter,
            callbackArgs=(seqid,),
            errback=self.eb_send_update_counter,
            errbackArgs=(seqid,))
        return d

    def cb_send_update_counter(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_update_counter(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_update_counter(self, cells, updater_id):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('update_counter', TMessageType.CALL, self._seqid)
        args = update_counter_args()
        args.cells = cells
        args.updater_id = updater_id
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_update_counter(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = update_counter_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            return d.errback(result.e)
        return d.callback(None)

    def update_serial(self, cells, updater_id):
        """
        The direct method to update cells with cell in Update-Columns-Cells-Serial,
        optionally to work with updater-id.

        Parameters:
         - cells: The Serial Cells to update
         - updater_id: The Updater ID to use for write

        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_update_serial, cells, updater_id)
        d.addCallbacks(
            callback=self.cb_send_update_serial,
            callbackArgs=(seqid,),
            errback=self.eb_send_update_serial,
            errbackArgs=(seqid,))
        return d

    def cb_send_update_serial(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_update_serial(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_update_serial(self, cells, updater_id):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('update_serial', TMessageType.CALL, self._seqid)
        args = update_serial_args()
        args.cells = cells
        args.updater_id = updater_id
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_update_serial(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = update_serial_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            return d.errback(result.e)
        return d.callback(None)

    def update_by_types(self, plain, counter, serial, updater_id):
        """
        The method is to update cells by several Column-Types,
        optionally to work with updater-id.

        Parameters:
         - plain: The PLAIN Cells to update
         - counter: The COUNTER Cells to update
         - serial: The SERIAL Cells to update
         - updater_id: The Updater ID to use for write

        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_update_by_types, plain, counter, serial, updater_id)
        d.addCallbacks(
            callback=self.cb_send_update_by_types,
            callbackArgs=(seqid,),
            errback=self.eb_send_update_by_types,
            errbackArgs=(seqid,))
        return d

    def cb_send_update_by_types(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_update_by_types(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_update_by_types(self, plain, counter, serial, updater_id):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('update_by_types', TMessageType.CALL, self._seqid)
        args = update_by_types_args()
        args.plain = plain
        args.counter = counter
        args.serial = serial
        args.updater_id = updater_id
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_update_by_types(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = update_by_types_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            return d.errback(result.e)
        return d.callback(None)

    def mng_column(self, func, schema):
        """
        The direct method to Manage Column

        Parameters:
         - func: The Action Function to use
         - schema: The Schema for the Action

        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_mng_column, func, schema)
        d.addCallbacks(
            callback=self.cb_send_mng_column,
            callbackArgs=(seqid,),
            errback=self.eb_send_mng_column,
            errbackArgs=(seqid,))
        return d

    def cb_send_mng_column(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_mng_column(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_mng_column(self, func, schema):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('mng_column', TMessageType.CALL, self._seqid)
        args = mng_column_args()
        args.func = func
        args.schema = schema
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_mng_column(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = mng_column_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            return d.errback(result.e)
        return d.callback(None)

    def list_columns(self, spec):
        """
        The direct method to List Columns

        Parameters:
         - spec: The Schemas Specifications to match Schema for response

        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_list_columns, spec)
        d.addCallbacks(
            callback=self.cb_send_list_columns,
            callbackArgs=(seqid,),
            errback=self.eb_send_list_columns,
            errbackArgs=(seqid,))
        return d

    def cb_send_list_columns(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_list_columns(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_list_columns(self, spec):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('list_columns', TMessageType.CALL, self._seqid)
        args = list_columns_args()
        args.spec = spec
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_list_columns(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = list_columns_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        if result.e is not None:
            return d.errback(result.e)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "list_columns failed: unknown result"))

    def compact_columns(self, spec):
        """
        The direct method to Compact Columns

        Parameters:
         - spec: The Schemas Specifications to match columns to Compact

        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_compact_columns, spec)
        d.addCallbacks(
            callback=self.cb_send_compact_columns,
            callbackArgs=(seqid,),
            errback=self.eb_send_compact_columns,
            errbackArgs=(seqid,))
        return d

    def cb_send_compact_columns(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_compact_columns(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_compact_columns(self, spec):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('compact_columns', TMessageType.CALL, self._seqid)
        args = compact_columns_args()
        args.spec = spec
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_compact_columns(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = compact_columns_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        if result.e is not None:
            return d.errback(result.e)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "compact_columns failed: unknown result"))

    def scan(self, spec):
        """
        The direct method to select cells with result in Cells List.

        Parameters:
         - spec: The Scan Specifications for the scan

        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_scan, spec)
        d.addCallbacks(
            callback=self.cb_send_scan,
            callbackArgs=(seqid,),
            errback=self.eb_send_scan,
            errbackArgs=(seqid,))
        return d

    def cb_send_scan(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_scan(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_scan(self, spec):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('scan', TMessageType.CALL, self._seqid)
        args = scan_args()
        args.spec = spec
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_scan(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = scan_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        if result.e is not None:
            return d.errback(result.e)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "scan failed: unknown result"))

    def scan_rslt_on_column(self, spec):
        """
        The direct method to select cells with result in Columns Cells map.

        Parameters:
         - spec: The Scan Specifications for the scan

        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_scan_rslt_on_column, spec)
        d.addCallbacks(
            callback=self.cb_send_scan_rslt_on_column,
            callbackArgs=(seqid,),
            errback=self.eb_send_scan_rslt_on_column,
            errbackArgs=(seqid,))
        return d

    def cb_send_scan_rslt_on_column(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_scan_rslt_on_column(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_scan_rslt_on_column(self, spec):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('scan_rslt_on_column', TMessageType.CALL, self._seqid)
        args = scan_rslt_on_column_args()
        args.spec = spec
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_scan_rslt_on_column(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = scan_rslt_on_column_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        if result.e is not None:
            return d.errback(result.e)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "scan_rslt_on_column failed: unknown result"))

    def scan_rslt_on_key(self, spec):
        """
        The direct method to select cells with result in Key Cells list.

        Parameters:
         - spec: The Scan Specifications for the scan

        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_scan_rslt_on_key, spec)
        d.addCallbacks(
            callback=self.cb_send_scan_rslt_on_key,
            callbackArgs=(seqid,),
            errback=self.eb_send_scan_rslt_on_key,
            errbackArgs=(seqid,))
        return d

    def cb_send_scan_rslt_on_key(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_scan_rslt_on_key(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_scan_rslt_on_key(self, spec):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('scan_rslt_on_key', TMessageType.CALL, self._seqid)
        args = scan_rslt_on_key_args()
        args.spec = spec
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_scan_rslt_on_key(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = scan_rslt_on_key_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        if result.e is not None:
            return d.errback(result.e)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "scan_rslt_on_key failed: unknown result"))

    def scan_rslt_on_fraction(self, spec):
        """
        The direct method to select cells with result in Fractons Cells.

        Parameters:
         - spec: The Scan Specifications for the scan

        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_scan_rslt_on_fraction, spec)
        d.addCallbacks(
            callback=self.cb_send_scan_rslt_on_fraction,
            callbackArgs=(seqid,),
            errback=self.eb_send_scan_rslt_on_fraction,
            errbackArgs=(seqid,))
        return d

    def cb_send_scan_rslt_on_fraction(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_scan_rslt_on_fraction(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_scan_rslt_on_fraction(self, spec):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('scan_rslt_on_fraction', TMessageType.CALL, self._seqid)
        args = scan_rslt_on_fraction_args()
        args.spec = spec
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_scan_rslt_on_fraction(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = scan_rslt_on_fraction_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        if result.e is not None:
            return d.errback(result.e)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "scan_rslt_on_fraction failed: unknown result"))

    def scan_rslt_on(self, spec, rslt):
        """
        The method to select cells with result set by the request's type of CellsResult.

        Parameters:
         - spec: The Scan Specifications for the scan
         - rslt: The Type of Cells Result for the response

        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_scan_rslt_on, spec, rslt)
        d.addCallbacks(
            callback=self.cb_send_scan_rslt_on,
            callbackArgs=(seqid,),
            errback=self.eb_send_scan_rslt_on,
            errbackArgs=(seqid,))
        return d

    def cb_send_scan_rslt_on(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_scan_rslt_on(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_scan_rslt_on(self, spec, rslt):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('scan_rslt_on', TMessageType.CALL, self._seqid)
        args = scan_rslt_on_args()
        args.spec = spec
        args.rslt = rslt
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_scan_rslt_on(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = scan_rslt_on_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        if result.e is not None:
            return d.errback(result.e)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "scan_rslt_on failed: unknown result"))


@implementer(Iface)
class Processor(TProcessor):
    def __init__(self, handler):
        self._handler = Iface(handler)
        self._processMap = {}
        self._processMap["sql_mng_column"] = Processor.process_sql_mng_column
        self._processMap["sql_list_columns"] = Processor.process_sql_list_columns
        self._processMap["sql_compact_columns"] = Processor.process_sql_compact_columns
        self._processMap["sql_select_plain"] = Processor.process_sql_select_plain
        self._processMap["sql_select_counter"] = Processor.process_sql_select_counter
        self._processMap["sql_select_serial"] = Processor.process_sql_select_serial
        self._processMap["sql_select"] = Processor.process_sql_select
        self._processMap["sql_select_rslt_on_column"] = Processor.process_sql_select_rslt_on_column
        self._processMap["sql_select_rslt_on_key"] = Processor.process_sql_select_rslt_on_key
        self._processMap["sql_select_rslt_on_fraction"] = Processor.process_sql_select_rslt_on_fraction
        self._processMap["sql_query"] = Processor.process_sql_query
        self._processMap["sql_update"] = Processor.process_sql_update
        self._processMap["exec_sql"] = Processor.process_exec_sql
        self._processMap["updater_create"] = Processor.process_updater_create
        self._processMap["updater_close"] = Processor.process_updater_close
        self._processMap["update_plain"] = Processor.process_update_plain
        self._processMap["update_counter"] = Processor.process_update_counter
        self._processMap["update_serial"] = Processor.process_update_serial
        self._processMap["update_by_types"] = Processor.process_update_by_types
        self._processMap["mng_column"] = Processor.process_mng_column
        self._processMap["list_columns"] = Processor.process_list_columns
        self._processMap["compact_columns"] = Processor.process_compact_columns
        self._processMap["scan"] = Processor.process_scan
        self._processMap["scan_rslt_on_column"] = Processor.process_scan_rslt_on_column
        self._processMap["scan_rslt_on_key"] = Processor.process_scan_rslt_on_key
        self._processMap["scan_rslt_on_fraction"] = Processor.process_scan_rslt_on_fraction
        self._processMap["scan_rslt_on"] = Processor.process_scan_rslt_on
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return defer.succeed(None)
        else:
            return self._processMap[name](self, seqid, iprot, oprot)

    def process_sql_mng_column(self, seqid, iprot, oprot):
        args = sql_mng_column_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sql_mng_column_result()
        d = defer.maybeDeferred(self._handler.sql_mng_column, args.sql)
        d.addCallback(self.write_results_success_sql_mng_column, result, seqid, oprot)
        d.addErrback(self.write_results_exception_sql_mng_column, result, seqid, oprot)
        return d

    def write_results_success_sql_mng_column(self, success, result, seqid, oprot):
        oprot.writeMessageBegin("sql_mng_column", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_sql_mng_column(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except Exception as e:
            result.e = e
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sql_mng_column", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sql_list_columns(self, seqid, iprot, oprot):
        args = sql_list_columns_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sql_list_columns_result()
        d = defer.maybeDeferred(self._handler.sql_list_columns, args.sql)
        d.addCallback(self.write_results_success_sql_list_columns, result, seqid, oprot)
        d.addErrback(self.write_results_exception_sql_list_columns, result, seqid, oprot)
        return d

    def write_results_success_sql_list_columns(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("sql_list_columns", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_sql_list_columns(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except Exception as e:
            result.e = e
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sql_list_columns", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sql_compact_columns(self, seqid, iprot, oprot):
        args = sql_compact_columns_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sql_compact_columns_result()
        d = defer.maybeDeferred(self._handler.sql_compact_columns, args.sql)
        d.addCallback(self.write_results_success_sql_compact_columns, result, seqid, oprot)
        d.addErrback(self.write_results_exception_sql_compact_columns, result, seqid, oprot)
        return d

    def write_results_success_sql_compact_columns(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("sql_compact_columns", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_sql_compact_columns(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except Exception as e:
            result.e = e
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sql_compact_columns", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sql_select_plain(self, seqid, iprot, oprot):
        args = sql_select_plain_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sql_select_plain_result()
        d = defer.maybeDeferred(self._handler.sql_select_plain, args.sql)
        d.addCallback(self.write_results_success_sql_select_plain, result, seqid, oprot)
        d.addErrback(self.write_results_exception_sql_select_plain, result, seqid, oprot)
        return d

    def write_results_success_sql_select_plain(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("sql_select_plain", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_sql_select_plain(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except Exception as e:
            result.e = e
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sql_select_plain", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sql_select_counter(self, seqid, iprot, oprot):
        args = sql_select_counter_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sql_select_counter_result()
        d = defer.maybeDeferred(self._handler.sql_select_counter, args.sql)
        d.addCallback(self.write_results_success_sql_select_counter, result, seqid, oprot)
        d.addErrback(self.write_results_exception_sql_select_counter, result, seqid, oprot)
        return d

    def write_results_success_sql_select_counter(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("sql_select_counter", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_sql_select_counter(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except Exception as e:
            result.e = e
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sql_select_counter", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sql_select_serial(self, seqid, iprot, oprot):
        args = sql_select_serial_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sql_select_serial_result()
        d = defer.maybeDeferred(self._handler.sql_select_serial, args.sql)
        d.addCallback(self.write_results_success_sql_select_serial, result, seqid, oprot)
        d.addErrback(self.write_results_exception_sql_select_serial, result, seqid, oprot)
        return d

    def write_results_success_sql_select_serial(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("sql_select_serial", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_sql_select_serial(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except Exception as e:
            result.e = e
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sql_select_serial", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sql_select(self, seqid, iprot, oprot):
        args = sql_select_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sql_select_result()
        d = defer.maybeDeferred(self._handler.sql_select, args.sql)
        d.addCallback(self.write_results_success_sql_select, result, seqid, oprot)
        d.addErrback(self.write_results_exception_sql_select, result, seqid, oprot)
        return d

    def write_results_success_sql_select(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("sql_select", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_sql_select(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except Exception as e:
            result.e = e
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sql_select", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sql_select_rslt_on_column(self, seqid, iprot, oprot):
        args = sql_select_rslt_on_column_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sql_select_rslt_on_column_result()
        d = defer.maybeDeferred(self._handler.sql_select_rslt_on_column, args.sql)
        d.addCallback(self.write_results_success_sql_select_rslt_on_column, result, seqid, oprot)
        d.addErrback(self.write_results_exception_sql_select_rslt_on_column, result, seqid, oprot)
        return d

    def write_results_success_sql_select_rslt_on_column(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("sql_select_rslt_on_column", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_sql_select_rslt_on_column(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except Exception as e:
            result.e = e
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sql_select_rslt_on_column", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sql_select_rslt_on_key(self, seqid, iprot, oprot):
        args = sql_select_rslt_on_key_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sql_select_rslt_on_key_result()
        d = defer.maybeDeferred(self._handler.sql_select_rslt_on_key, args.sql)
        d.addCallback(self.write_results_success_sql_select_rslt_on_key, result, seqid, oprot)
        d.addErrback(self.write_results_exception_sql_select_rslt_on_key, result, seqid, oprot)
        return d

    def write_results_success_sql_select_rslt_on_key(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("sql_select_rslt_on_key", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_sql_select_rslt_on_key(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except Exception as e:
            result.e = e
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sql_select_rslt_on_key", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sql_select_rslt_on_fraction(self, seqid, iprot, oprot):
        args = sql_select_rslt_on_fraction_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sql_select_rslt_on_fraction_result()
        d = defer.maybeDeferred(self._handler.sql_select_rslt_on_fraction, args.sql)
        d.addCallback(self.write_results_success_sql_select_rslt_on_fraction, result, seqid, oprot)
        d.addErrback(self.write_results_exception_sql_select_rslt_on_fraction, result, seqid, oprot)
        return d

    def write_results_success_sql_select_rslt_on_fraction(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("sql_select_rslt_on_fraction", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_sql_select_rslt_on_fraction(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except Exception as e:
            result.e = e
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sql_select_rslt_on_fraction", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sql_query(self, seqid, iprot, oprot):
        args = sql_query_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sql_query_result()
        d = defer.maybeDeferred(self._handler.sql_query, args.sql, args.rslt)
        d.addCallback(self.write_results_success_sql_query, result, seqid, oprot)
        d.addErrback(self.write_results_exception_sql_query, result, seqid, oprot)
        return d

    def write_results_success_sql_query(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("sql_query", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_sql_query(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except Exception as e:
            result.e = e
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sql_query", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sql_update(self, seqid, iprot, oprot):
        args = sql_update_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sql_update_result()
        d = defer.maybeDeferred(self._handler.sql_update, args.sql, args.updater_id)
        d.addCallback(self.write_results_success_sql_update, result, seqid, oprot)
        d.addErrback(self.write_results_exception_sql_update, result, seqid, oprot)
        return d

    def write_results_success_sql_update(self, success, result, seqid, oprot):
        oprot.writeMessageBegin("sql_update", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_sql_update(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except Exception as e:
            result.e = e
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sql_update", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_exec_sql(self, seqid, iprot, oprot):
        args = exec_sql_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = exec_sql_result()
        d = defer.maybeDeferred(self._handler.exec_sql, args.sql)
        d.addCallback(self.write_results_success_exec_sql, result, seqid, oprot)
        d.addErrback(self.write_results_exception_exec_sql, result, seqid, oprot)
        return d

    def write_results_success_exec_sql(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("exec_sql", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_exec_sql(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except Exception as e:
            result.e = e
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("exec_sql", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updater_create(self, seqid, iprot, oprot):
        args = updater_create_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updater_create_result()
        d = defer.maybeDeferred(self._handler.updater_create, args.buffer_size)
        d.addCallback(self.write_results_success_updater_create, result, seqid, oprot)
        d.addErrback(self.write_results_exception_updater_create, result, seqid, oprot)
        return d

    def write_results_success_updater_create(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("updater_create", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_updater_create(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except Exception as e:
            result.e = e
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updater_create", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updater_close(self, seqid, iprot, oprot):
        args = updater_close_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updater_close_result()
        d = defer.maybeDeferred(self._handler.updater_close, args.id)
        d.addCallback(self.write_results_success_updater_close, result, seqid, oprot)
        d.addErrback(self.write_results_exception_updater_close, result, seqid, oprot)
        return d

    def write_results_success_updater_close(self, success, result, seqid, oprot):
        oprot.writeMessageBegin("updater_close", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_updater_close(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except Exception as e:
            result.e = e
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updater_close", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_update_plain(self, seqid, iprot, oprot):
        args = update_plain_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = update_plain_result()
        d = defer.maybeDeferred(self._handler.update_plain, args.cells, args.updater_id)
        d.addCallback(self.write_results_success_update_plain, result, seqid, oprot)
        d.addErrback(self.write_results_exception_update_plain, result, seqid, oprot)
        return d

    def write_results_success_update_plain(self, success, result, seqid, oprot):
        oprot.writeMessageBegin("update_plain", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_update_plain(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except Exception as e:
            result.e = e
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("update_plain", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_update_counter(self, seqid, iprot, oprot):
        args = update_counter_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = update_counter_result()
        d = defer.maybeDeferred(self._handler.update_counter, args.cells, args.updater_id)
        d.addCallback(self.write_results_success_update_counter, result, seqid, oprot)
        d.addErrback(self.write_results_exception_update_counter, result, seqid, oprot)
        return d

    def write_results_success_update_counter(self, success, result, seqid, oprot):
        oprot.writeMessageBegin("update_counter", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_update_counter(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except Exception as e:
            result.e = e
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("update_counter", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_update_serial(self, seqid, iprot, oprot):
        args = update_serial_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = update_serial_result()
        d = defer.maybeDeferred(self._handler.update_serial, args.cells, args.updater_id)
        d.addCallback(self.write_results_success_update_serial, result, seqid, oprot)
        d.addErrback(self.write_results_exception_update_serial, result, seqid, oprot)
        return d

    def write_results_success_update_serial(self, success, result, seqid, oprot):
        oprot.writeMessageBegin("update_serial", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_update_serial(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except Exception as e:
            result.e = e
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("update_serial", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_update_by_types(self, seqid, iprot, oprot):
        args = update_by_types_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = update_by_types_result()
        d = defer.maybeDeferred(self._handler.update_by_types, args.plain, args.counter, args.serial, args.updater_id)
        d.addCallback(self.write_results_success_update_by_types, result, seqid, oprot)
        d.addErrback(self.write_results_exception_update_by_types, result, seqid, oprot)
        return d

    def write_results_success_update_by_types(self, success, result, seqid, oprot):
        oprot.writeMessageBegin("update_by_types", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_update_by_types(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except Exception as e:
            result.e = e
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("update_by_types", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_mng_column(self, seqid, iprot, oprot):
        args = mng_column_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = mng_column_result()
        d = defer.maybeDeferred(self._handler.mng_column, args.func, args.schema)
        d.addCallback(self.write_results_success_mng_column, result, seqid, oprot)
        d.addErrback(self.write_results_exception_mng_column, result, seqid, oprot)
        return d

    def write_results_success_mng_column(self, success, result, seqid, oprot):
        oprot.writeMessageBegin("mng_column", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_mng_column(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except Exception as e:
            result.e = e
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("mng_column", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_list_columns(self, seqid, iprot, oprot):
        args = list_columns_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = list_columns_result()
        d = defer.maybeDeferred(self._handler.list_columns, args.spec)
        d.addCallback(self.write_results_success_list_columns, result, seqid, oprot)
        d.addErrback(self.write_results_exception_list_columns, result, seqid, oprot)
        return d

    def write_results_success_list_columns(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("list_columns", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_list_columns(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except Exception as e:
            result.e = e
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("list_columns", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_compact_columns(self, seqid, iprot, oprot):
        args = compact_columns_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = compact_columns_result()
        d = defer.maybeDeferred(self._handler.compact_columns, args.spec)
        d.addCallback(self.write_results_success_compact_columns, result, seqid, oprot)
        d.addErrback(self.write_results_exception_compact_columns, result, seqid, oprot)
        return d

    def write_results_success_compact_columns(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("compact_columns", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_compact_columns(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except Exception as e:
            result.e = e
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("compact_columns", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_scan(self, seqid, iprot, oprot):
        args = scan_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = scan_result()
        d = defer.maybeDeferred(self._handler.scan, args.spec)
        d.addCallback(self.write_results_success_scan, result, seqid, oprot)
        d.addErrback(self.write_results_exception_scan, result, seqid, oprot)
        return d

    def write_results_success_scan(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("scan", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_scan(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except Exception as e:
            result.e = e
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("scan", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_scan_rslt_on_column(self, seqid, iprot, oprot):
        args = scan_rslt_on_column_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = scan_rslt_on_column_result()
        d = defer.maybeDeferred(self._handler.scan_rslt_on_column, args.spec)
        d.addCallback(self.write_results_success_scan_rslt_on_column, result, seqid, oprot)
        d.addErrback(self.write_results_exception_scan_rslt_on_column, result, seqid, oprot)
        return d

    def write_results_success_scan_rslt_on_column(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("scan_rslt_on_column", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_scan_rslt_on_column(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except Exception as e:
            result.e = e
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("scan_rslt_on_column", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_scan_rslt_on_key(self, seqid, iprot, oprot):
        args = scan_rslt_on_key_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = scan_rslt_on_key_result()
        d = defer.maybeDeferred(self._handler.scan_rslt_on_key, args.spec)
        d.addCallback(self.write_results_success_scan_rslt_on_key, result, seqid, oprot)
        d.addErrback(self.write_results_exception_scan_rslt_on_key, result, seqid, oprot)
        return d

    def write_results_success_scan_rslt_on_key(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("scan_rslt_on_key", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_scan_rslt_on_key(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except Exception as e:
            result.e = e
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("scan_rslt_on_key", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_scan_rslt_on_fraction(self, seqid, iprot, oprot):
        args = scan_rslt_on_fraction_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = scan_rslt_on_fraction_result()
        d = defer.maybeDeferred(self._handler.scan_rslt_on_fraction, args.spec)
        d.addCallback(self.write_results_success_scan_rslt_on_fraction, result, seqid, oprot)
        d.addErrback(self.write_results_exception_scan_rslt_on_fraction, result, seqid, oprot)
        return d

    def write_results_success_scan_rslt_on_fraction(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("scan_rslt_on_fraction", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_scan_rslt_on_fraction(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except Exception as e:
            result.e = e
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("scan_rslt_on_fraction", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_scan_rslt_on(self, seqid, iprot, oprot):
        args = scan_rslt_on_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = scan_rslt_on_result()
        d = defer.maybeDeferred(self._handler.scan_rslt_on, args.spec, args.rslt)
        d.addCallback(self.write_results_success_scan_rslt_on, result, seqid, oprot)
        d.addErrback(self.write_results_exception_scan_rslt_on, result, seqid, oprot)
        return d

    def write_results_success_scan_rslt_on(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("scan_rslt_on", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_scan_rslt_on(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except Exception as e:
            result.e = e
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("scan_rslt_on", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class sql_mng_column_args(object):
    """
    Attributes:
     - sql: The SQL string to Execute

    """

    __slots__ = (
        'sql',
    )


    def __init__(self, sql=None,):
        self.sql = sql

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sql = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sql_mng_column_args')
        if self.sql is not None:
            oprot.writeFieldBegin('sql', TType.STRING, 1)
            oprot.writeString(self.sql)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sql_mng_column_args)
sql_mng_column_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sql', None, None, ),  # 1
)


class sql_mng_column_result(object):
    """
    Attributes:
     - e

    """

    __slots__ = (
        'e',
    )


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = Exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sql_mng_column_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sql_mng_column_result)
sql_mng_column_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [Exception, None], None, ),  # 1
)


class sql_list_columns_args(object):
    """
    Attributes:
     - sql: The SQL string to Execute

    """

    __slots__ = (
        'sql',
    )


    def __init__(self, sql=None,):
        self.sql = sql

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sql = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sql_list_columns_args')
        if self.sql is not None:
            oprot.writeFieldBegin('sql', TType.STRING, 1)
            oprot.writeString(self.sql)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sql_list_columns_args)
sql_list_columns_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sql', None, None, ),  # 1
)


class sql_list_columns_result(object):
    """
    Attributes:
     - success
     - e

    """

    __slots__ = (
        'success',
        'e',
    )


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype511, _size508) = iprot.readListBegin()
                    for _i512 in range(_size508):
                        _elem513 = Schema()
                        _elem513.read(iprot)
                        self.success.append(_elem513)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = Exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sql_list_columns_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter514 in self.success:
                iter514.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sql_list_columns_result)
sql_list_columns_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [Schema, None], False), None, ),  # 0
    (1, TType.STRUCT, 'e', [Exception, None], None, ),  # 1
)


class sql_compact_columns_args(object):
    """
    Attributes:
     - sql: The SQL string to Execute

    """

    __slots__ = (
        'sql',
    )


    def __init__(self, sql=None,):
        self.sql = sql

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sql = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sql_compact_columns_args')
        if self.sql is not None:
            oprot.writeFieldBegin('sql', TType.STRING, 1)
            oprot.writeString(self.sql)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sql_compact_columns_args)
sql_compact_columns_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sql', None, None, ),  # 1
)


class sql_compact_columns_result(object):
    """
    Attributes:
     - success
     - e

    """

    __slots__ = (
        'success',
        'e',
    )


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype518, _size515) = iprot.readListBegin()
                    for _i519 in range(_size515):
                        _elem520 = CompactResult()
                        _elem520.read(iprot)
                        self.success.append(_elem520)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = Exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sql_compact_columns_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter521 in self.success:
                iter521.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sql_compact_columns_result)
sql_compact_columns_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [CompactResult, None], False), None, ),  # 0
    (1, TType.STRUCT, 'e', [Exception, None], None, ),  # 1
)


class sql_select_plain_args(object):
    """
    Attributes:
     - sql: The SQL string to Execute

    """

    __slots__ = (
        'sql',
    )


    def __init__(self, sql=None,):
        self.sql = sql

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sql = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sql_select_plain_args')
        if self.sql is not None:
            oprot.writeFieldBegin('sql', TType.STRING, 1)
            oprot.writeString(self.sql)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sql_select_plain_args)
sql_select_plain_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sql', None, None, ),  # 1
)


class sql_select_plain_result(object):
    """
    Attributes:
     - success
     - e

    """

    __slots__ = (
        'success',
        'e',
    )


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype525, _size522) = iprot.readListBegin()
                    for _i526 in range(_size522):
                        _elem527 = CellPlain()
                        _elem527.read(iprot)
                        self.success.append(_elem527)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = Exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sql_select_plain_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter528 in self.success:
                iter528.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sql_select_plain_result)
sql_select_plain_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [CellPlain, None], False), None, ),  # 0
    (1, TType.STRUCT, 'e', [Exception, None], None, ),  # 1
)


class sql_select_counter_args(object):
    """
    Attributes:
     - sql: The SQL string to Execute

    """

    __slots__ = (
        'sql',
    )


    def __init__(self, sql=None,):
        self.sql = sql

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sql = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sql_select_counter_args')
        if self.sql is not None:
            oprot.writeFieldBegin('sql', TType.STRING, 1)
            oprot.writeString(self.sql)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sql_select_counter_args)
sql_select_counter_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sql', None, None, ),  # 1
)


class sql_select_counter_result(object):
    """
    Attributes:
     - success
     - e

    """

    __slots__ = (
        'success',
        'e',
    )


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype532, _size529) = iprot.readListBegin()
                    for _i533 in range(_size529):
                        _elem534 = CellCounter()
                        _elem534.read(iprot)
                        self.success.append(_elem534)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = Exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sql_select_counter_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter535 in self.success:
                iter535.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sql_select_counter_result)
sql_select_counter_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [CellCounter, None], False), None, ),  # 0
    (1, TType.STRUCT, 'e', [Exception, None], None, ),  # 1
)


class sql_select_serial_args(object):
    """
    Attributes:
     - sql: The SQL string to Execute

    """

    __slots__ = (
        'sql',
    )


    def __init__(self, sql=None,):
        self.sql = sql

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sql = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sql_select_serial_args')
        if self.sql is not None:
            oprot.writeFieldBegin('sql', TType.STRING, 1)
            oprot.writeString(self.sql)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sql_select_serial_args)
sql_select_serial_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sql', None, None, ),  # 1
)


class sql_select_serial_result(object):
    """
    Attributes:
     - success
     - e

    """

    __slots__ = (
        'success',
        'e',
    )


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype539, _size536) = iprot.readListBegin()
                    for _i540 in range(_size536):
                        _elem541 = CellSerial()
                        _elem541.read(iprot)
                        self.success.append(_elem541)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = Exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sql_select_serial_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter542 in self.success:
                iter542.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sql_select_serial_result)
sql_select_serial_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [CellSerial, None], False), None, ),  # 0
    (1, TType.STRUCT, 'e', [Exception, None], None, ),  # 1
)


class sql_select_args(object):
    """
    Attributes:
     - sql: The SQL string to Execute

    """

    __slots__ = (
        'sql',
    )


    def __init__(self, sql=None,):
        self.sql = sql

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sql = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sql_select_args')
        if self.sql is not None:
            oprot.writeFieldBegin('sql', TType.STRING, 1)
            oprot.writeString(self.sql)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sql_select_args)
sql_select_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sql', None, None, ),  # 1
)


class sql_select_result(object):
    """
    Attributes:
     - success
     - e

    """

    __slots__ = (
        'success',
        'e',
    )


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Cells()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = Exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sql_select_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sql_select_result)
sql_select_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Cells, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [Exception, None], None, ),  # 1
)


class sql_select_rslt_on_column_args(object):
    """
    Attributes:
     - sql: The SQL string to Execute

    """

    __slots__ = (
        'sql',
    )


    def __init__(self, sql=None,):
        self.sql = sql

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sql = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sql_select_rslt_on_column_args')
        if self.sql is not None:
            oprot.writeFieldBegin('sql', TType.STRING, 1)
            oprot.writeString(self.sql)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sql_select_rslt_on_column_args)
sql_select_rslt_on_column_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sql', None, None, ),  # 1
)


class sql_select_rslt_on_column_result(object):
    """
    Attributes:
     - success
     - e

    """

    __slots__ = (
        'success',
        'e',
    )


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.MAP:
                    self.success = {}
                    (_ktype544, _vtype545, _size543) = iprot.readMapBegin()
                    for _i547 in range(_size543):
                        _key548 = iprot.readString()
                        _val549 = cCells()
                        _val549.read(iprot)
                        self.success[_key548] = _val549
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = Exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sql_select_rslt_on_column_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.MAP, 0)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.success))
            for kiter550, viter551 in self.success.items():
                oprot.writeString(kiter550)
                viter551.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sql_select_rslt_on_column_result)
sql_select_rslt_on_column_result.thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING, None, TType.STRUCT, [cCells, None], False), None, ),  # 0
    (1, TType.STRUCT, 'e', [Exception, None], None, ),  # 1
)


class sql_select_rslt_on_key_args(object):
    """
    Attributes:
     - sql: The SQL string to Execute

    """

    __slots__ = (
        'sql',
    )


    def __init__(self, sql=None,):
        self.sql = sql

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sql = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sql_select_rslt_on_key_args')
        if self.sql is not None:
            oprot.writeFieldBegin('sql', TType.STRING, 1)
            oprot.writeString(self.sql)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sql_select_rslt_on_key_args)
sql_select_rslt_on_key_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sql', None, None, ),  # 1
)


class sql_select_rslt_on_key_result(object):
    """
    Attributes:
     - success
     - e

    """

    __slots__ = (
        'success',
        'e',
    )


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype555, _size552) = iprot.readListBegin()
                    for _i556 in range(_size552):
                        _elem557 = kCells()
                        _elem557.read(iprot)
                        self.success.append(_elem557)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = Exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sql_select_rslt_on_key_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter558 in self.success:
                iter558.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sql_select_rslt_on_key_result)
sql_select_rslt_on_key_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [kCells, None], False), None, ),  # 0
    (1, TType.STRUCT, 'e', [Exception, None], None, ),  # 1
)


class sql_select_rslt_on_fraction_args(object):
    """
    Attributes:
     - sql: The SQL string to Execute

    """

    __slots__ = (
        'sql',
    )


    def __init__(self, sql=None,):
        self.sql = sql

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sql = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sql_select_rslt_on_fraction_args')
        if self.sql is not None:
            oprot.writeFieldBegin('sql', TType.STRING, 1)
            oprot.writeString(self.sql)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sql_select_rslt_on_fraction_args)
sql_select_rslt_on_fraction_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sql', None, None, ),  # 1
)


class sql_select_rslt_on_fraction_result(object):
    """
    Attributes:
     - success
     - e

    """

    __slots__ = (
        'success',
        'e',
    )


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = FCells()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = Exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sql_select_rslt_on_fraction_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sql_select_rslt_on_fraction_result)
sql_select_rslt_on_fraction_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [FCells, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [Exception, None], None, ),  # 1
)


class sql_query_args(object):
    """
    Attributes:
     - sql: The SQL string to Execute
     - rslt: The Type of Cells Result for the response

    """

    __slots__ = (
        'sql',
        'rslt',
    )


    def __init__(self, sql=None, rslt=None,):
        self.sql = sql
        self.rslt = rslt

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sql = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.rslt = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sql_query_args')
        if self.sql is not None:
            oprot.writeFieldBegin('sql', TType.STRING, 1)
            oprot.writeString(self.sql)
            oprot.writeFieldEnd()
        if self.rslt is not None:
            oprot.writeFieldBegin('rslt', TType.I32, 2)
            oprot.writeI32(self.rslt)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sql_query_args)
sql_query_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sql', None, None, ),  # 1
    (2, TType.I32, 'rslt', None, None, ),  # 2
)


class sql_query_result(object):
    """
    Attributes:
     - success
     - e

    """

    __slots__ = (
        'success',
        'e',
    )


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = CellsGroup()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = Exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sql_query_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sql_query_result)
sql_query_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [CellsGroup, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [Exception, None], None, ),  # 1
)


class sql_update_args(object):
    """
    Attributes:
     - sql: The SQL string to Execute
     - updater_id: The Updater ID to work with

    """

    __slots__ = (
        'sql',
        'updater_id',
    )


    def __init__(self, sql=None, updater_id=0,):
        self.sql = sql
        self.updater_id = updater_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sql = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.updater_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sql_update_args')
        if self.sql is not None:
            oprot.writeFieldBegin('sql', TType.STRING, 1)
            oprot.writeString(self.sql)
            oprot.writeFieldEnd()
        if self.updater_id is not None:
            oprot.writeFieldBegin('updater_id', TType.I64, 2)
            oprot.writeI64(self.updater_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sql_update_args)
sql_update_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sql', None, None, ),  # 1
    (2, TType.I64, 'updater_id', None, 0, ),  # 2
)


class sql_update_result(object):
    """
    Attributes:
     - e

    """

    __slots__ = (
        'e',
    )


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = Exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sql_update_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sql_update_result)
sql_update_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [Exception, None], None, ),  # 1
)


class exec_sql_args(object):
    """
    Attributes:
     - sql: The SQL string to Execute

    """

    __slots__ = (
        'sql',
    )


    def __init__(self, sql=None,):
        self.sql = sql

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sql = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('exec_sql_args')
        if self.sql is not None:
            oprot.writeFieldBegin('sql', TType.STRING, 1)
            oprot.writeString(self.sql)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(exec_sql_args)
exec_sql_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sql', None, None, ),  # 1
)


class exec_sql_result(object):
    """
    Attributes:
     - success
     - e

    """

    __slots__ = (
        'success',
        'e',
    )


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Result()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = Exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('exec_sql_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(exec_sql_result)
exec_sql_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Result, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [Exception, None], None, ),  # 1
)


class updater_create_args(object):
    """
    Attributes:
     - buffer_size: The buffer size of the Updater

    """

    __slots__ = (
        'buffer_size',
    )


    def __init__(self, buffer_size=None,):
        self.buffer_size = buffer_size

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.buffer_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('updater_create_args')
        if self.buffer_size is not None:
            oprot.writeFieldBegin('buffer_size', TType.I32, 1)
            oprot.writeI32(self.buffer_size)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(updater_create_args)
updater_create_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'buffer_size', None, None, ),  # 1
)


class updater_create_result(object):
    """
    Attributes:
     - success
     - e

    """

    __slots__ = (
        'success',
        'e',
    )


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = Exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('updater_create_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(updater_create_result)
updater_create_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [Exception, None], None, ),  # 1
)


class updater_close_args(object):
    """
    Attributes:
     - id: The Updater ID to close

    """

    __slots__ = (
        'id',
    )


    def __init__(self, id=None,):
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('updater_close_args')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(updater_close_args)
updater_close_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'id', None, None, ),  # 1
)


class updater_close_result(object):
    """
    Attributes:
     - e

    """

    __slots__ = (
        'e',
    )


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = Exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('updater_close_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(updater_close_result)
updater_close_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [Exception, None], None, ),  # 1
)


class update_plain_args(object):
    """
    Attributes:
     - cells: The Cells to update
     - updater_id: The Updater ID to use for write

    """

    __slots__ = (
        'cells',
        'updater_id',
    )


    def __init__(self, cells=None, updater_id=0,):
        self.cells = cells
        self.updater_id = updater_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.cells = {}
                    (_ktype560, _vtype561, _size559) = iprot.readMapBegin()
                    for _i563 in range(_size559):
                        _key564 = iprot.readI64()
                        _val565 = []
                        (_etype569, _size566) = iprot.readListBegin()
                        for _i570 in range(_size566):
                            _elem571 = UCellPlain()
                            _elem571.read(iprot)
                            _val565.append(_elem571)
                        iprot.readListEnd()
                        self.cells[_key564] = _val565
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.updater_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_plain_args')
        if self.cells is not None:
            oprot.writeFieldBegin('cells', TType.MAP, 1)
            oprot.writeMapBegin(TType.I64, TType.LIST, len(self.cells))
            for kiter572, viter573 in self.cells.items():
                oprot.writeI64(kiter572)
                oprot.writeListBegin(TType.STRUCT, len(viter573))
                for iter574 in viter573:
                    iter574.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.updater_id is not None:
            oprot.writeFieldBegin('updater_id', TType.I64, 2)
            oprot.writeI64(self.updater_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_plain_args)
update_plain_args.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'cells', (TType.I64, None, TType.LIST, (TType.STRUCT, [UCellPlain, None], False), False), None, ),  # 1
    (2, TType.I64, 'updater_id', None, 0, ),  # 2
)


class update_plain_result(object):
    """
    Attributes:
     - e

    """

    __slots__ = (
        'e',
    )


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = Exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_plain_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_plain_result)
update_plain_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [Exception, None], None, ),  # 1
)


class update_counter_args(object):
    """
    Attributes:
     - cells: The Counter Cells to update
     - updater_id: The Updater ID to use for write

    """

    __slots__ = (
        'cells',
        'updater_id',
    )


    def __init__(self, cells=None, updater_id=0,):
        self.cells = cells
        self.updater_id = updater_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.cells = {}
                    (_ktype576, _vtype577, _size575) = iprot.readMapBegin()
                    for _i579 in range(_size575):
                        _key580 = iprot.readI64()
                        _val581 = []
                        (_etype585, _size582) = iprot.readListBegin()
                        for _i586 in range(_size582):
                            _elem587 = UCellCounter()
                            _elem587.read(iprot)
                            _val581.append(_elem587)
                        iprot.readListEnd()
                        self.cells[_key580] = _val581
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.updater_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_counter_args')
        if self.cells is not None:
            oprot.writeFieldBegin('cells', TType.MAP, 1)
            oprot.writeMapBegin(TType.I64, TType.LIST, len(self.cells))
            for kiter588, viter589 in self.cells.items():
                oprot.writeI64(kiter588)
                oprot.writeListBegin(TType.STRUCT, len(viter589))
                for iter590 in viter589:
                    iter590.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.updater_id is not None:
            oprot.writeFieldBegin('updater_id', TType.I64, 2)
            oprot.writeI64(self.updater_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_counter_args)
update_counter_args.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'cells', (TType.I64, None, TType.LIST, (TType.STRUCT, [UCellCounter, None], False), False), None, ),  # 1
    (2, TType.I64, 'updater_id', None, 0, ),  # 2
)


class update_counter_result(object):
    """
    Attributes:
     - e

    """

    __slots__ = (
        'e',
    )


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = Exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_counter_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_counter_result)
update_counter_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [Exception, None], None, ),  # 1
)


class update_serial_args(object):
    """
    Attributes:
     - cells: The Serial Cells to update
     - updater_id: The Updater ID to use for write

    """

    __slots__ = (
        'cells',
        'updater_id',
    )


    def __init__(self, cells=None, updater_id=0,):
        self.cells = cells
        self.updater_id = updater_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.cells = {}
                    (_ktype592, _vtype593, _size591) = iprot.readMapBegin()
                    for _i595 in range(_size591):
                        _key596 = iprot.readI64()
                        _val597 = []
                        (_etype601, _size598) = iprot.readListBegin()
                        for _i602 in range(_size598):
                            _elem603 = UCellSerial()
                            _elem603.read(iprot)
                            _val597.append(_elem603)
                        iprot.readListEnd()
                        self.cells[_key596] = _val597
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.updater_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_serial_args')
        if self.cells is not None:
            oprot.writeFieldBegin('cells', TType.MAP, 1)
            oprot.writeMapBegin(TType.I64, TType.LIST, len(self.cells))
            for kiter604, viter605 in self.cells.items():
                oprot.writeI64(kiter604)
                oprot.writeListBegin(TType.STRUCT, len(viter605))
                for iter606 in viter605:
                    iter606.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.updater_id is not None:
            oprot.writeFieldBegin('updater_id', TType.I64, 2)
            oprot.writeI64(self.updater_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_serial_args)
update_serial_args.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'cells', (TType.I64, None, TType.LIST, (TType.STRUCT, [UCellSerial, None], False), False), None, ),  # 1
    (2, TType.I64, 'updater_id', None, 0, ),  # 2
)


class update_serial_result(object):
    """
    Attributes:
     - e

    """

    __slots__ = (
        'e',
    )


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = Exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_serial_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_serial_result)
update_serial_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [Exception, None], None, ),  # 1
)


class update_by_types_args(object):
    """
    Attributes:
     - plain: The PLAIN Cells to update
     - counter: The COUNTER Cells to update
     - serial: The SERIAL Cells to update
     - updater_id: The Updater ID to use for write

    """

    __slots__ = (
        'plain',
        'counter',
        'serial',
        'updater_id',
    )


    def __init__(self, plain=None, counter=None, serial=None, updater_id=0,):
        self.plain = plain
        self.counter = counter
        self.serial = serial
        self.updater_id = updater_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.plain = {}
                    (_ktype608, _vtype609, _size607) = iprot.readMapBegin()
                    for _i611 in range(_size607):
                        _key612 = iprot.readI64()
                        _val613 = []
                        (_etype617, _size614) = iprot.readListBegin()
                        for _i618 in range(_size614):
                            _elem619 = UCellPlain()
                            _elem619.read(iprot)
                            _val613.append(_elem619)
                        iprot.readListEnd()
                        self.plain[_key612] = _val613
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.counter = {}
                    (_ktype621, _vtype622, _size620) = iprot.readMapBegin()
                    for _i624 in range(_size620):
                        _key625 = iprot.readI64()
                        _val626 = []
                        (_etype630, _size627) = iprot.readListBegin()
                        for _i631 in range(_size627):
                            _elem632 = UCellCounter()
                            _elem632.read(iprot)
                            _val626.append(_elem632)
                        iprot.readListEnd()
                        self.counter[_key625] = _val626
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.serial = {}
                    (_ktype634, _vtype635, _size633) = iprot.readMapBegin()
                    for _i637 in range(_size633):
                        _key638 = iprot.readI64()
                        _val639 = []
                        (_etype643, _size640) = iprot.readListBegin()
                        for _i644 in range(_size640):
                            _elem645 = UCellSerial()
                            _elem645.read(iprot)
                            _val639.append(_elem645)
                        iprot.readListEnd()
                        self.serial[_key638] = _val639
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.updater_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_by_types_args')
        if self.plain is not None:
            oprot.writeFieldBegin('plain', TType.MAP, 1)
            oprot.writeMapBegin(TType.I64, TType.LIST, len(self.plain))
            for kiter646, viter647 in self.plain.items():
                oprot.writeI64(kiter646)
                oprot.writeListBegin(TType.STRUCT, len(viter647))
                for iter648 in viter647:
                    iter648.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.counter is not None:
            oprot.writeFieldBegin('counter', TType.MAP, 2)
            oprot.writeMapBegin(TType.I64, TType.LIST, len(self.counter))
            for kiter649, viter650 in self.counter.items():
                oprot.writeI64(kiter649)
                oprot.writeListBegin(TType.STRUCT, len(viter650))
                for iter651 in viter650:
                    iter651.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.serial is not None:
            oprot.writeFieldBegin('serial', TType.MAP, 3)
            oprot.writeMapBegin(TType.I64, TType.LIST, len(self.serial))
            for kiter652, viter653 in self.serial.items():
                oprot.writeI64(kiter652)
                oprot.writeListBegin(TType.STRUCT, len(viter653))
                for iter654 in viter653:
                    iter654.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.updater_id is not None:
            oprot.writeFieldBegin('updater_id', TType.I64, 4)
            oprot.writeI64(self.updater_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_by_types_args)
update_by_types_args.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'plain', (TType.I64, None, TType.LIST, (TType.STRUCT, [UCellPlain, None], False), False), None, ),  # 1
    (2, TType.MAP, 'counter', (TType.I64, None, TType.LIST, (TType.STRUCT, [UCellCounter, None], False), False), None, ),  # 2
    (3, TType.MAP, 'serial', (TType.I64, None, TType.LIST, (TType.STRUCT, [UCellSerial, None], False), False), None, ),  # 3
    (4, TType.I64, 'updater_id', None, 0, ),  # 4
)


class update_by_types_result(object):
    """
    Attributes:
     - e

    """

    __slots__ = (
        'e',
    )


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = Exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_by_types_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_by_types_result)
update_by_types_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [Exception, None], None, ),  # 1
)


class mng_column_args(object):
    """
    Attributes:
     - func: The Action Function to use
     - schema: The Schema for the Action

    """

    __slots__ = (
        'func',
        'schema',
    )


    def __init__(self, func=None, schema=None,):
        self.func = func
        self.schema = schema

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.func = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.schema = Schema()
                    self.schema.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mng_column_args')
        if self.func is not None:
            oprot.writeFieldBegin('func', TType.I32, 1)
            oprot.writeI32(self.func)
            oprot.writeFieldEnd()
        if self.schema is not None:
            oprot.writeFieldBegin('schema', TType.STRUCT, 2)
            self.schema.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mng_column_args)
mng_column_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'func', None, None, ),  # 1
    (2, TType.STRUCT, 'schema', [Schema, None], None, ),  # 2
)


class mng_column_result(object):
    """
    Attributes:
     - e

    """

    __slots__ = (
        'e',
    )


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = Exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mng_column_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mng_column_result)
mng_column_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [Exception, None], None, ),  # 1
)


class list_columns_args(object):
    """
    Attributes:
     - spec: The Schemas Specifications to match Schema for response

    """

    __slots__ = (
        'spec',
    )


    def __init__(self, spec=None,):
        self.spec = spec

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.spec = SpecSchemas()
                    self.spec.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('list_columns_args')
        if self.spec is not None:
            oprot.writeFieldBegin('spec', TType.STRUCT, 1)
            self.spec.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(list_columns_args)
list_columns_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'spec', [SpecSchemas, None], None, ),  # 1
)


class list_columns_result(object):
    """
    Attributes:
     - success
     - e

    """

    __slots__ = (
        'success',
        'e',
    )


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype658, _size655) = iprot.readListBegin()
                    for _i659 in range(_size655):
                        _elem660 = Schema()
                        _elem660.read(iprot)
                        self.success.append(_elem660)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = Exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('list_columns_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter661 in self.success:
                iter661.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(list_columns_result)
list_columns_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [Schema, None], False), None, ),  # 0
    (1, TType.STRUCT, 'e', [Exception, None], None, ),  # 1
)


class compact_columns_args(object):
    """
    Attributes:
     - spec: The Schemas Specifications to match columns to Compact

    """

    __slots__ = (
        'spec',
    )


    def __init__(self, spec=None,):
        self.spec = spec

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.spec = SpecSchemas()
                    self.spec.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('compact_columns_args')
        if self.spec is not None:
            oprot.writeFieldBegin('spec', TType.STRUCT, 1)
            self.spec.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(compact_columns_args)
compact_columns_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'spec', [SpecSchemas, None], None, ),  # 1
)


class compact_columns_result(object):
    """
    Attributes:
     - success
     - e

    """

    __slots__ = (
        'success',
        'e',
    )


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype665, _size662) = iprot.readListBegin()
                    for _i666 in range(_size662):
                        _elem667 = CompactResult()
                        _elem667.read(iprot)
                        self.success.append(_elem667)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = Exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('compact_columns_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter668 in self.success:
                iter668.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(compact_columns_result)
compact_columns_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [CompactResult, None], False), None, ),  # 0
    (1, TType.STRUCT, 'e', [Exception, None], None, ),  # 1
)


class scan_args(object):
    """
    Attributes:
     - spec: The Scan Specifications for the scan

    """

    __slots__ = (
        'spec',
    )


    def __init__(self, spec=None,):
        self.spec = spec

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.spec = SpecScan()
                    self.spec.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('scan_args')
        if self.spec is not None:
            oprot.writeFieldBegin('spec', TType.STRUCT, 1)
            self.spec.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(scan_args)
scan_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'spec', [SpecScan, None], None, ),  # 1
)


class scan_result(object):
    """
    Attributes:
     - success
     - e

    """

    __slots__ = (
        'success',
        'e',
    )


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Cells()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = Exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('scan_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(scan_result)
scan_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Cells, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [Exception, None], None, ),  # 1
)


class scan_rslt_on_column_args(object):
    """
    Attributes:
     - spec: The Scan Specifications for the scan

    """

    __slots__ = (
        'spec',
    )


    def __init__(self, spec=None,):
        self.spec = spec

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.spec = SpecScan()
                    self.spec.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('scan_rslt_on_column_args')
        if self.spec is not None:
            oprot.writeFieldBegin('spec', TType.STRUCT, 1)
            self.spec.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(scan_rslt_on_column_args)
scan_rslt_on_column_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'spec', [SpecScan, None], None, ),  # 1
)


class scan_rslt_on_column_result(object):
    """
    Attributes:
     - success
     - e

    """

    __slots__ = (
        'success',
        'e',
    )


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.MAP:
                    self.success = {}
                    (_ktype670, _vtype671, _size669) = iprot.readMapBegin()
                    for _i673 in range(_size669):
                        _key674 = iprot.readString()
                        _val675 = cCells()
                        _val675.read(iprot)
                        self.success[_key674] = _val675
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = Exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('scan_rslt_on_column_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.MAP, 0)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.success))
            for kiter676, viter677 in self.success.items():
                oprot.writeString(kiter676)
                viter677.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(scan_rslt_on_column_result)
scan_rslt_on_column_result.thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING, None, TType.STRUCT, [cCells, None], False), None, ),  # 0
    (1, TType.STRUCT, 'e', [Exception, None], None, ),  # 1
)


class scan_rslt_on_key_args(object):
    """
    Attributes:
     - spec: The Scan Specifications for the scan

    """

    __slots__ = (
        'spec',
    )


    def __init__(self, spec=None,):
        self.spec = spec

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.spec = SpecScan()
                    self.spec.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('scan_rslt_on_key_args')
        if self.spec is not None:
            oprot.writeFieldBegin('spec', TType.STRUCT, 1)
            self.spec.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(scan_rslt_on_key_args)
scan_rslt_on_key_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'spec', [SpecScan, None], None, ),  # 1
)


class scan_rslt_on_key_result(object):
    """
    Attributes:
     - success
     - e

    """

    __slots__ = (
        'success',
        'e',
    )


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype681, _size678) = iprot.readListBegin()
                    for _i682 in range(_size678):
                        _elem683 = kCells()
                        _elem683.read(iprot)
                        self.success.append(_elem683)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = Exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('scan_rslt_on_key_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter684 in self.success:
                iter684.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(scan_rslt_on_key_result)
scan_rslt_on_key_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [kCells, None], False), None, ),  # 0
    (1, TType.STRUCT, 'e', [Exception, None], None, ),  # 1
)


class scan_rslt_on_fraction_args(object):
    """
    Attributes:
     - spec: The Scan Specifications for the scan

    """

    __slots__ = (
        'spec',
    )


    def __init__(self, spec=None,):
        self.spec = spec

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.spec = SpecScan()
                    self.spec.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('scan_rslt_on_fraction_args')
        if self.spec is not None:
            oprot.writeFieldBegin('spec', TType.STRUCT, 1)
            self.spec.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(scan_rslt_on_fraction_args)
scan_rslt_on_fraction_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'spec', [SpecScan, None], None, ),  # 1
)


class scan_rslt_on_fraction_result(object):
    """
    Attributes:
     - success
     - e

    """

    __slots__ = (
        'success',
        'e',
    )


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = FCells()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = Exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('scan_rslt_on_fraction_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(scan_rslt_on_fraction_result)
scan_rslt_on_fraction_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [FCells, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [Exception, None], None, ),  # 1
)


class scan_rslt_on_args(object):
    """
    Attributes:
     - spec: The Scan Specifications for the scan
     - rslt: The Type of Cells Result for the response

    """

    __slots__ = (
        'spec',
        'rslt',
    )


    def __init__(self, spec=None, rslt=None,):
        self.spec = spec
        self.rslt = rslt

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.spec = SpecScan()
                    self.spec.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.rslt = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('scan_rslt_on_args')
        if self.spec is not None:
            oprot.writeFieldBegin('spec', TType.STRUCT, 1)
            self.spec.write(oprot)
            oprot.writeFieldEnd()
        if self.rslt is not None:
            oprot.writeFieldBegin('rslt', TType.I32, 2)
            oprot.writeI32(self.rslt)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(scan_rslt_on_args)
scan_rslt_on_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'spec', [SpecScan, None], None, ),  # 1
    (2, TType.I32, 'rslt', None, None, ),  # 2
)


class scan_rslt_on_result(object):
    """
    Attributes:
     - success
     - e: The Base Exception

    """

    __slots__ = (
        'success',
        'e',
    )


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = CellsGroup()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = Exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('scan_rslt_on_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(scan_rslt_on_result)
scan_rslt_on_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [CellsGroup, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [Exception, None], None, ),  # 1
)
fix_spec(all_structs)
del all_structs
